{"config":{"lang":["en","ja"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome!","text":"<p>\u6b22\u8fce\u6765\u5230 Frankoxer \u7684\u5c0f\u7834\u7ad9\uff01</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#_1","title":"\u5173\u4e8e\u6211","text":"<p>ZJU/CKC \u5927\u4e09\uff0c\u4e3b\u4fee CS\u3002</p>"},{"location":"about/#_2","title":"\u5173\u4e8e\u7f51\u7ad9","text":"<ul> <li>\u7f51\u7ad9\u5efa\u4e8e 2023 \u5e74 7 \u6708 2 \u65e5\uff1b</li> <li>\u611f\u8c22 Material for MkDocs\u3001GitHub Pages \u7b49\u56e2\u961f\u63d0\u4f9b\u7684\u5de5\u5177\uff1b</li> <li>\u611f\u8c22 Bilibili UP \u4e3b\u3010\u6768\u5e0c\u6770 619\u3011\u7684\u89c6\u9891\uff1aGitHub Pages \u4e2a\u4eba\u7f51\u7ad9\u6784\u5efa\u4e0e\u53d1\u5e03\uff1b</li> </ul>"},{"location":"practice/","title":"Practice","text":"<p>\u672c\u9875\u9762\u7528\u6765\u8bb0\u5f55\u4e00\u4e9b\u8bfe\u7a0b\u5916\u5b66\u4e60\u548c\u5b9e\u8df5\u5fc3\u5f97\u3002</p>"},{"location":"practice/MyMUG/","title":"C++ \u9879\u76ee\u7ba1\u7406\u4e0e\u5de5\u7a0b\u5b9e\u8df5","text":""},{"location":"practice/MyMUG/#_1","title":"\u6982\u8ff0","text":"<p>\u7b14\u8005\u4fee\u8bfb\u4e86\u6d59\u6c5f\u5927\u5b66\u8ba1\u7b97\u673a\u5b66\u9662 2024 \u5e74\u77ed\u5b66\u671f\u8bfe\u7a0b\u300aC++ \u9879\u76ee\u7ba1\u7406\u4e0e\u5de5\u7a0b\u5b9e\u8df5\u300b\uff0c\u5e76\u4e09\u4eba\u7ec4\u961f\u505a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u9879\u76ee\uff1a\u56db\u8f68\u9053\u952e\u76d8\u4ea4\u4e92\u97f3\u6e38\u3002\u8fd9\u7bc7\u6587\u7ae0\u76f8\u5f53\u4e8e\u662f\u5bf9\u8fd9\u5341\u51e0\u5929\u505a\u4e2a\u8bb0\u5f55\u5427\u3002</p> <p>\u6559\u5e08\uff1a\u8881\u6615</p> <p>\u4e0a\u8bfe\u65f6\u95f4\uff1a2024 \u5e74 7 \u6708 1 \u65e5 - 2024 \u5e74 7 \u6708 14 \u65e5</p> <p>\u9879\u76ee\u4ed3\u5e93\uff1a\u70b9\u8fd9\u513f\uff01</p>"},{"location":"practice/MyMUG/#_2","title":"\u505a\u70b9\u51c6\u5907\u5de5\u4f5c","text":"<p>\u5728\u4e0a\u8fd9\u95e8\u8bfe\u4e4b\u524d\u5c31\u542c\u8bf4\u9700\u8981\u4e09\u4eba\u7ec4\u961f\u505a\u4e1c\u897f\uff0c\u6240\u4ee5\u63d0\u524d\u627e\u4e86\u4e24\u4e2a\u961f\u53cb\uff0c\u7136\u540e\u5c31\u5f00\u59cb\u4e86\u8fd9\u95e8\u8bfe\u7684\u5b66\u4e60\u3002\u5934\u51e0\u5929\u4e0a\u8bfe\u8bb2\u7684\u9664\u4e86 C++ \u7684\u5386\u53f2\u3001\u4e00\u4e9b\u7f16\u7a0b\u6ce8\u610f\u4e8b\u9879\u4e4b\u5916\uff0c\u6700\u91cd\u8981\u7684\u662f\u7b2c\u4e8c\u5929\u4ecb\u7ecd\u7684 MVVM \u8f6f\u4ef6\u67b6\u6784\u6a21\u5f0f\u3002\u8fd9\u4e2a\u6a21\u5f0f\u662f\u6211\u4eec\u9879\u76ee\u7684\u57fa\u7840\uff0c\u4e5f\u662f\u6838\u5fc3\uff0c\u66f4\u662f\u8fdb\u884c\u9a8c\u6536\u7684\u65f6\u5019\u8003\u5bdf\u7684\u91cd\u70b9\u3002</p> <p>\u4e00\u5f00\u59cb\u8fd8\u5f88\u6fc0\u52a8\uff0c\u6bd5\u7adf\u5f88\u5c11\u6709\u673a\u4f1a\u5728\u8bfe\u7a0b\u91cc\u9762\u505a\u8fd9\u79cd\u5e26\u7528\u6237\u754c\u9762\u7684\u5e94\u7528\u3002\u5bf9\u6bd4\u4e86\u51e0\u4e2a\u89e3\u51b3\u65b9\u6848\u4e4b\u540e\uff0c\u4f7f\u7528\u4e86\u51e0\u4e4e\u4eba\u5747\u7684 Qt \u5e93\uff08\u867d\u7136\u4e0b\u8f7d\u5b89\u88c5\u52a0\u914d\u7f6e\u5c31\u7528\u4e86\u4e00\u6574\u5929\uff09\u3002\u4e0b\u597d\u4e4b\u540e\u770b\u4e86\u770b\u4ed6\u4eec\u7684\u793a\u4f8b\u5de5\u7a0b\uff0c\u597d\u50cf\u90fd\u662f\u505a\u5de5\u5177\u7c7b\u5e94\u7528\u7684\uff1f</p> <p>\u540e\u6765\u4e0a\u8bfe\u7684\u65f6\u5019\u8001\u5e08\u8bb2\u5230 MVVM \u6846\u67b6\u9002\u5408\u90a3\u4e9b\u4ea4\u4e92\u9891\u7e41\u4f46\u662f\u5237\u65b0\u9891\u7387\u4e0d\u9ad8\u7684\u5e94\u7528\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u6709\u70b9\u614c\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u9879\u76ee\u662f\u4e00\u4e2a\u97f3\u6e38\uff0c\u4ea4\u4e92\u9891\u7387\u5f88\u9ad8\uff0c\u800c\u4e14\u8fd8\u8981\u5b9e\u65f6\u5237\u65b0\u3002\u8fd8\u597d\u8001\u5e08\u540e\u9762\u8bf4\u5bf9\u4e8e\u6e38\u620f\u7c7b\u5e94\u7528\u53ef\u4ee5\u5bf9 MVVM \u6846\u67b6\u505a\u4e00\u4e9b\u4fee\u6539\uff0c\u4e0d\u8fc7\u5bf9\u4e8e\u8fd9\u79cd\u6e38\u620f\u6765\u8bf4\u5fc3\u91cc\u8fd8\u662f\u6ca1\u5e95\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a\u97f3\u6e38 \u8001\u73a9\u5bb6\uff0c\u6211\u4e4b\u524d\u73a9\u7684\u65f6\u5019\u4e5f\u4f1a\u60f3\u662f\u600e\u4e48\u505a\u51fa\u6765\u7684\uff0c\u5c24\u5176\u5bf9\u5224\u5b9a\u7684\u68c0\u6d4b\u548c\u97f3\u4e50\u7684\u540c\u6b65\u611f\u5174\u8da3\u3002\u4e4b\u524d\u4e00\u76f4\u641e\u4e0d\u61c2\u4ed6\u4eec\u662f\u600e\u4e48\u77e5\u9053\u6211\u8981\u5224\u5b9a\u7684\u662f\u54ea\u4e2a note \u7684\u3002</p>"},{"location":"practice/MyMUG/#_3","title":"\u8270\u96be\u7684\u5f00\u59cb","text":"<p>\u6bd5\u7adf\u662f\u8001\u73a9\u5bb6\uff0c\u89c1\u5f97\u591a\uff0c\u6240\u4ee5\u5f53\u4e0a\u4e86\u7ec4\u957f\u8fd8\u662f\u5f88\u6709\u91ce\u5fc3\u7684\uff0c\u60f3\u505a\u51fa\u6765\u5f88\u591a\u529f\u80fd\u3002\u6700\u5f00\u59cb\u7684\u51e0\u5929\u7b79\u5212\u6574\u4e2a\u9879\u76ee\u5efa\u8bbe\uff0c\u8fd8\u5728\u5e7b\u60f3\u5c5e\u4e8e\u81ea\u5df1\u7684 \u4f1f\u5927 \u97f3\u6e38\u3002</p> <p>\u4f46\u662f\u4e1c\u897f\u592a\u591a\u4e86\u4ece\u4f55\u505a\u8d77\u5462\uff1f\u60f3\u5230\u6211\u4eec\u5728\u9a8c\u6536\u7684\u65f6\u5019\u6700\u91cd\u8981\u7684\u662f\u8fd9\u4e2a MVVM \u6846\u67b6\u548c\u89e3\u8026\u5408\u7279\u6027\u6ee1\u8db3\u60c5\u51b5\uff0c\u6700\u540e\u8fd8\u662f\u51b3\u5b9a\u4ece\u4e00\u4e2a\u6700\u57fa\u7840\u7684\u529f\u80fd\u6765\u5f00\u59cb\uff0c\u4f46\u662f\u6bcf\u4e00\u4e2a\u529f\u80fd\u90fd\u8981\u4e25\u683c\u6846\u5728\u8fd9\u4e2a\u6846\u67b6\u91cc\u9762\u3002</p> <p>\u8fd9\u7b2c\u4e00\u4e2a\u529f\u80fd\u5c31\u662f\u89e3\u6790\u8c31\u9762\u6587\u4ef6\u5e76\u753b\u51fa\u8c31\u9762\u7684\u6d41\u52a8\u3002\u8c31\u9762\u6587\u4ef6\u7528\u7684 JSON\uff0c\u914d\u5408\u7b2c\u4e09\u65b9\u5e93\u89e3\u6790\u8fd8\u662f\u5f88\u9999\u7684\u3002\u60f3\u7ed8\u5236\u90a3\u79cd\u8c31\u9762\u7684\u6d41\u52a8\u60c5\u51b5\u8fd8\u6709\u70b9\u8d39\u52b2\uff0c\u56e0\u4e3a\u9075\u5faa\u8fd9\u79cd\u6846\u67b6\u5c31\u8981\u6c42\u6211\u4eec\u628a\u4e1a\u52a1\u903b\u8f91\u548c\u754c\u9762\u5b8c\u5168\u5206\u5f00\u6765\u601d\u8003\uff0c\u4e2d\u95f4\u5c31\u7528\u4e00\u4e9b\u6570\u636e\u6765\u8fde\u63a5\u3002\u6700\u5f00\u59cb\u7684\u65f6\u5019\u60f3\u5230\u4e86\u5f88\u591a\u65b9\u6cd5\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ul> <li>\u76f4\u63a5\u8f93\u51fa\u6240\u6709\u97f3\u7b26\u7684\u8d77\u59cb\u4f4d\u7f6e\u7ed9 View\uff0c\u7136\u540e\u8ba9 Qt \u81ea\u5df1\u52a8</li> <li>\u7528\u4e00\u4e2a QTimer \u5b9a\u65f6\u5668\uff0c\u6bcf\u6b21\u89e6\u53d1\u7684\u65f6\u5019\u8ba9 ViewModel \u66f4\u65b0\u6570\u636e\uff0c\u7136\u540e View \u8bfb\u53d6\u6570\u636e</li> <li>ViewModel \u81ea\u5df1\u6765\u63a7\u5236\u65f6\u95f4\uff0c\u6bcf\u6b21\u66f4\u65b0\u6570\u636e\u7684\u65f6\u5019\u8ba9 View \u8bfb\u53d6\u6570\u636e</li> </ul> <p>\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u9009\u62e9\u662f\u5f88\u5c0f\u5fc3\u7684\uff0c\u751f\u6015\u8fdd\u53cd\u4e86 MVVM \u7684\u539f\u5219\u3002\u6700\u540e\u9009\u62e9\u4e86\u7b2c\u4e09\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u6837 ViewModel \u53ef\u4ee5\u63a7\u5236\u65f6\u95f4\uff0c\u800c\u4e14 View \u53ea\u9700\u8981\u8bfb\u53d6\u6570\u636e\u5c31\u884c\u4e86\u3002\uff08\u6709\u70b9\u50cf\u5728\u505a\u786c\u4ef6\u5b9e\u9a8c\uff1fViewModel \u638c\u63a7\u6574\u4e2a\u6e38\u620f\u7684\u6d41\u7a0b\uff0cView \u5c31\u50cf\u5f00\u53d1\u677f\u4e0a\u7684 VGA \u63a5\u53e3\uff0c\u53ea\u7ba1\u6839\u636e\u62ff\u5230\u7684\u6570\u636e\u753b\u56fe\uff0c\u8ddf\u65f6\u95f4\u5b8c\u5168\u65e0\u5173\uff09</p> <p>\u7ecf\u8fc7\u4e09\u5929\u7684\u56fe\u4e66\u9986\u7814\u8ba8\u5ba4\u5f00\u53d1\u8fc7\u540e\uff0c\u786e\u5b9a\u7528 <code>noteInfo</code> \u8fdb\u884c\u6570\u636e\u4f20\u9012\u7136\u540e\u753b\u56fe\u3002\u611f\u8c22 ViewModel \u540c\u5b66\u80fd\u591f\u638c\u63e1\u8fd9\u4e9b\u9519\u7efc\u590d\u6742\u7684\u6570\u636e\u751f\u6210\u65b9\u5f0f\uff0c\u611f\u8c22 View \u540c\u5b66\u4e0d\u538c\u5176\u70e6\u5730\u753b\u56fe\u5e76\u8c03\u6570\u636e\u3002</p>"},{"location":"practice/MyMUG/#_4","title":"\u7b2c\u4e00\u8f6e\u8fed\u4ee3\uff1a\u723d\u4e86","text":"<p>\u80fd\u6e32\u67d3\u8c31\u9762\u8fd9\u4ef6\u4e8b\uff0c\u5728 7 \u6708 6 \u53f7\u665a\u4e0a\u5c31\u80fd\u5b8c\u6210\u4e86\u30027 \u53f7\u5de6\u53f3\u5f00\u59cb\u4e2d\u671f\u9a8c\u6536\uff0c\u4f46\u662f\u6211\u4eec\u5f53\u65f6\u5df2\u7ecf\u5f00\u59cb\u5904\u7406\u952e\u76d8\u8f93\u5165\u4e86\uff0c\u5c31\u60f3\u7740\u52a0\u4e0a\u4e4b\u540e\u4e00\u5757\u513f\u53bb\u9a8c\u6536\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u5f00\u59cb\u4e86\u7b2c\u4e00\u8f6e\u8fed\u4ee3\u3002</p> <p>7 \u53f7\u8fd9\u5929\u5168\u5728\u505a\u952e\u76d8\u8f93\u5165\u5904\u7406\u3002\u4e24\u8fb9\u5de5\u4f5c\u5176\u5b9e\u633a\u987a\u5229\u7684\uff0c\u4f46\u662f\u5173\u4e8e\u8fd9\u4e2a\u5224\u5b9a\u7684\u95ee\u9898\u8fd8\u662f\u53d1\u73b0\u633a\u591a\u6f0f\u6d1e\u3002\u540e\u6765\u53d1\u73b0\u8fd8\u662f\u5b58\u5728\u5f88\u591a\u6027\u80fd\u95ee\u9898\uff0c\u4f46\u662f\u76ee\u524d\u7684\u60c5\u51b5\u6765\u8bf4\u591f\u7528\u5c31\u884c\u3002\u8fd9\u4e2a\u65f6\u5019\u9010\u6e10\u7406\u89e3\u4e86\u5224\u5b9a\u5ef6\u8fdf\u95ee\u9898\uff0c\u662f\u6240\u6709\u97f3\u6e38\u7684\u4e00\u4e2a\u96be\u70b9\u3002\u600e\u4e48\u53bb\u5904\u7406\u3001\u600e\u4e48\u53bb\u4f18\u5316\uff0c\u5305\u62ec\u600e\u6837\u8ba9\u7528\u6237\u505a\u51fa\u6b63\u786e\u7684\u9009\u62e9\uff0c\u90fd\u662f\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u3002\u8fd9\u4e2a\u201c\u51c6\u201d\u79c1\u4ee5\u4e3a\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u4e00\u90e8\u5206\u662f\u6e38\u620f\u672c\u8eab\u7684\u201c\u51c6\u201d\uff0c\u4e5f\u5c31\u662f\u9884\u8bbe\u7684\u8c31\u9762\u80fd\u4e0d\u80fd\u65e0\u5ef6\u8fdf\u5730\u663e\u793a\u51fa\u6765\uff0c\u53e6\u4e00\u4e2a\u662f\u73a9\u5bb6\u7684\u201c\u51c6\u201d\uff0c\u4e5f\u5c31\u662f\u73a9\u5bb6\u5728\u6b63\u786e\u7684\u65f6\u95f4\u6309\u4e0b\u6309\u952e\u4e4b\u540e\uff0c\u903b\u8f91\u662f\u5426\u4e5f\u80fd\u6b63\u786e\u5224\u5b9a\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f88\u5173\u952e\u3002</p> <p>\u665a\u4e0a\u603b\u7b97\u662f\u80fd\u73a9\u4e86\uff0c\u540e\u6765\u4fee\u4e86\u70b9\u5ef6\u8fdf\uff0c\u505a\u4e86\u70b9\u7f8e\u5316\uff0c\u5c31\u60f3\u7740\u7b2c\u4e8c\u5929\u53bb\u4e2d\u671f\u9a8c\u6536\u3002</p> <p>8 \u53f7\u8d77\u7684\u633a\u65e9\u53bb\u673a\u623f\uff0c\u6ca1\u60f3\u5230\u5230\u7684\u65f6\u5019\u867d\u7136\u5df2\u7ecf\u8fc7\u4e86\u4e0a\u8bfe\u65f6\u95f4\u534a\u4e2a\u591a\u5c0f\u65f6\uff0c\u673a\u623f\u91cc\u90fd\u6ca1\u51e0\u4e2a\u4eba\u54c8\u54c8\u54c8\u54c8\u54c8\uff08\uff09\u3002\u66f4\u6ca1\u60f3\u5230\u7684\u662f 8 \u53f7\u65e9\u4e0a\u9a8c\u6536\uff0c\u6211\u4eec\u7ec4\u7adf\u7136\u8fd8\u662f\u5168\u73ed\u7b2c\u4e00\u4e2a\u8fdb\u884c\u4e2d\u671f\u9a8c\u6536\u7684\u3002\u8001\u5e08\u5c31\u91cd\u70b9\u770b MVVM \u6846\u67b6\u7684\u5b9e\u73b0\uff0c\u597d\u5728\u6211\u4eec\u4ece\u4e00\u5f00\u59cb\u90fd\u5f3a\u903c\u7740\u81ea\u5df1\u6309\u7167\u8fd9\u4e9b\u601d\u7ef4\u5f00\u53d1\uff0c\u6240\u4ee5\u9a8c\u6536\u8fd8\u662f\u633a\u987a\u5229\u7684\u3002\u8001\u5e08\u63d0\u4e86\u4e00\u4e9b\u5efa\u8bae\uff0c\u786e\u5b9e\u5f88\u6709\u9053\u7406\uff0c\u6211\u4eec\u5c31\u56de\u53bb\u7ee7\u7eed\u5f00\u53d1\u4e86\u3002</p>"},{"location":"practice/MyMUG/#_5","title":"\u540e\u9762\u51e0\u5929\u505a\u4ec0\u4e48\u4e86\u5417\uff1f","text":"<p>\u4e0a\u5348\u9a8c\u6536\u5b8c\u5174\u81f4\u52c3\u52c3\u5730\u51c6\u5907\u9884\u7ea6\u4e3b\u56fe\u7814\u8ba8\u5ba4\uff0c\u53d1\u73b0\u9884\u7ea6\u4e0d\u4e86\u4e86\u3002\u539f\u6765\u4ece 8 \u53f7\u5f00\u59cb\u7814\u8ba8\u5ba4\u90fd\u4e0d\u8ba9\u9884\u7ea6\u4e86\uff0c\u5bdd\u5ba4\u53c8\u6709\u5176\u4ed6\u4eba\uff0c\u81ea\u4e60\u5ba4\u8ba8\u8bba\u4e5f\u4e0d\u5408\u9002\uff0c\u897f\u6559\u516c\u5171\u7a7a\u95f4\u6709\u6ca1\u6709\u7a7a\u8c03......\u7d2b\u91d1\u6e2f\u4e4b\u5927\uff0c\u7adf\u7136\u6ca1\u6709\u4e00\u4e2a\u5408\u9002\u7684\u5730\u65b9\u53ef\u4ee5\u8ba9\u6211\u4eec\u7ee7\u7eed\u5f00\u53d1\u3002\u4e8e\u662f\u524d\u5f80\u5496\u5561\u9986\uff0c\u63a5\u7740\u8ba8\u8bba\u3002\u4e0b\u5348\u5c31\u628a\u8001\u5e08\u4e0a\u5348\u8bf4\u7684\u4e24\u4e2a\u95ee\u9898\u641e\u5b8c\u4e86\uff0c\u665a\u4e0a\u5c31\u73a9\u4f1a\u513f\u3002</p> <p>9 \u53f7\u4e5f\u662f\u4e0d\u77e5\u9053\u53bb\u54ea\u91cc\u8ba8\u8bba\uff0c\u6700\u7ec8\u51b3\u5b9a\u524d\u5f80\u4e00\u4e2a\u795e\u5947\u7684\u5730\u65b9\uff1aKTV\u3002\u53c8\u6709\u7a7a\u8c03\u3001\u684c\u5b50\u4e5f\u5927\uff0c\u5199\u7d2f\u4e86\u8fd8\u80fd\u5531\u4f1a\u513f\uff0c\u5929\u624d\uff01\u552f\u4e00\u7684\u7f3a\u70b9\u5c31\u662f\u5149\u7ebf\u4e0d\u592a\u597d\u3002\u8fd9\u5929\u5c31\u505a\u4e86\u4e00\u4e9b\u754c\u9762\u7f8e\u5316\uff0c\u7136\u540e\u52a0\u4e86\u4e2a\u97f3\u7b26\u6253\u4e2d\u5373\u6d88\u5931\u7684\u7279\u6548\u3002\u5feb\u7ed3\u675f\u7684\u65f6\u5019\u6211\u4eec\u5f00\u59cb\u5c06\u76ee\u5149\u8f6c\u5411\u591a\u754c\u9762\u5f00\u53d1\uff0c\u52a0\u4e0a\u6b22\u8fce\u754c\u9762\u3001\u9009\u6b4c\u754c\u9762\u5565\u7684\u3002\u4e0b\u5348\u516d\u70b9\u534a KTV \u5230\u65f6\u95f4\uff0c\u665a\u4e0a\u4e5f\u6ca1\u641e\u5565\u4e86\uff0c\u6253\u4e86\u4e00\u665a\u4e0a\u7403\uff08\uff09\u3002</p> <p>10 \u53f7\u5728\u5e72\u5565\uff1f\u597d\u50cf\u662f\u52a0\u4e86\u4e2a\u6253\u51fb\u97f3\u6548\u4f46\u662f\u5728\u53e6\u5916\u4e24\u4e2a\u4eba\u673a\u5b50\u4e0a\u8dd1\u4e0d\u4e86\u3002\u4e3a\u4e86\u8fd9\u4e8b\u8fd8\u5728 GitHub \u4e0a\u9762 revert \u4e86\u3002\u665a\u4e0a\u5feb\u7761\u4e4b\u524d\u7a81\u7136\u89c9\u5f97\u8fd9\u4e8b\u6709\u70b9\u8e4a\u8df7\uff0c\u540e\u6765\u641c\u4e86\u4e00\u4e0b\u679c\u7136\u6709\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u662f\u6765\u4e0d\u53ca\u4e86\uff0c\u5c31\u7761\u4e86\u3002</p> <p>11 \u53f7\u4e0a\u5348\u5c31\u628a\u90a3\u4e2a\u95ee\u9898\u89e3\u51b3\u4e4b\u540e\u53c8\u5728 GitHub \u4e0a reapply \u4e86\uff0c\u771f\u662f\u6298\u78e8\u4eba\u3002\u4e0b\u5348\u624d\u5f00\u59cb\u8fdb\u884c\u522b\u7684\u754c\u9762\u5f00\u53d1\u3002\u6700\u5148\u662f\u60f3\u505a\u4e00\u4e2a\u7ed3\u7b97\u754c\u9762\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6700\u7b80\u5355\u3002\u5176\u4ed6\u4e24\u4eba\u5728\u505a\u7684\u65f6\u5019\u8001\u5e08\u7a81\u7136\u627e\u5230\u6211\u8bf4\u660e\u5929\u53ef\u4ee5\u641e\u6700\u540e\u9a8c\u6536\u4e86\uff0c\u5413\u6211\u4e00\u8df3\uff0c\u53ef\u80fd\u6211\u4eec\u8fdb\u5ea6\u786e\u5b9e\u6bd4\u8f83\u5feb\u5427\u3002\u6211\u5fc3\u4e2d\u8fd8\u53ef\u4ee5\u52a0\u5f88\u591a\u5f88\u591a\u529f\u80fd\uff0c\u4f46\u662f\u8001\u5e08\u8bf4\u6ca1\u5fc5\u8981\u592a\u591a\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8\u3002</p> <p>\u665a\u4e0a\u56de\u5bdd\u5ba4\u628a\u7ed3\u7b97\u754c\u9762\u505a\u5b8c\u4e86\u3002\u4e00\u770b\u8868\u516b\u70b9\uff0c\u611f\u89c9\u9009\u6b4c\u754c\u9762\u665a\u4e0a\u52a0\u4e2a\u73ed\u5e94\u8be5\u4e5f\u80fd\u505a\uff0c\u6ca1\u60f3\u5230\u4e00\u505a\u5c31\u53c8\u505a\u5230\u4e00\u70b9\u949f\uff0c\u597d\u5728\u662f\u505a\u51fa\u6765\u4e86\u3002\u6700\u540e\u628a\u4ee3\u7801\u90fd\u6574\u7406\u4e00\u4e0b\uff0c\u7761\u4e0b\u51c6\u5907\u9a8c\u6536\uff0c\u6b64\u65f6\u5df2\u662f\u4e09\u70b9\uff08\uff09\u3002</p>"},{"location":"practice/MyMUG/#_6","title":"\u6700\u540e\u9a8c\u6536\uff1a\u9065\u9065\u9886\u5148","text":"<p>12 \u53f7\u65e9\u4e0a\u6ca1\u5565\u53ef\u8bf4\u7684\uff0c\u9a8c\u6536\uff0c\u901a\u8fc7\uff0c\u6f47\u6d12\u79bb\u5f00\uff0c\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u9a8c\u6536\u7684\u7ec4\uff0c\u63d0\u524d\u4e24\u5929\u5b8c\u6210\u4efb\u52a1\uff0c\u795e\uff01</p>"},{"location":"practice/MyMUG/#_7","title":"\u540e\u8bb0","text":"<p>\u5176\u5b9e\u8fd8\u6709\u597d\u591a\u529f\u80fd\u60f3\u5f00\u53d1\u7684\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ul> <li>\u957f\u6761\u97f3\u7b26</li> <li>\u53cc\u62bc\u3001\u591a\u62bc</li> <li>\u97f3\u7b26\u7279\u6548</li> <li>\u7528\u6237\u81ea\u4e3b\u8c03\u8282\u5ef6\u8fdf</li> <li>\u6027\u80fd\u4f18\u5316</li> </ul> <p>\u4e0d\u8fc7\u5bf9\u4e8e\u8fd9\u4e24\u5468\u7684\u8bfe\u7a0b\u6765\u8bf4\uff0c\u786e\u5b9e\u6709\u70b9\u592a\u81ea\u4fe1\u4e86\uff08\u60b2\uff09\u3002\u80fd\u505a\u5230\u8fd9\u4e2a\u6837\u5b50\u4e5f\u633a\u4e0d\u9519\u7684\uff0c\u6bd5\u7adf\u8001\u5e08\u4e00\u76f4\u8bf4\u6211\u4eec\u8fd9\u5c31\u662f\u7ea2\u5305\u96e8\uff0c\u90fd\u7ea2\u5305\u96e8\u4e86\u8fd8\u8981\u5565\u81ea\u884c\u8f66\u3002\u8fd9\u4e9b\u529f\u80fd\u8981\u662f\u6709\u65f6\u95f4\u7684\u8bdd\u8fd8\u662f\u4f1a\u7ee7\u7eed\u5f00\u53d1\u7684\uff0c\u6bd5\u7adf\u8fd9\u4e2a\u9879\u76ee\u8fd8\u662f\u633a\u6709\u610f\u601d\u7684\u3002</p> <p>\u8fd9\u51e0\u5929\u7684\u5f00\u53d1\u5145\u5206\u8bf4\u660e\u4e86\u63d0\u524d\u51c6\u5907\u3001\u63d0\u524d\u5f00\u5de5\u548c\u7d27\u5bc6\u6709\u5e8f\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\u53ca\u5176\u594f\u6548\u7684\uff0c\u56e2\u961f\u5408\u4f5c\u4e5f\u5f88\u91cd\u8981\uff0c\u611f\u8c22\u961f\u5458\u4eec\uff01\u66f4\u8981\u611f\u8c22\u8001\u5e08\uff0c\u7ed9\u4e86\u8bb8\u591a\u5efa\u8bae\u548c\u6307\u5bfc\uff0c\u800c\u4e14\u9a8c\u6536\u7684\u65f6\u5019\u80fd\u804a\u597d\u4e45\u54c8\u54c8\u54c8\u54c8\uff0c\u77e5\u8bc6\u9762\u5f88\u5e7f\u3002</p> <p>\u7ee7\u7eed\u52a0\u6cb9\u5427\uff01</p>"},{"location":"study/","title":"Study","text":"<p>\u672c\u9875\u9762\u7528\u4e8e\u8bb0\u5f55\u5b66\u4e60\uff08\u5305\u542b\u8bfe\u5185\u3001\u8bfe\u5916\u3001\u81ea\u5b66\u7b49\uff09\u7684\u7b14\u8bb0\u3001\u5fc3\u5f97\u3001\u603b\u7ed3\u7b49\u3002</p>"},{"location":"study/course/ads/","title":"Advanced Data Structures and Algorithm Analysis","text":""},{"location":"study/course/ads/#_1","title":"\u8bfe\u7a0b\u4fe1\u606f","text":"<ul> <li>\u8bfe\u7a0b\u540d\u79f0\uff1a\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790</li> <li>\u5b66\u671f\uff1a2023-2024 \u6625\u590f</li> <li>\u6559\u5e08\uff1a\u53f6\u5fb7\u4ed5</li> </ul>"},{"location":"study/course/ads/#_2","title":"\u7b14\u8bb0\u4fe1\u606f","text":"<ul> <li>\u7c7b\u578b\uff1a\u8bfe\u7a0b\u7b14\u8bb0</li> <li>\u4f5c\u8005\uff1aFrankoxer</li> <li>\u53c2\u8003\uff1a\u8bfe\u7a0b\u8bfe\u4ef6\u3001\u4e2d\u56fd\u5927\u5b66 MOOC\u300a\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u300b\uff08\u6d59\u6c5f\u5927\u5b66 \u9648\u8d8a\uff09</li> </ul> <p>\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\uff01</p>"},{"location":"study/course/ads/lec1/","title":"Lecture 1: AVL Trees, Splay Trees, and Amortized Analysis","text":"<p>AVL \u6811\u3001\u4f38\u5c55\u6811\u548c\u644a\u8fd8\u5206\u6790\u3002</p>"},{"location":"study/course/ads/lec1/#1-avl-trees","title":"1 AVL Trees","text":"<ul> <li>Target: Speed up searching(with insertion and deletion). \u52a0\u5feb\u4e8c\u53c9\u6811\u641c\u7d22\u901f\u5ea6\u3002</li> <li>Tool: Binary Search Trees</li> <li>Problem: The height of the tree can be as bad as \\(O(N)\\).</li> </ul> <p>\u4e00\u822c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u5b58\u5728\u95ee\u9898\uff1a\u6811\u7684\u9ad8\u5ea6\u4e0e\u8f93\u5165\u5e8f\u5217\u6709\u5173\u3002\u4f8b\u5982\u5f53\u6211\u4eec\u8f93\u5165\u9012\u589e/\u9012\u51cf\u5e8f\u5217\u6765\u6784\u5efa\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8bdd\uff0c\u6811\u7684\u9ad8\u5ea6\u5c31\u53d8\u6210\u4e86 \\(N\\)\u3002\u800c\u7531\u4e8e\u52a8\u6001\u95ee\u9898\u4e2d\u4e0d\u80fd\u786e\u5b9a\u4e0b\u4e00\u4e2a\u8f93\u5165\u7684\u503c\u662f\u591a\u5c11\uff0c\u56e0\u6b64\u8981\u91cd\u65b0\u6392\u5217\u8f93\u5165\u5e8f\u5217\u6765\u83b7\u5f97\u5e73\u8861\u6811\u662f\u4e0d\u53ef\u80fd\u7684\u3002</p> <p>\u56e0\u6b64\u89e3\u51b3\u95ee\u9898\u7684\u89d2\u5ea6\u53d8\u4e3a\u65f6\u523b\u76ef\u7d27\u8fd9\u68f5\u6811\uff0c\u4e00\u6709\u65b0\u5143\u7d20\u52a0\u5165\u5c31\u91cd\u65b0\u62fe\u6387\u4f7f\u4e4b\u5e73\u8861\u3002\u8fd9\u4e5f\u662f AVL \u6811\uff08Adelson-Velskii-Landis Trees, 1962\uff09\u7684\u601d\u60f3\u3002</p> <p>\u5b9a\u4e49\uff1aHeight Balanced(\u9ad8\u5ea6\u5e73\u8861)</p> <p>An empty binary tree is height balanced. If \\(T\\) is a nonempty binary tree with \\(T_{L}\\) and \\(T_{R}\\) as its left and right subtrees, then \\(T\\) is height balanced iff:</p> <ol> <li>\\(T_{L}\\) and \\(T_{R}\\) are height balanced, and</li> <li>\\(|h_{L}-h_{R}|\\leq 1\\) where \\(h_{L}\\) and \\(h_{R}\\) are the heights of  \\(T_{L}\\) and \\(T_{R}\\), respectively.</li> </ol> <p>\u6ce8\u610f</p> <p>\u7a7a\u6811\u7684\u9ad8\u5ea6\u5b9a\u4e49\u4e3a -1\u3002</p> <p>AVL \u6811\u7684\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\u5c31\u662f\u65f6\u523b\u5173\u6ce8 BF \u503c\uff0c\u5bf9\u6811\u8fdb\u884c\u8c03\u6574\u4f7f\u4e4b\u5e73\u8861\u3002</p> <p>\u5b9a\u4e49\uff1aBalance Factor(\u5e73\u8861\u56e0\u6570)</p> <p>\\(BF(\\mathrm{node})=h_{L}-h_{R}\\). In an AVL tree, \\(BF(\\mathrm{node})=-1, 0, \\mathrm{or}\\  1.\\)</p> <p>\u5728\u52a0\u5165\u65b0\u7684\u7ed3\u70b9\u7684\u65f6\u5019\uff0cBF \u503c\u81ea\u4e0b\u800c\u4e0a\u66f4\u65b0\u3002</p> <p>\u63a5\u4e0b\u6765\u4ecb\u7ecd AVL \u6811\u8fdb\u884c\u8c03\u6574\u7684\u51e0\u79cd\u60c5\u51b5\uff1a</p>"},{"location":"study/course/ads/lec1/#11-single-rotation","title":"1.1 Single Rotation","text":"<p>\u60c5\u51b5\u5982\u4e0a\u3002</p> <p>\u52a0\u5165 Nov \u7ed3\u70b9\u4e4b\u540e\uff0c\u66f4\u65b0 BF \u503c\uff0c\u53d1\u73b0 Mar \u7684 BF \u503c\u5df2\u7ecf\u4e0d\u6ee1\u8db3 AVL \u6811\u7684\u6761\u4ef6\u4e86\u3002\u6b64\u65f6\u8fdb\u884c\u5355\u65cb\uff08Single Rotation\uff09\uff0c\u5c06 Mar \u65cb\u8f6c\u4e0b\u6765\u4f5c\u4e3a May \u7684\u5de6\u5b50\u6811\u3002\u56e0\u4e3a\u8fd9\u4e2a\u95ee\u9898\u7684 \"Trouble Maker\" \u662f \"Trouble Finder\" \u7684\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\uff0c\u6240\u4ee5\u8fd9\u79cd\u64cd\u4f5c\u53c8\u79f0\u4e3a RR Rotation\u3002</p> <p>\u540c\u7406\uff0c\u4e5f\u6709 LL Rotation\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002</p> <p>\u4e00\u822c\u5316\u6b64\u60c5\u51b5\uff0c\u5373\u4e3a\uff1a</p> <p></p> <p>\u63d0\u793a</p> <p>\u8fd9\u91cc\u7684 \\(A\\) \u53ef\u4ee5\u4e0d\u662f\u6811\u6839\u3002</p>"},{"location":"study/course/ads/lec1/#12-double-rotation","title":"1.2 Double Rotation","text":"<p>\u60c5\u51b5\u5982\u4e0a\u3002</p> <p>\u52a0\u5165 Jan \u7ed3\u70b9\u540e\uff0cMay \u7684 BF \u503c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u6b64\u65f6\u5c06 Mar \u62ce\u4e0a\u53bb\u4f5c\u4e3a\u6811\u6839\uff0c\u539f\u6765\u7684 May \u5c31\u4f5c\u4e3a\u5b83\u7684\u53f3\u513f\u5b50\u5373\u53ef\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684 \"Trouble Maker\" \u662f  \"Trouble Finder\" \u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\uff0c\u6240\u4ee5\u8fd9\u79cd\u64cd\u4f5c\u79f0\u4e3a LR Rotation\u3002\u540c\u65f6\uff0c\u8fd9\u79cd\u64cd\u4f5c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e24\u4e2a\u5355\u65cb\u7684\u7ec4\u5408\uff0c\u79f0\u4e3a\u53cc\u65cb\uff08Double Rotation\uff09\u3002</p> <p>\u540c\u7406\uff0c\u4e5f\u6709 RL Rotation\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002</p> <p>\u4e00\u822c\u5316\u6b64\u60c5\u51b5\uff0c\u5373\u4e3a\uff1a</p> <p></p> <p></p> <p>\u63d0\u793a</p> <p>\u8fd9\u91cc\u7684 \\(A\\) \u540c\u6837\u53ef\u4ee5\u4e0d\u662f\u6811\u6839\u3002</p>"},{"location":"study/course/ads/lec1/#13-analysis","title":"1.3 Analysis","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\mathrm{height})\\)\u3002\u8fd9\u91cc\u9700\u8981\u627e\u5230\u8fd9\u4e2a height\u3002\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <p>\u63a8\u5bfc\u8fc7\u7a0b</p> <p>\u8bb0 \\(n_{h}\\) \u4e3a\u9ad8\u5ea6\u4e3a \\(h\\) \u7684\u5e73\u8861\u4e8c\u53c9\u6811\u5305\u542b\u6700\u5c11\u7684\u7ed3\u70b9\u6570\u3002\u5219\u6811\u7684\u5f62\u72b6\u5fc5\u5b9a\u4e3a\uff1a</p> <p></p> <p>\u56e0\u6b64\u63a8\u5bfc\u51fa \\(n_{h}=n_{h-1}+n_{h-2}+1\\)\u3002\u8054\u60f3\u5230\u6590\u6ce2\u90a3\u5951\u6570\u6ee1\u8db3 \\(F_{0}=0, F_{1}=1, F_{i}=F_{i-1}+F_{i-2} ,\\ \\mathrm{for} \\  i&gt;1\\)\uff0c\u53ef\u4ee5\u8bc1\u660e\u51fa \\(n_{h}=F_{h+2}-1, \\ \\mathrm{for}\\ h\\ge0\\).</p> <p>\u7531\u4e8e\u6590\u6ce2\u90a3\u5951\u6570\u5b9a\u7406\u7ed9\u51fa\u4e86 \\(F_{i}\\approx \\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^{i}\\)\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\\(n_{h}\\approx \\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^{h+2}-1\\)\uff0c\u4e5f\u5c31\u662f \\(h\\approx O(\\mathrm{ln}\\ n)\\).</p>"},{"location":"study/course/ads/lec1/#2-splay-trees","title":"2 Splay Trees","text":"<ul> <li>Target: Any \\(M\\) consecutive tree operations starting from an empty tree take at most \\(O(MlogN)\\) time. That means the amortized time(\u644a\u8fd8\u65f6\u95f4) is \\(O(logN)\\).</li> </ul> <p>\u63d0\u793a</p> <p>AVL \u6811\u5c31\u662f\u4e00\u79cd\u4f38\u5c55\u6811\u3002 </p> <p>\u6ce8\u610f</p> <p>\u644a\u8fd8\u65f6\u95f4\u4e3a \\(O(logN)\\)\uff0c\u610f\u5473\u7740\u76f8\u8f83\u4e8e AVL \u6811\uff08\u4efb\u4f55\u64cd\u4f5c\u65f6\u95f4\u90fd\u4e3a \\(O(logN)\\)\uff09\uff0c\u65f6\u95f4\u4e0a\u754c\u8981\u6c42\u53d8\u4f4e\u4e86\uff0c\u53d8\u6210\u4e86 \\(O(N)\\)\u3002\u4f46\u867d\u7136\u5982\u6b64\uff0c\u5e73\u5747\u6548\u679c\u662f\u5dee\u4e0d\u591a\u7684\u3002\u5373\u4f7f\u5355\u4e2a\u64cd\u4f5c\u53ef\u80fd\u574f\u5230 \\(O(N)\\)\uff0c\u603b\u7528\u65f6\u8fd8\u662f\u4f1a\u4ee5 \\(O(MlogN)\\) \u7684\u5f62\u5f0f\u51fa\u73b0\u3002</p> <p>\u6ce8\u610f\u5230\u5982\u679c\u4ee5\u540c\u6837\u7684\u7ebf\u6027\u65f6\u95f4\u65b9\u5f0f\u8bbf\u95ee\u67d0\u4e2a\u8282\u70b9 \\(M\\) \u6b21\uff0c\u603b\u7528\u65f6\u5c31\u6709\u53ef\u80fd\u53d8\u6210 \\(O(MN)\\)\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u60f3\u770b\u5230\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u91c7\u7528\u65b9\u6cd5\uff1aWhenever a node is accessed, it must be moved.</p> <ul> <li>Idea: After a node is accessed, it is pushed to the root by a series of AVL tree rotations.</li> </ul> <p>\u65cb\u8f6c\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <p></p> <p>\u5bf9\u4e8e\u5220\u9664\uff0c\u5206\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\uff1a</p> <ol> <li>Find X, and X will be at the root;</li> <li>Remove X, and there will be 2 subtrees \\(T_{L}\\) and \\(T_{R}\\);</li> <li>FindMax(\\(T_{L}\\)), the largest element will be the root of \\(T_{L}\\), and has no right child;</li> <li>Make \\(T_{R}\\) the right child of the root of \\(T_{L}\\).</li> </ol> <p>Splay \u6811\u5b9e\u73b0\u8d77\u6765\u6bd4 AVL \u6811\u8981\u7b80\u5355\u3002</p>"},{"location":"study/course/ads/lec1/#3-amortized-analysis","title":"3 Amortized Analysis","text":"<ul> <li>Target: Any \\(M\\) consecutive operations take at most \\(O(MlogN)\\) time. \u5e73\u5747\u4e0b\u6765\u6bcf\u4e2a\u64cd\u4f5c\u82b1\u8d39\u65f6\u95f4\u4e3a \\(O(logN)\\)\uff0c\u8fd9\u79f0\u4e3a\u644a\u8fd8\u65f6\u95f4\u4e0a\u754c\uff08amortized time bound\uff09\u3002</li> </ul> <p>\u4e09\u79cd\u65f6\u95f4\u7684\u6bd4\u8f83</p> <p>worst-case bound &gt;= amortized bound &gt;= average-case bound</p> <p>Amortized bound does not involve probability. \u5206\u6790\u5e73\u5747\u60c5\u51b5\u65f6\u4e5f\u8bb8\u4f1a\u5047\u8bbe\u4e0d\u540c\u6837\u4f8b\u4e4b\u95f4\u7684\u6982\u7387\u5927\u5c0f\uff0c\u4f46\u662f\u644a\u8fd8\u4e0a\u754c\u90fd\u662f\u6240\u6709\u60c5\u51b5\u7684\u771f\u5b9e\u5e73\u5747\u503c\u3002</p> <p>\u505a\u644a\u8fd8\u5206\u6790\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a\u603b\u91cf\u5206\u6790\u3001\u4f1a\u8ba1\u6cd5\u548c\u52bf\u80fd\u6cd5\u3002</p>"},{"location":"study/course/ads/lec1/#31-aggregate-analysis","title":"3.1 Aggregate Analysis","text":"<p>\u603b\u91cf\u5206\u6790\u3002</p> <ul> <li>Idea: Show that for all \\(n\\), a sequence of \\(n\\) operations takes worst-case time \\(T(n)\\) in total. In the worst case, the average cost, or amortized cost, per operation is therefore \\(T(n)/n\\). \u8bd5\u56fe\u8bc1\u660e\u5bf9\u6240\u6709\u7684 \\(n\\)\uff0c\u8003\u8651\u4e00\u7cfb\u5217\u7684 \\(n\\) \u4e2a\u64cd\u4f5c\uff0c\u65e0\u8bba\u8fd9\u4e9b\u64cd\u4f5c\u662f\u4ec0\u4e48\uff0c\u5f97\u5230\u4e00\u4e2a\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u603b\u65f6\u95f4 \\(T(n)\\)\uff08\u603b\u91cf\uff09\uff0c\u8fdb\u800c\u9664\u4ee5 \\(n\\) \u5f97\u5230\u644a\u8fd8\u5f00\u9500\u3002</li> </ul> <p>\u4e3e\u4e2a\u6817\u5b50</p> <p>\u5b9a\u4e49\u5806\u6808\u4ece\u7a7a\u6808\u5f00\u59cb\u7684\u4e09\u79cd\u64cd\u4f5c\uff1a<code>push</code>\uff0c<code>pop</code> \u548c <code>multipop</code>\uff0c\u5176\u4e2d <code>multipop</code> \u662f\u4e00\u6b21\u5f39\u51fa k \u4e2a\u5143\u7d20\u3002\u73b0\u5728\u5bf9\u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u8fdb\u884c\u644a\u8fd8\u5206\u6790\u3002</p> <p><code>push</code> \u548c <code>pop</code> \u4e00\u6b21\u7684\u65f6\u95f4\u90fd\u662f \\(O(1)\\)\uff0c\u800c <code>multipop</code> \u4e00\u6b21\u7684\u65f6\u95f4\u53d6\u51b3\u4e8e k\uff0c\u6700\u5927\u80fd\u591f\u5230 \\(O(n)\\)\u3002</p> <p>\u6211\u4eec\u8fdb\u884c \\(n\\) \u6b21\u64cd\u4f5c\uff0c\u5047\u8bbe\u6bcf\u6b21\u90fd\u662f <code>multipop</code>\uff0c\u800c\u4e14\u6bcf\u6b21 <code>multipop</code> \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u53d6 \\(O(n)\\)\uff0c\u770b\u4e0a\u53bb\u603b\u7684\u65f6\u95f4\u662f \\(O(n^2)\\)\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u8fd9\u91cc\u662f\u4ece\u7a7a\u6808\u5f00\u59cb\uff0c\u4e00\u4e2a\u5143\u7d20\u538b\u4e00\u6b21\u4e0d\u53ef\u80fd\u5f39\u51fa\u6765\u4e24\u6b21\uff0c\u6240\u4ee5\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u7528 \\(n-1\\) \u6b21\u7684 <code>push</code> \u914d\u5408\u4e0a \\(1\\) \u6b21\u7684 <code>multipop</code>\uff0c\u4e00\u6b21\u5f39\u51fa \\(n-1\\) \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u603b\u65f6\u95f4\u5c31\u662f \\(2n-2\\)\uff0c\u8fdb\u800c\u5f97\u5230\u644a\u8fd8\u65f6\u95f4\u5c31\u662f \\(O(1)\\)\u3002</p>"},{"location":"study/course/ads/lec1/#32-accounting-method","title":"3.2 Accounting Method","text":"<p>\u4f1a\u8ba1\u6cd5\u3002</p> <ul> <li>Idea: When an operation\u2019s amortized cost \\(\\hat{c}_{i}\\) exceeds its actual cost \\(c_{i}\\) , we assign the difference to specific objects in the data structure as credit. Credit can help pay for later operations whose amortized cost is less than their actual cost.</li> </ul> <p>\u5bf9\u4e8e\u6240\u6709\u7684 \\(n\\) \u6b21\u64cd\u4f5c\uff0c\u5fc5\u987b\u4fdd\u8bc1 \\(\\sum\\limits_{i=1}^{n}\\hat{c}_i\\ge\\sum\\limits_{i=1}^{n}c_i\\)\u3002</p> <p>\u4e3e\u4e2a\u6817\u5b50</p> <p></p> <p>\u4f1a\u8ba1\u6cd5\u548c\u603b\u91cf\u5206\u6790\u7684\u4e0d\u540c\uff1a\u5bf9\u4e8e\u4f1a\u8ba1\u6cd5\uff0c\u4e0d\u540c\u64cd\u4f5c\u7684\u644a\u8fd8\u5f00\u9500\u53ef\u80fd\u662f\u4e0d\u540c\u7684\uff08\u7ed9\u4e0d\u540c\u7684\u64cd\u4f5c\u5206\u914d\u4e0d\u540c\u7684 credits\uff09\u3002</p> <p>\u5bf9\u4e8e\u590d\u6742\u7684\u95ee\u9898\uff0c\u60f3\u8981\u5b9a\u4e0b\u6765\u4e00\u4e2a credits \u8fd8\u662f\u5f88\u96be\u7684\u3002</p>"},{"location":"study/course/ads/lec1/#33-potential-method","title":"3.3 Potential Method","text":"<p>\u52bf\u80fd\u6cd5\u3002</p> <ul> <li>Idea: \\(\\hat{c}_i-c_i=Credit_i=\\Phi(D_i)-\\Phi(D_{i-1})\\), where \\(\\Phi(x)\\) is called the Potential function. Sum them up and we get \\(\\sum\\limits_{i=1}^n\\hat{c}_i=(\\sum\\limits_{i=1}^nc_i)+\\Phi(D_n)-\\Phi(D_0)\\).</li> </ul> <p>\u5982\u679c\u80fd\u4fdd\u8bc1 \\(\\Phi(D_n)-\\Phi(D_0) \\ge 0\\)\uff0c\u5c31\u80fd\u786e\u4fdd\u644a\u8fd8\u603b\u5f00\u9500\u662f\u5b9e\u9645\u5f00\u9500\u7684\u4e0a\u754c\u3002</p> <p>\u95ee\u9898\u8f6c\u53d8\u4e3a\u9009\u53d6\u4e00\u4e2a\u597d\u7684\u52bf\u80fd\u51fd\u6570\u3002</p> <p>In general, a good potential function should always assume its minimum at the start of the sequence.</p> <p>\u4e3e\u4e2a\u6817\u5b50</p> <p></p> <p>\u7528\u52bf\u80fd\u6cd5\u5206\u6790 Splay \u6811\uff1a</p> <p>\u8fd9\u91cc\u7684\u52bf\u80fd\u51fd\u6570\u53d6 \\(\\Phi(D_{i})=\\sum\\limits_{i=1}^nlogS(i)\\)\uff0c\u5176\u4e2d \\(S(i)\\) \u662f \\(i\\) \u7ed3\u70b9\u7684\u5b50\u5b59\u6570\u91cf\u3002</p> <p></p> <p>\u5982\u679c\u64cd\u4f5c\u4ece\u7a7a\u6811\u5f00\u59cb\uff0c\u644a\u8fd8\u5206\u6790\u4e2d\u80fd\u591f\u8ba9 \\(M\\) \u8f83\u5927\u3002\u5982\u679c\u975e\u7a7a\u6811\u5f00\u59cb\uff0c\u9700\u8981\u6709 \\(M\\) \u5145\u5206\u5927\u7684\u5047\u8bbe\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u644a\u8fd8\u65f6\u95f4\u4e0a\u754c\u4e3a \\(O(MlogN)\\)\u3002</p>"},{"location":"study/course/ads/lec10/","title":"Lecture 10: NP","text":""},{"location":"study/course/ads/lec10/#1-easy-vs-hard","title":"1 Easy vs. Hard","text":"<p>The easist: \\(O(N)\\), since we have to read all the input.</p> <p>The hardest: Undecidable problems, such as the Halting Problem.</p>"},{"location":"study/course/ads/lec10/#2-the-class-np","title":"2 The Class NP","text":"<p>Turing machine is introduced to simulate any kind of computation which a mathematician can do by some arithmetical method. \u56fe\u7075\u673a\u7531\u65e0\u9650\u957f\u7684\u7eb8\u5e26\u548c\u8bfb\u5199\u5934\u7ec4\u6210\uff0c\u7eb8\u5e26\u4e0a\u7684\u6bcf\u4e2a\u683c\u5b50\u90fd\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a\u7b26\u53f7\uff0c\u8bfb\u5199\u5934\u53ef\u4ee5\u8bfb\u53d6\u6216\u5199\u5165\u7b26\u53f7\u3002</p> <p>A Deterministic Turing Machine executes one instruction at each point in time. Then depending on the the instruction, it goes to the next unique instruction.</p> <p>A Non-deterministic Turing Machine is free to choose its next step from a inite set. And if one of these steps leads to a solution, it will always choose the correct one.</p> <p>\u8fd9\u91cc\u7684 NP \u662f Non-deterministic Polynomial time \u7684\u7f29\u5199\u3002</p> <p>The problem is NP if we can prove any solution is true in polynomial time.</p> <p>\u6ce8\u610f</p> <p>Not all decidable problems are in NP. For example, consider the problem of determing whether a graph does not contain a Hamiltonian cycle.</p> <p>\u6309\u7167\u4ee5\u4e0a\u7684\u53d9\u8ff0\uff0c\u53ef\u4ee5\u77e5\u9053 \\(P \\subseteq NP\\)\u3002\u4f46\u662f\u6709\u6ca1\u6709 \\(P \\subset NP\\) \u5462\uff1f\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u672a\u89e3\u51b3\u7684\u95ee\u9898\u3002</p>"},{"location":"study/course/ads/lec10/#3-np-complete-problems-the-hardest-in-np","title":"3 NP-Complete Problems: the Hardest in NP","text":"<p>An NP-Complete problem has the property that any problem in NP can be polynomially reduced to it.</p> <p>If we can solve one NP-Complete problem in polynomial time, we can solve all NP problems in polynomial time.</p> <p>Given any instance \\(\\alpha\\) of an NP-Complete problem, we can reduce it to an instance \\(\\beta\\) of another NP-Complete problem in polynomial time, and then solve \\(\\beta\\) in polynomial time, then we can solve \\(\\alpha\\) in polynomial time.</p> <p>\u63d0\u793a</p> <p>Decision problem is easier, since we only have to answer yes or no. Optimization problem can be related to a decision problem. Example: SHORTEST-PATH relates to PATH: given a directed graph G, vertices u and v, and an integer k, does a path exist from u to v consisting of at most k edges?</p> <p>\u7b2c\u4e00\u4e2a\u88ab\u8bc1\u660e\u662f NP-Complete \u7684\u95ee\u9898\u662f SAT\uff08Satisfiability\uff09\u95ee\u9898\u3002</p>"},{"location":"study/course/ads/lec10/#4-a-formal-language-framework","title":"4 A Formal-language Framework","text":"<p>An abstract problem Q is a binary relation on a set I of problem instances and a set S of solutions.</p> <p>If we map I into a binary string {0,1}, then Q is a concrete problem*.</p> <p>\u5bf9\u4e8e decision problem\uff0c\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p></p> <p></p> <p>\u6709\u5173 co-NP \u7684\u5b9a\u4e49\uff1a</p> <p></p> <p></p>"},{"location":"study/course/ads/lec11/","title":"Lecture 11: Approximation","text":"<p>\u8fd1\u4f3c\u7b97\u6cd5\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3 NPC \u95ee\u9898\uff0c\u6211\u4eec\u6709\u51e0\u79cd\u89d2\u5ea6\uff1a</p> <ul> <li>\u5982\u679c \\(N\\) \u5f88\u5c0f\uff0c\u5c0f\u5230 \\(O(2^N)\\) \u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7a77\u4e3e</li> <li>\u53ef\u4ee5\u5728\u67d0\u4e9b\u7279\u5b9a\u7684 special cases \u4e0b\u7528\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\u89e3\u51b3</li> <li>\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f97\u5230\u4e00\u4e2a\u63a5\u8fd1\u6700\u4f18\u89e3\u7684\u89e3\uff0c\u8fd9\u5c31\u662f\u8fd1\u4f3c\u7b97\u6cd5</li> </ul> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0e\u8d2a\u5a6a\u7b49\u542f\u53d1\u5f0f\u7b97\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u8d2a\u5a6a\u662f\u4e0d\u7ba1\u6548\u679c\u7684\uff0c\u800c\u8fd1\u4f3c\u7b97\u6cd5\u4f1a\u6709\u8fd1\u4f3c\u89e3\u7684\u8d28\u91cf\u65b9\u9762\u7684\u8ba8\u8bba\u3002</p>"},{"location":"study/course/ads/lec11/#1-approximation-ratio","title":"1 Approximation Ratio","text":"<p>\u5bf9\u4e8e\u4efb\u610f\u7684\u8f93\u5165\u5927\u5c0f N\uff0c\u6211\u4eec\u8bb0\u8fd1\u4f3c\u7b97\u6cd5\u7684\u89e3\u4e3a \\(C\\)\uff0c\u6700\u4f18\u89e3\u4e3a \\(C^*\\)\uff0c\u90a3\u4e48\u6211\u4eec\u5b9a\u4e49\u8fd1\u4f3c\u6bd4\u4f8b\uff08Approximation Ratio\uff09\\(\\rho(n)\\) \u4e3a\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u503c\uff1a</p> \\[ max(\\frac{C}{C^*}, \\frac{C^*}{C}) \\le \\rho(n) \\] <p>\u8fd9\u91cc\u6709\u4e24\u9879\u7684 max \u4ee3\u8868\u6211\u4eec\u9700\u8981\u8003\u8651\u6700\u5927\u5316\u95ee\u9898\u548c\u6700\u5c0f\u5316\u95ee\u9898\u3002</p> <p>\u8fd8\u6709\u5173\u4e8e approximation scheme \u7684\u6982\u5ff5\uff0c\u5373\u5bf9\u4e8e\u4efb\u610f\u7684 \\(\\epsilon &gt; 0\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5f97\u5230\u4e00\u4e2a\u89e3\uff0c\u5176\u8fd1\u4f3c\u6bd4\u4f8b\u4e3a \\(1 + \\epsilon\\)\u3002</p> <p>\u6211\u4eec\u79f0\u4e00\u4e2a approximation scheme \u662f polynomial-time approximation scheme\uff08PTAS\uff09\u5982\u679c\u5176\u8fd0\u884c\u65f6\u95f4\u5173\u4e8e N \u662f\u591a\u9879\u5f0f\u7684\uff0c\u4f8b\u5982 \\(O(N^{2/\\epsilon})\\)\u3002</p> <p>\u6211\u4eec\u79f0\u4e00\u4e2a approximation scheme \u662f fully polynomial-time approximation scheme\uff08FPTAS\uff09\u5982\u679c\u5176\u8fd0\u884c\u65f6\u95f4\u5173\u4e8e 1/epsilon \u548c N \u662f\u591a\u9879\u5f0f\u7684\uff0c\u4f8b\u5982 \\(O((1/\\epsilon)^2n^3)\\)\u3002</p>"},{"location":"study/course/ads/lec11/#2-example-bin-packing","title":"2 Example: Bin Packing","text":"<p>\u539f\u95ee\u9898\u662f\u4e00\u4e2a NP Hard \u95ee\u9898\uff0c\u5b83\u7684 decision version \u662f NP Complete\u3002</p> <p>\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\uff1a</p>"},{"location":"study/course/ads/lec11/#21-next-fit","title":"2.1 Next Fit","text":"<p>\u6309\u7167\u987a\u5e8f\u8bfb item\uff0c\u5982\u679c\u72ec\u5230\u7684 item \u5728\u5f53\u524d\u7684 bin \u653e\u5f97\u4e0b\u5c31\u88c5\uff0c\u5426\u5219\u4e3a item2 \u5f00\u4e00\u4e2a\u65b0\u7684 bin\u3002</p> <p>\u8fd1\u4f3c\u6bd4\uff1f\u8bb0\u6700\u4f18\u89e3\u9700\u8981\u7684 bin \u6570\u91cf\u4e3a M\uff0c\u5219 next fit \u7684\u89e3\u9700\u8981\u4e0d\u8d85\u8fc7 2M-1 \u4e2a bin\uff0c\u5e76\u4e14\u5b58\u5728\u4e00\u4e2a\u5e8f\u5217\u4f7f\u5f97 next fit \u7684\u89e3\u6070\u597d\u662f 2M-1 \u4e2a bin\u3002\u8fd1\u4f3c\u6bd4\u4e3a 2\u3002</p>"},{"location":"study/course/ads/lec11/#22-first-fit","title":"2.2 First Fit","text":"<p>\u8bfb\u5230 item \u7684\u65f6\u5019\uff0c\u5bfb\u627e\u7b2c\u4e00\u4e2a\u80fd\u653e\u4e0b item \u7684 bin\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u5f00\u4e00\u4e2a\u65b0\u7684 bin\u3002</p> <p>\u8fd1\u4f3c\u6bd4\uff1f\u8bb0\u6700\u4f18\u89e3\u9700\u8981\u7684 bin \u6570\u91cf\u4e3a M\uff0c\u5219 first fit \u7684\u89e3\u9700\u8981\u4e0d\u8d85\u8fc7 17M/10 \u4e2a bin\uff0c\u5e76\u4e14\u5b58\u5728\u4e00\u4e2a\u5e8f\u5217\u4f7f\u5f97 first fit \u7684\u89e3\u6070\u597d\u662f 17(M-1)/10 \u4e2a bin\u3002\u8fd1\u4f3c\u6bd4\u4e3a 1.7\u3002</p>"},{"location":"study/course/ads/lec11/#23-best-fit","title":"2.3 Best Fit","text":"<p>\u8bfb\u5230 item \u7684\u65f6\u5019\uff0c\u5bfb\u627e\u80fd\u88c5\u4e0b\u3001\u4e14\u88c5\u4e0b item \u4e4b\u540e\u5269\u4f59\u7a7a\u95f4\u6700\u5c0f\u7684 bin\uff0c\u5426\u5219\u5c31\u5f00\u4e00\u4e2a\u65b0\u7684 bin\u3002</p> <p>\u8fd1\u4f3c\u6bd4\uff1f\u4e5f\u662f 1.7\u3002</p> <p>\u6b64\u5916\u8fd8\u6709 worst fit\uff08\u88c5\u6700\u4e0d\u6ee1\u7684\uff09\u3001almost worst fit\u3001any fit \u7b49\u3002\u90fd\u662f 1.7\u3002</p> <p>\u4e0a\u9762\u4e09\u4e2a\u90fd\u662f online algorithms\uff0c\u5373\u53ea\u80fd\u8bfb\u5230 item \u4e4b\u540e\u624d\u80fd\u51b3\u5b9a\u653e\u5728\u54ea\u4e2a bin\u3002</p> <p>\u5b9a\u7406</p> <p>\u5b58\u5728\u8f93\u5165\u5e8f\u5217\u4f7f\u5f97\u4efb\u610f\u7684 online \u7684\u96c6\u88c5\u7bb1\u95ee\u9898\u4f7f\u7528\u7684\u6570\u91cf\u81f3\u5c11\u662f\u6700\u4f18\u89e3\u6570\u91cf\u7684 5/3 \u500d\u3002</p>"},{"location":"study/course/ads/lec11/#24-offline-algorithm-first-fit-decreasing","title":"2.4 Offline Algorithm: First Fit Decreasing","text":"<p>\u5148\u628a size \u6309\u7167\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u7528 first fit \u6216\u8005 best fit\u3002</p> <p>\u5b9a\u7406</p> <p>First Fit Decreasing \u4f7f\u7528\u4e0d\u8d85\u8fc7 11M/9+6/9 \u4e2a bin\uff0c\u5176\u4e2d M \u662f\u6700\u4f18\u89e3\u7684 bin \u6570\u91cf\u3002\u4e14\u5b58\u5728\u4e00\u4e2a\u5e8f\u5217\u4f7f\u5f97 First Fit Decreasing \u7684\u89e3\u662f 11M/9+6/9 \u4e2a bin\u3002</p> <p>\u8fd9\u65f6\u7b80\u5355\u7684\u8d2a\u5a6a\u542f\u53d1\u7b97\u6cd5\u4e5f\u80fd\u7ed9\u51fa\u8f83\u597d\u7684\u7ed3\u679c\u3002</p>"},{"location":"study/course/ads/lec11/#3-example-the-knapsack-problem","title":"3 Example: The KnapSack Problem","text":"<p>\u80cc\u5305\u95ee\u9898\u3002</p> <p>\u5bf9\u4e8e\u53ef\u4ee5\u5206\u5272\u7684\u7248\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u8d2a\u5fc3\u7684\u6761\u4ef6\u662f\u9009\u62e9 profit/weight \u6700\u5927\u7684 item\u3002</p> <p>\u5bf9\u4e8e 0-1 \u80cc\u5305\u95ee\u9898\uff08\u8fd9\u662f\u4e00\u4e2a NP-Hard \u95ee\u9898\uff09\uff0c\u8d2a\u5a6a\u4e0d\u4e00\u5b9a\u5f97\u5230\u6700\u4f18\u89e3\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u6700\u5927\u4ef7\u503c\u6216\u8005\u6700\u5927\u6027\u4ef7\u6bd4\u7684 item\uff0c\u90a3\u4e48\u8d2a\u5fc3\u7b97\u6cd5\u7684\u8fd1\u4f3c\u6bd4\u662f 2\u3002\u8bc1\u660e\u5982\u4e0b\uff1a</p> <p></p> <p>0-1 \u80cc\u5305\u95ee\u9898\u8fd8\u80fd\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u3002\u6211\u4eec\u8bb0 \\(W_{i,p}\\) \u662f\u4ece\u524d \\(i\\) \u4e2a item \u4e2d\u9009\u51fa\u7684 profit \u6070\u597d\u4e3a \\(p\\) \u7684\u6700\u5c0f weight\u3002\u90a3\u4e48\u6211\u4eec\u6709\u5982\u4e0b\u7684\u9012\u63a8\u5173\u7cfb\uff1a</p> \\[ W_{i,p} = \\left \\{ \\begin{aligned} &amp; \\infty &amp; \\text{if } i=0 \\\\ &amp; W_{i-1,p} &amp; \\text{if } p_i &gt; p \\\\ &amp; min(W_{i-1,p}, W_{i-1,p-p_i}+w_i) &amp; \\text{otherwise} \\end{aligned} \\right. \\] <p>\u8fd9\u91cc\u7684 i \u4ece 1 \u5230 n\uff0cp \u4ece 1 \u5230 \\(np_{max}\\)\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2p_{max})\\)\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e2d input size \u5305\u62ec pmax \u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u957f\u5ea6 d\uff0c\u6240\u4ee5 pmax \u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5e76\u4e0d\u662f\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u3002</p> <p>\u90a3\u5982\u679c pmax \u5f88\u5927\u548b\u529e\u5462\uff1f\u6211\u4eec\u628a profit \u901a\u8fc7\u9664\u4ee5\u67d0\u4e00\u4e2a\u6570\u5b57\u8fdb\u884c\u7f29\u653e\uff0c\u7136\u540e\u518d\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u3002</p> <p></p>"},{"location":"study/course/ads/lec11/#4-example-the-k-center-problem","title":"4 Example: The K-Center Problem","text":"<p>\u6700\u7b80\u5355\u7684\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u6211\u4eec\u4ece\u7b2c\u4e00\u4e2a center \u5f00\u59cb\uff0c\u6bcf\u6b21\u6dfb\u52a0 center \u6765\u51cf\u5c0f covering radius\u3002</p> <p>\u8fd9\u5f88\u4e0d\u597d\u3002</p> <p>\u6539\u8fdb\uff1aGreedy-2r\uff0c\u6bcf\u6b21\u6dfb\u52a0\u4e00\u4e2a center\uff0c\u7136\u540e\u628a\u6240\u6709\u7684\u70b9\u90fd cover \u4f4f\u3002</p> <p>\u5982\u679c r \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(\\log r)\\)\u3002</p> <p>\u5b9a\u7406</p> <p>Unless P = NP, there is no \\(\\rho\\)-approximation algorithm for the k-center problem with \\(\\rho &lt; 2\\).</p>"},{"location":"study/course/ads/lec11/#5-summary","title":"5 Summary","text":"<ul> <li>A: Optimality</li> <li>B: Efficiency</li> <li>C: All instances</li> </ul> <p>Even if P = NP, still we cannot guarantee A+B+C.</p>"},{"location":"study/course/ads/lec12/","title":"Lecture 12: Local Search","text":"<p>\u5c40\u90e8\u641c\u7d22\u3002</p>"},{"location":"study/course/ads/lec12/#1-framework-of-local-search","title":"1 Framework of Local Search","text":"<ul> <li>Local: Define a neighborhood of solutions, find a local optimum.</li> <li>Search: Start with a feasible solution and search a better one within the neighborhood. A local optimum is achieved if no improving solution can be found.</li> </ul>"},{"location":"study/course/ads/lec12/#2-example-vertex-cover","title":"2 Example: Vertex Cover","text":"<ul> <li>Feasible solution: all the vertex covers.</li> <li>Search: Start from S = V, delete a node and check if S' is a vertex cover with a smaller size.</li> </ul> <p>\u6709\u51e0\u79cd\u60c5\u51b5\uff1a</p> <p></p> <p>\u4e3a\u4e86\u9632\u6b62\u6211\u4eec\u4e00\u5f00\u59cb\u5c31\u628a\u6700\u4f18\u89e3\u7684\u70b9\u53bb\u6389\uff08\u5e76\u4e14\u662f\u4e0d\u80fd undo \u7684\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 The Metropolis Algorithm\u3002</p> <p></p> <p>\u8fd9\u91cc\u9762\u7684\u6982\u7387\u548c\u5b9a\u4e49\u7684\u6e29\u5ea6 T \u6709\u5173\u7cfb\u3002\u5f53 T \u5f88\u9ad8\u7684\u65f6\u5019\uff0c\u4e0a\u5761\u7684\u6982\u7387\u51e0\u4e4e\u4e3a 1\uff0c\u5bb9\u6613\u5f15\u8d77\u5e95\u90e8\u9707\u8361\uff1b\u5f53 T \u5f88\u4f4e\u7684\u65f6\u5019\uff0c\u4e0a\u5761\u7684\u6982\u7387\u51e0\u4e4e\u4e3a 0\uff0c\u63a5\u8fd1\u539f\u59cb\u7684\u68af\u5ea6\u4e0b\u964d\u6cd5\u3002</p> <p>\u5bf9\u4e8e case 1\uff0c\u6709\u4e00\u5b9a\u6982\u7387\u53ef\u4ee5\u8df3\u51fa local optimum \u5f97\u5230\u6b63\u786e\u89e3\u3002\u4f46\u662f\u5bf9 case 0\uff0c\u6709\u53ef\u80fd\u5728\u52a0 1 \u548c\u51cf 1 \u4e4b\u95f4\u65e0\u9650\u9707\u8361\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0 Simulated Annealing\uff0c\u5373\u6a21\u62df\u9000\u706b\uff1a\u5236\u5b9a\u4e00\u4e2a cooling schedule\uff0c\u9010\u6e10\u964d\u4f4e\u6e29\u5ea6\uff0c\u4f7f\u5f97\u6982\u7387\u9010\u6e10\u53d8\u5c0f\u3002</p>"},{"location":"study/course/ads/lec12/#3-example-hopfield-neural-network","title":"3 Example: Hopfield Neural Network","text":"<p>\u8fd9\u4e2a\u95ee\u9898\u6709\u51e0\u4e2a\u5b9a\u4e49\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>\u8fb9\u6743\u91cd\u4e3a\u8d1f\uff0c\u8868\u793a\u4e0d\u540c\u7684\u8282\u70b9\u4e4b\u95f4\u662f same state\uff1b\u8fb9\u6743\u91cd\u4e3a\u6b63\uff0c\u8868\u793a\u4e0d\u540c\u7684\u8282\u70b9\u4e4b\u95f4\u662f different state\u3002</li> <li>\u6709\u53ef\u80fd\u4e0d\u5b58\u5728\u4e00\u4e2a\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684 configuration\u3002</li> <li>\u5bf9\u4e8e\u8fb9\u6765\u8bf4\uff0c\u7b26\u5408\u4e0a\u9762\u8fd9\u4e2a\u89c4\u5219\u5c31\u79f0\u4e3a good\uff0c\u5426\u5219\u79f0\u4e3a bad\u3002</li> <li>\u5bf9\u4e8e\u7ed3\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u6240\u6709\u4e0e\u5b83\u76f8\u8fde\u7684\u8fb9\u7684 \\(w_e s_u s_v\\) \u52a0\u8d77\u6765\u662f\u5c0f\u4e8e 0 \u7684\uff0c\u5c31\u79f0\u8fd9\u4e2a\u8282\u70b9\u662f satisfied \u7684\uff0c\u5426\u5219\u662f unsatisfied \u7684\u3002</li> <li>\u5982\u679c\u8fd9\u4e2a\u56fe\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f satisfied \u7684\uff0c\u5c31\u79f0\u8fd9\u4e2a\u56fe\u662f stable \u7684\u3002</li> </ul> <p>\u95ee\u9898\u6765\u4e86\u3002\u8fd9\u4e2a\u95ee\u9898\u4e2d\u7684\u7f51\u7edc\u662f\u5426\u603b\u6709\u4e00\u4e2a stable \u7684\u72b6\u6001\u5462\uff1f\u5982\u679c\u6709\uff0c\u5982\u4f55\u627e\u5230\u8fd9\u4e2a stable \u7684\u72b6\u6001\u5462\uff1f</p> <p>\u7b54\u6848\u662f\u6709\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684 state-flipping algorithm\uff1a\u4ece\u4efb\u610f\u4e00\u4e2a configuration \u5f00\u59cb\uff0c\u5982\u679c\u5b83\u4e0d\u662f stable \u7684\uff0c\u5c31\u9009\u62e9\u4e00\u4e2a unsatisfied \u7684\u8282\u70b9\uff0c\u7136\u540e flip \u5b83\u7684\u72b6\u6001\u3002</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u4f1a\u5728\u6700\u591a  \\(W=\\sum_e|w_e|\\) \u6b21\u5faa\u73af\u540e\u7ec8\u6b62\u5230 stable \u72b6\u6001\u3002</p> <p>\u7528\u5c40\u90e8\u641c\u7d22\u7684\u601d\u60f3\u6765\u601d\u8003\u8fd9\u4e2a\u95ee\u9898\uff1a</p> <ul> <li>Feasible solution: \u4efb\u610f\u4e00\u4e2a configuration\u3002</li> <li>Search: \u4ece\u4efb\u610f\u4e00\u4e2a configuration \u5f00\u59cb\uff0c\u5982\u679c\u5b83\u4e0d\u662f stable \u7684\uff0c\u5c31\u9009\u62e9\u4e00\u4e2a unsatisfied \u7684\u8282\u70b9\uff0c\u7136\u540e flip \u5b83\u7684\u72b6\u6001\u3002</li> </ul> <p>Any local maximum in the state-flipping algorithm to maximize is a stable configuration.</p> <p>\u662f\u5426\u662f\u591a\u9879\u5f0f\u65f6\u95f4\uff1f\u6709\u5f85\u7814\u7a76\u3002</p>"},{"location":"study/course/ads/lec12/#4-example-the-maximum-cut-problem","title":"4 Example: The Maximum Cut Problem","text":"<p>\u56fe\u5206\u4e3a\u4e24\u7ec4\u9876\u70b9\uff0c\u8981\u6c42\u8de8\u7ec4\u7684\u6240\u6709\u8fb9\u6743\u91cd\u4e4b\u548c\u6700\u5927\u3002</p> <p>\u5c40\u90e8\u641c\u7d22\u601d\u8003\uff1a</p> <ul> <li>Feasible Solution: \u4efb\u610f\u4e00\u4e2a\u5206\u5272</li> <li>Search: \u628a\u4e00\u4e2a\u9876\u70b9\u4ece B \u79fb\u5230 A\uff0c\u6216\u8005\u53cd\u8fc7\u6765\u3002</li> </ul> <p>\u5b9e\u9645\u4e0a\u662f\u4e0a\u9762\u95ee\u9898\u7684\u4e00\u79cd\u7279\u4f8b\uff1a\u8fb9\u6743\u91cd\u90fd\u4e3a\u6b63\u503c\u3002</p> <p>\u95ee\u9898\uff1a\u8fd9\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\u6709\u591a\u597d\uff1f</p> <p>\u7b54\u6848\uff1a\\(w(A,B) \\ge 1/2w(A^*,B^*)\\).</p> <p>Unless P = NP, no 17/16 approximation algorithm for max-cut.</p> <p>\u7531\u4e8e\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u80fd\u4e0d\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u6211\u4eec\u60f3\u8ba9\u4ed6\u5728\u201c\u6ca1\u6709\u91cd\u5927\u63d0\u5347\u201d\u7684\u65f6\u5019\u5c31\u505c\u4e0b\u6765\uff0c\u4e3a\u6b64\uff0c\u5b9a\u4e49</p> <p>Big-improvement-flip: Only choose a node which, when flipped, increases the cut value by at least</p> \\[ \\frac{2\\epsilon}{|V|}\\ w(A,B) \\] <p>\u5b9a\u4e49\u8fd9\u79cd\u7ffb\u8f6c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u8fd1\u4f3c\u6bd4\u4e3a 2+\\(\\epsilon\\)\uff0c\u800c\u4e14\u6700\u591a\u5728 \\(O(n/\\epsilon \\log W)\\) \u6b21\u7ffb\u8f6c\u4e4b\u540e\u5c31\u7ed3\u675f\u3002</p>"},{"location":"study/course/ads/lec13/","title":"Lecture 13: Randomized Algorithms","text":""},{"location":"study/course/ads/lec13/#1-example-hiring-problem","title":"1 Example: Hiring Problem","text":"<p>\u6700\u574f\u60c5\u51b5\u662f\u9762\u8bd5\u8005\u6309\u7167\u5176 quality \u6b63\u5e8f\u6765\u9762\u8bd5\uff0c\u6700\u597d\u60c5\u51b5\u662f\u5012\u5e8f\u3002</p> <p>\u90a3\u4e48\u5047\u8bbe\u9762\u8bd5\u8005\u4ee5\u968f\u673a\u987a\u5e8f\u6765\u9762\u8bd5\uff0c\u671f\u671b\u5f00\u9500\u662f\u591a\u5c11\u5462\uff1f\u5047\u8bbe\u6709 X \u4eba\u88ab\u96c7\u4f63\uff0c\u90a3\u4e48 X \u7684\u671f\u671b\u5c31\u662f \\(E[X]=\\sum\\limits_{j=1}^N\\cdot Pr[X=j]\\)\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u9762\u8bd5\u8005\u8fdb\u884c\u5206\u6790\uff0c\u4ee5 X_i \u6765\u5224\u5b9a\u8fd9\u4e2a\u4eba\u6709\u6ca1\u6709\u88ab\u96c7\u4f63\uff0c1 \u4e3a\u88ab\u96c7\u4f63\u3002\u90a3\u4e48\u5f88\u5bb9\u6613\u77e5\u9053 X \u5c31\u662f\u6bcf\u4e2a X_i \u7684\u548c\uff0c\u6839\u636e\u6570\u5b66\u77e5\u8bc6\u53ef\u4ee5\u77e5\u9053 X \u7684\u671f\u671b\u4e5f\u5c31\u662f\u6bcf\u4e2a X_i \u7684\u671f\u671b\u7684\u548c\u3002</p> <p>\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u4eba\u88ab\u96c7\u4f63\u7684\u6982\u7387\u662f\u591a\u5c11\uff0c\u4e5f\u5c31\u662f \\(Pr[X_i=1]\\) \u662f\u591a\u5c11\u3002\u7531\u4e8e\u8fd9\u91cc\u6211\u4eec\u8bf4\u662f\u968f\u673a\u6765\u7684\uff0c\u6240\u4ee5\u5c31\u5047\u8bbe\u4e3a 1/i\u3002\u628a\u4ed6\u4eec\u52a0\u8d77\u6765\u8fd0\u7528\u5fae\u79ef\u5206\u77e5\u8bc6\u5c31\u77e5\u9053 \\(\\(E[X]=lnN+O(1)\\)\\)</p> <p>\u6240\u4ee5\u603b\u7684\u5f00\u9500\u5c31\u662f \\(O(C_h\\ lnN+NC_i)\\)\u3002</p> <p>\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6211\u4eec\u9700\u8981\u968f\u673a\u751f\u6210\u9762\u8bd5\u987a\u5e8f\u3002\u8fd9\u662f\u9700\u8981\u65f6\u95f4\u7684\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <p></p> <p>\u4ee5\u4e0a\u662f\u4e00\u79cd offline \u7b97\u6cd5\u3002</p> <p>\u5bf9\u4e8e\u5728\u7ebf\u7b97\u6cd5\uff0c\u6211\u4eec\u4e0d\u80fd\u66f4\u6539\u9762\u8bd5\u7684\u987a\u5e8f\uff0c\u600e\u4e48\u505a\u5462\uff1f\u53ea\u96c7\u4f63\u4e00\u6b21\u3002</p> C<pre><code>int OnlineHiring ( EventType C[ ], int N, int k )\n{\n    int Best = N;\n    int BestQ = -INF ;\n    for ( i=1; i&lt;=k; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ )   BestQ = Qi;\n    }\n    for ( i=k+1; i&lt;=N; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ ) {\n            Best = i;\n            break;\n        }\n    }\n    return Best;\n}\n</code></pre> <p>\u90a3\u4e48\u8fd9\u91cc\u6709\u4e24\u4e2a\u95ee\u9898\uff1a</p> <ol> <li>\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684 k\uff0c\u6211\u4eec\u96c7\u4f63\u5230\u6700\u6709\u80fd\u529b\u7684\u4eba\u7684\u6982\u7387\u662f\u591a\u5c11\uff1f</li> <li>\u5982\u4f55\u8bbe\u7f6e k \u6765\u4f7f\u5f97\u8fd9\u4e2a\u6982\u7387\u6700\u5927\uff1f</li> </ol> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u8bb0 \\(S_i\\) \u8fd9\u4e2a\u4e8b\u4ef6\u4ee3\u8868\u7b2c i \u4e2a\u9762\u8bd5\u8005\u5c31\u662f\u6700\u725b\u903c\u7684\u3002\u90a3\u4e48\u5982\u4f55\u4f7f\u5f97 \\(S_i\\) \u4e3a\u771f\uff1f\u9700\u8981\u4e24\u4e2a\u6761\u4ef6\uff1a</p> <ul> <li>A: The best one is at position i.</li> <li>B: No one at positions k+1 to i-1 is hired.</li> </ul> <p>\u8fd9\u4e24\u4e2a\u4e8b\u4ef6\u662f\u72ec\u7acb\u4e8b\u4ef6\uff0c\u56e0\u6b64\u6709</p> \\[ Pr[S_i] = Pr[A\\cap B]=Pr[A]\\cdot Pr[B]=1/N\\cdot k/(i-1)=\\frac{k}{N(i-1)} \\] \\[ Pr[S]=\\sum Pr[S_i]=\\sum\\limits_{i=k+1}^N \\frac{k}{N(i-1)}=\\frac{k}{N}\\sum\\limits_{i=k}^{N-1}\\frac{1}{i} \\] <p>\u4e8e\u662f\u6211\u4eec\u6709\u4e86\u56de\u7b54\uff1a</p> <ol> <li>\u5bf9\u4e8e\u7ed9\u5b9a\u7684 k\uff0c\u771f\u7684\u96c7\u4f63\u5230\u6700\u5389\u5bb3\u7684\u4eba\u7684\u6982\u7387\u662f $$\\frac{k}{N} ln(\\frac{N}{k} )\\le Pr[S] \\le \\frac{k}{N}ln(\\frac{N-1}{k-1} ) $$</li> <li>\u60f3\u8ba9\u8fd9\u4e2a\u6982\u7387\u6700\u5927\uff0c \\(k=\\frac{N}{e}\\)\uff0c\u8fd9\u4e2a\u6982\u7387\u662f \\(1/e\\)\u3002</li> </ol>"},{"location":"study/course/ads/lec13/#2-example-quicksort","title":"2 Example: Quicksort","text":"<p>\u5bf9\u4e8e FDS \u8bfe\u7a0b\u4e2d\u5b66\u5230\u7684 Deterministic Quicksort\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\Theta(N^2)\\)\u3002</p> <p>\u5982\u679c\u6211\u4eec\u968f\u673a\u9009\u62e9 pivot \u5462\uff1f</p> <p>Central splitter\uff1a\u4e24\u8fb9\u81f3\u5c11\u5360 \u00bc \u7684\u5206\u6cd5\u3002</p> <p>Modified Quicksort\uff1a\u6bcf\u6b21\u90fd\u9009 Central splitter \u5f53 pivot\u3002</p> <p>\u7531\u4e8e\u9009\u5230 central \u5206\u5272\u70b9\u7684\u6982\u7387\u4e3a 0.5\uff0c\u6240\u4ee5\u968f\u673a\u9009\u62e9\u9009\u5230 central \u5206\u5272\u70b9\u7684\u671f\u671b\u6b21\u6570\u4e3a 2.</p> <p></p>"},{"location":"study/course/ads/lec2/","title":"Lecture 2: Red-Black Trees and B+ Trees","text":"<p>\u7ea2\u9ed1\u6811\u548c B+ \u6811\u3002</p> <p>\u524d\u9762\u7684 AVL \u6811\u5bf9\u3010\u5e73\u8861\u3011\u8fd9\u4e2a\u6982\u5ff5\u7684\u5b9a\u4e49\u662f\u4efb\u610f\u8282\u70b9\u5de6\u5b50\u6811\u9ad8\u5ea6\u4e0e\u53f3\u5b50\u6811\u9ad8\u5ea6\u6700\u591a\u76f8\u5dee1\uff0c\u6211\u4eec\u5f97\u5230\u8fd9\u6837\u7684\u6811\u9ad8\u786e\u5b9e\u662f \\(O(logN)\\) \u7ea7\u522b\u7684\u3002</p> <p>\u4f46\u662f\u5bf9\u641c\u7d22\u6811\u7684\u5e73\u8861\u5b9a\u4e49\u53ef\u4ee5\u4e0d\u5c3d\u76f8\u540c\uff0c\u4f8b\u5982\u8fd9\u4e00\u8bb2\u7684\u7ea2\u9ed1\u6811\u548c B+ \u6811\u4e5f\u662f\u5e73\u8861\u7684\uff0c\u800c\u4e14\u5728\u5b9e\u9645\u7cfb\u7edf\u4e2d\u66f4\u52a0\u5e38\u7528\u3002</p>"},{"location":"study/course/ads/lec2/#1-red-black-trees-definition","title":"1 Red-Black Trees: Definition","text":"<ul> <li>Target: Balanced binary search tree</li> </ul> <p>\u7ea2\u9ed1\u6811\u7684\u7ed3\u70b9\u793a\u610f\u56fe\u5982\u4e0b\u3002NIL(\u7a7a\u7ed3\u70b9)\u4e00\u822c\u79f0\u4e3a\u5916\u70b9\u3002</p> <p></p> <p>A red-black tree is a binary search tree that satisfies the following properties:</p> <ol> <li>Every node is either red or black.</li> <li>The root is black.</li> <li>Every leaf (NIL) is black.</li> <li>If a node is red, then both its children are black.</li> <li>For each node, all simple paths from the node to decendant leaves contain the same number of black nodes.</li> </ol> <p></p> <p>Black-Height \u7684\u5b9a\u4e49</p> <p>The black-height of any node x, denoted by bh(x), is the number of black nodes on any simple path from x (x not included) down to a leaf. bh(Tree)=bh(root).</p> <p>Lemma</p> <p>A red-black tree with \\(N\\) internal nodes has height at most \\(2ln(N+1)\\).</p>"},{"location":"study/course/ads/lec2/#2-red-black-trees-operations","title":"2 Red-Black Trees: Operations","text":""},{"location":"study/course/ads/lec2/#21-insertion","title":"2.1 Insertion","text":"<ul> <li>Idea: Insert &amp; color red.</li> </ul>"},{"location":"study/course/ads/lec2/#22-deletion","title":"2.2 Deletion","text":"<p>\u5c3d\u91cf\u4e0d\u6539\u53d8\u7ed3\u70b9\u7684\u989c\u8272\u3002\u6700\u591a\u53ea\u9700\u8981\u4e09\u6b21\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5b9e\u73b0\uff0c\u8fd9\u662f\u76f8\u5bf9\u4e8e AVL \u6811\u7684\u4f18\u52bf\u3002</p> <p>\u552f\u4e00\u9700\u8981\u91cd\u65b0\u5e73\u8861\u7684\u65f6\u5019\u5c31\u662f\u5220\u9664\u4e00\u4e2a\u9ed1\u8272\u53f6\u8282\u70b9\u3002\u7531\u4e8e\u9700\u8981\u4fdd\u6301\u5e73\u8861\uff0c\u6211\u4eec\u9700\u8981\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u52a0\u4e00\u4e2a\u9ed1\u8272\u7ed3\u70b9\u3002</p> <p></p> <p></p>"},{"location":"study/course/ads/lec2/#3-comparison-with-avl-trees","title":"3 Comparison with AVL Trees","text":"<p>Number of rotations:</p> AVL Tree Red-Black Tree Insertion \\(\\le2\\) \\(\\le2\\) Deletion \\(O(logN)\\) \\(\\le3\\)"},{"location":"study/course/ads/lec2/#4-b-trees","title":"4 B+ Trees","text":"<p>\u5b9a\u4e49\uff1a</p> <p>A B+ Tree of order M is a tree with the following structural properties:</p> <ol> <li>The root is either a leaf or has between 2 and M children.</li> <li>All nonleaf nodes (except the root) have between \\(\\lceil M/2 \\rceil\\) and M children.</li> <li>All leaves are at the same depth.</li> </ol>"},{"location":"study/course/ads/lec3/","title":"Lecture 3: Inverted File Index","text":"<p>\u5012\u6392\u7d22\u5f15\u3002</p>"},{"location":"study/course/ads/lec3/#1-structure","title":"1 Structure","text":"<p>The real key technique used by search engines.</p> <p>\u5f15\u5165\uff1a\u4e3e\u4e2a\u6817\u5b50</p> <p>\u5047\u5982\u6211\u4eec\u60f3\u641c\u7d22\u5e26\u6709\u201cComputer Science\u201d\u5173\u952e\u8bcd\u7684\u7f51\u7ad9\uff0c\u6709\u54ea\u4e9b\u65b9\u6cd5\uff1f</p> <ul> <li>Solution 1: \u5bf9\u6bcf\u4e2a\u9875\u9762\u8fdb\u884c \"Computer Science\" \u5b57\u7b26\u4e32\u7684\u626b\u63cf\uff1f Wait till your next life!!!</li> <li>Solution 2: \u4f7f\u7528 Term-Document Incidence Matrix</li> </ul> <p></p> <p>\u4f1a\u51fa\u73b0\u7684\u95ee\u9898\uff1a\u77e9\u9635\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u7a00\u758f\uff08\u6709\u5f88\u591a 0\uff09\u3002</p> <p>\u5982\u4f55\u89e3\u51b3\uff1f\u4f7f\u7528\u5012\u6392\u7d22\u5f15\u3002</p> <p>\u5b9a\u4e49</p> <p>Index is a mechanism for locating a given term in a text. \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u5b58\u50a8\u4f4d\u7f6e\u7684\u6307\u9488\u3002</p> <p>Inverted file contains a list of pointers (e.g. the number of a page) to all occurrences of that term in the text.</p> <p></p> <p>\u4e3a\u4ec0\u4e48\u8981\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570 Frequency</p> <p>\u5728\u505a\u591a\u5173\u952e\u8bcd\u6c42\u4ea4\u96c6\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5e38\u5e38\u9009\u62e9\u4ece\u9891\u7387\u4f4e\u7684\u5173\u952e\u8bcd\u5165\u624b\uff0c\u8fd9\u6837\u80fd\u591f\u52a0\u5feb\u6c42\u89e3\u7684\u901f\u5ea6\u3002</p> <p>\u95ee\u9898\u53d8\u4e3a\u5982\u4f55\u751f\u6210\u8fd9\u4e9b index\u3002</p> <p>Index Generator: Text Only<pre><code>while ( read a document D )\n{\n    while ( read a term T in D ){\n        if ( Find ( Dictionary, T ) == false )\n            Insert( Dictionary, T );\n        Get T's posting list;\n        Insert a node to T's posting list;\n    }\n}\nWrite the inverted index to disk;\n</code></pre></p> <p>\u4ee5\u4e0a\u6d89\u53ca\u5f88\u591a\u90e8\u5206\uff0c\u5305\u62ec\uff1a</p> <p>Token Analyzer, Stop Filter, Vocabulary Scanner, Vocabulary Insertor, Memory management \u7b49\u7b49\u3002</p>"},{"location":"study/course/ads/lec3/#2-modules","title":"2 Modules","text":""},{"location":"study/course/ads/lec3/#21-word-stemming-and-stop-filter","title":"2.1 Word Stemming and Stop Filter","text":"<p>Word Stemming: \u540c\u6837\u7684\u8bcd\u4e49\uff0c\u4e0d\u540c\u8bcd\u6027\uff0c\u53ea\u4fdd\u7559\u8bcd\u6839\u90e8\u5206\u3002</p> <p>Stop Words: \u67d0\u4e9b\u592a\u5e38\u89c1\u7684\u8bcd\uff08a\uff0cis\uff09\u7b49\uff0c\u4e0d\u5c06\u5176\u4f5c\u4e3a\u5173\u952e\u5b57\u3002</p>"},{"location":"study/course/ads/lec3/#22-accessing-the-terms","title":"2.2 Accessing the Terms","text":"<p>\u5982\u4f55\u8bbf\u95ee\u5173\u952e\u5b57\u5462\uff1f</p> <p>Solution 1: \u641c\u7d22\u6811\uff08B-\u6811\uff0cB+\u6811\u7b49\u7b49\uff09</p> <p>Solution 2: Hashing</p> <p>\u54c8\u5e0c\u76f8\u5bf9\u4e8e\u641c\u7d22\u6811\u7684\u4f18\u7f3a\u70b9\uff1a</p> <ul> <li>\u4f18\u70b9\u662f\u8bbf\u95ee\u5355\u4e2a\u5173\u952e\u8bcd\u4f1a\u66f4\u5feb\uff08\\(O(1)\\)\uff09</li> <li>\u7f3a\u70b9\u662f\u8bbf\u95ee\u8fde\u7eed\u7684\u5173\u952e\u8bcd\u5e8f\u5217\u901a\u5e38\u505a\u4e0d\u5230\uff08range searches are expensive\uff09</li> </ul>"},{"location":"study/course/ads/lec3/#23-memory-management","title":"2.3 Memory Management","text":"<p>\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\uff1fmemory-&gt;hard disk.</p> <p></p>"},{"location":"study/course/ads/lec3/#3-topics","title":"3 Topics","text":""},{"location":"study/course/ads/lec3/#31-distributed-indexing","title":"3.1 Distributed Indexing","text":"<p>Each node contains index of a subset of collection.</p> <p></p> <p>\u4e00\u822c\u5730\u6211\u4eec\u91c7\u7528\u4e0a\u8ff0\u4e24\u79cd\u65b9\u5f0f\u7684\u7ed3\u5408\u3002</p>"},{"location":"study/course/ads/lec3/#32-dynamic-indexing","title":"3.2 Dynamic Indexing","text":"<p>\u5982\u56fe\u6240\u793a\uff0c\u4e00\u822c\u91c7\u7528\u4e00\u4e2a\u4e3b\u7d22\u5f15\u4ee5\u53ca\u4e00\u4e2a\u9644\u52a0\u7d22\u5f15\uff0c\u65b0\u6587\u6863\u52a0\u5165\u5148\u5f52\u5230\u9644\u52a0\u7d22\u5f15\u4e2d\uff0c\u9700\u8981\u8bbf\u95ee\u7684\u65f6\u5019\u5728\u4e24\u4e2a\u7d22\u5f15\u4e2d\u4e00\u8d77\u641c\u7d22\u5173\u952e\u8bcd\u3002\u9700\u8981\u6ce8\u610f\u4e24\u4e2a\u95ee\u9898\uff1a\u4f55\u65f6\u8fdb\u884c\u5f52\u5e76\uff08re-index\uff09\uff0c\u4ee5\u53ca\u5982\u4f55\u5220\u9664\u6587\u6863\u3002</p>"},{"location":"study/course/ads/lec3/#33-compression","title":"3.3 Compression","text":"<p>\u5b58\u50a8\u8bb8\u591a\u6570\u636e\uff0c\u5982\u4f55\u6700\u5927\u9650\u5ea6\u5229\u7528\u7a7a\u95f4\uff1f</p> <p></p> <p>\u9996\u5148\u5de6\u4e0a\u89d2\u662f\u5bf9\u5173\u952e\u8bcd\u7684\u538b\u7f29\u3002\u5148\u79fb\u9664 Stop words\uff0c \u7136\u540e\u5c06\u8bcd\u4f1a\u548c\u5728\u4e00\u8d77\u3002\u7136\u540e\u518d\u5f00\u4e00\u4e2a\u7a7a\u95f4\u5b58\u50a8\u4e0d\u540c\u5355\u8bcd\u4e4b\u95f4\u7684\u9694\u65ad\u4fe1\u606f\u3002</p> <p>\u53f3\u4e0b\u89d2\u662f\u5bf9\u4e8e Posting List \u7684\u538b\u7f29\uff0c\u5047\u8bbe computer \u5b58\u5728\u4e8e\u7b2c 2, 15, 47, ..., 58879, 58890 \u4e2a\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u8bb0\u5f55\u6bcf\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u8fd9\u6837\u5c31\u80fd\u907f\u514d\u4e00\u4e9b\u5927\u6570\u636e\u7684\u5b58\u50a8\u95ee\u9898\u3002</p>"},{"location":"study/course/ads/lec3/#34-thresholding","title":"3.4 Thresholding","text":"<p>\u7ed9\u67d0\u4e9b\u64cd\u4f5c\u8bbe\u5b9a\u9608\u503c\u3002</p> <ul> <li>Document: \u5bf9\u6587\u6863\u8fdb\u884c\u6743\u91cd\u6392\u5e8f\uff0c\u53ea\u8fd4\u56de\u524d \\(x\\) \u4e2a\u7ed3\u679c\uff1b</li> </ul> <p>\u7f3a\u70b9\uff1a\u5bf9 Boolean \u7c7b\u578b\u641c\u7d22\uff08AND\uff0cOR\u7b49\uff09\u4e0d\u53cb\u597d\uff1b\u53ef\u80fd\u7531\u4e8e\u622a\u65ad\u800c\u9020\u6210\u4e00\u4e9b\u76f8\u5173\u6587\u6863\u7684\u7f3a\u5931</p> <ul> <li>Query: \u6309\u7167\u8bcd\u9891\u589e\u5e8f\u6392\u5217\u5173\u952e\u8bcd\uff1b\u4ec5\u6839\u636e\u90e8\u5206\u5173\u952e\u8bcd\u7684\u6bd4\u4f8b\uff08\u9608\u503c\uff09\u8fdb\u884c\u641c\u7d22</li> </ul> <p></p> <p>Up to you.</p>"},{"location":"study/course/ads/lec3/#4-measures","title":"4 Measures","text":""},{"location":"study/course/ads/lec3/#41-measure-the-search-engines","title":"4.1 Measure the Search Engines","text":"<p>\u5982\u4f55\u8861\u91cf\u641c\u7d22\u5f15\u64ce\u7684\u597d\u574f\uff1f</p> <ul> <li> <p>How fast does it index?</p> <ul> <li>Number of documents / hour</li> </ul> </li> <li> <p>How fast does it search?     -Latency as a function of index size</p> </li> <li> <p>Expressiveness of query language</p> <ul> <li>Ability to express complex information needs</li> <li>Speed on complex queries</li> </ul> </li> <li> <p>User happiness?</p> <ul> <li>Data Retrieval Performance Evaluation (after establishing correctness)\uff0c\u4fa7\u91cd\u80fd\u641c\u7d22\u5230\u7684\u6570\u636e\u8303\u56f4\u548c\u901f\u5ea6<ul> <li>Response time</li> <li>Index space</li> </ul> </li> <li>Information Retrieval Performance Evaluation\uff0c\u4fa7\u91cd\u76f8\u5173\u6027<ul> <li>How relevant is the answer set?</li> </ul> </li> </ul> </li> </ul>"},{"location":"study/course/ads/lec3/#42-measure-the-relevancy","title":"4.2 Measure the Relevancy","text":"<p>\u5982\u4f55\u8bc4\u4f30\u76f8\u5173\u6027\uff1f\u9700\u8981\u6807\u51c6\u6d4b\u8bd5\u96c6\u4ee5\u53ca\u8bc4\u4f30\u6807\u51c6\u3002</p> <ol> <li>A benchmark document collection</li> <li>A benchmark suite of queries</li> <li>A binary assessment of either Relevant or Irrelevant for each query-doc pair.</li> </ol> <p></p> <p>\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5: Precision \u548c Recall.</p> <ul> <li>Precision: \u641c\u5230\u7684\u76f8\u5173\u6587\u6863\u5360\u641c\u7d22\u5230\u7684\u6587\u6863\u7684\u6bd4\u4f8b\u3002</li> <li>Recall: \u641c\u5230\u7684\u76f8\u5173\u6587\u6863\u5360\u603b\u7684\u76f8\u5173\u6587\u6863\u7684\u6bd4\u4f8b\u3002</li> </ul> <p></p>"},{"location":"study/course/ads/lec4/","title":"Lecture 4: Leftist Heaps and Skew Heaps","text":"<p>\u5de6\u5f0f\u5806\u4e0e\u659c\u5806\u3002</p>"},{"location":"study/course/ads/lec4/#1-leftist-heap-definition","title":"1 Leftist Heap: Definition","text":"<p>\u5728\u57fa\u7840\u8bfe\u7a0b\u4e2d\u5df2\u7ecf\u5b66\u4e60\u4e86\u5229\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u6765\u5b9e\u73b0\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff08\u5806\uff09\uff0c\u4f46\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u5e76\u4e0d\u662f\u5b9e\u73b0\u5806\u7684\u552f\u4e00\u65b9\u6cd5\u3002</p> <p>\u4f7f\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u6765\u5b9e\u73b0\u4e00\u4e2a\u5806\uff0c\u5728\u63d2\u5165\u3001\u5220\u9664\u4e0e\u67e5\u627e\u64cd\u4f5c\u4e2d\u80fd\u5f97\u5230\u5f88\u597d\u7684\u6548\u7387 \\(O(logN)\\)\uff0c\u4f46\u662f\u6709\u65f6\u5019\u6211\u4eec\u8fd8\u9700\u8981\u7b2c\u56db\u79cd\u64cd\u4f5c\uff0c\u5373\u5408\u5e76\uff08merging\uff09\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5de6\u5f0f\u5806\u6765\u8bf4\uff1a</p> <ul> <li>Target: Speed merging up to \\(O(N)\\).</li> </ul> <p>\u4f7f\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u7c7b\u578b\u7684\u5806\u5408\u5e76</p> <p>\u200b\u6700\u5feb\u53ef\u4ee5\u5230 \\(\\Theta(N)\\)\u3002\u6211\u4eec\u5c06\u4e24\u4e2a\u5806\u7684\u6570\u7ec4\u590d\u5236\u4e0b\u6765\u8c03\u7528 BuildHeap \u64cd\u4f5c\u5373\u53ef\u3002\u95ee\u9898\u662f\uff1a\u5b83\u662f \\(\\Theta(N)\\) \u800c\u4e0d\u662f \\(O(N)\\)\uff0c\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u4e00\u4e2a\u66f4\u5feb\u7684\u65b9\u6cd5\u3002\u5982\u679c\u4f7f\u7528\u6307\u9488\u6765\u5b58\u50a8\u5806\uff0c\u5c06\u4f1a\u62d6\u6162\u6bcf\u4e00\u6b65\u7684\u65f6\u95f4\u3002\u5982\u4f55\u62b5\u6d88\u8fd9\u4e9b\u65f6\u95f4\u5462\uff1f\u7b54\u6848\u662f\u5de6\u5f0f\u5806\u3002</p> <ul> <li>Order Property: The same.</li> <li>Structure Property: Binary trees, but unbalanced.</li> </ul> <p>Null Path Length \u7684\u5b9a\u4e49</p> <p>The null path length, Npl(X) of any node X is the length of the shortest path from X to a node without two children. Define Npl(NULL) = -1.</p> <p>\u6ce8\u610f\u8fd9\u91cc\u6709 Npl(X) = min { Npl(C) +1 for all C as Children of X }.</p> <p>\u5de6\u5f0f\u5806\u7684\u5b9a\u4e49\u5373\u4e3a\uff1aFor every node X in the heap, the Npl of the left child is at least as large as that of the right child.</p> <p>\u4f8b\u5982\uff1a</p> <p></p> <p>\u53ef\u4ee5\u770b\u51fa\u5de6\u5f0f\u5806\u6709\u5411\u5de6\u503e\u659c\u7684\u503e\u5411\u3002</p> <p>\u5b9a\u7406</p> <p>A leftist tree with \\(r\\) nodes on the right path must have at least \\(2^r-1\\) nodes.</p> <p>\u8fd9\u4e2a\u5b9a\u7406\u544a\u8bc9\u6211\u4eec\uff0c\u4e00\u4e2a\u5305\u542b \\(N\\) \u4e2a\u7ed3\u70b9\u7684\u5de6\u5f0f\u5806\u5728\u6839\u8282\u70b9\u7684\u53f3\u8def\u5f84\u6700\u591a\u6709 \\(\\lfloor log(N+1) \\rfloor\\) \u4e2a\u7ed3\u70b9\uff0c\u4e5f\u5373\u53f3\u8def\u5f84\u957f\u5ea6\u4e3a \\(O(logN)\\)\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u64cd\u4f5c\u90fd\u653e\u5230\u53f3\u5b50\u6811\u6765\u505a\u3002</p>"},{"location":"study/course/ads/lec4/#2-leftist-heap-operations","title":"2 Leftist Heap: Operations","text":"<p>\u7ed3\u6784\u5b9a\u4e49\uff1a</p> C<pre><code>struct TreeNode{\n    ElementType Element;\n    Heap Left;\n    Heap Right;\n    int Npl;\n}\n</code></pre> <p>\u7531\u4e8e\u63d2\u5165\u53ef\u4ee5\u770b\u4f5c\u662f\u5408\u5e76\u7684\u7279\u4f8b\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u5408\u5e76\u7684\u64cd\u4f5c\uff1a</p>"},{"location":"study/course/ads/lec4/#21-merge-recursive-version","title":"2.1 Merge (recursive version)","text":"<p>\u9996\u5148\u6bd4\u8f83\u6839\u8282\u70b9\uff0c\u4fdd\u7559\u9700\u8981\u4f5c\u4e3a\u6839\u7684\u90a3\u4e2a\u8282\u70b9\uff08\u8fd9\u91cc\u662f 3\uff09\uff0c\u7136\u540e\u5c06\u53e6\u4e00\u4e2a\u5806\u4e0e\u4fdd\u7559\u8282\u70b9\u7684\u53f3\u5b50\u6811\u8fdb\u884c\u9012\u5f52\u5408\u5e76\uff0c\u7136\u540e\u5408\u5e76\u5b8c\u6210\u4e4b\u540e Attach \u4e0a\u53bb\u5373\u53ef\u3002\u6700\u540e\u9700\u8981\u770b\u4e00\u4e0b\u7ed3\u679c\u7684\u6811\uff0c\u5982\u679c\u4e0d\u662f\u5de6\u5f0f\u5806\u5219\u9700\u8981\u6839\u8282\u70b9\u5de6\u53f3\u513f\u5b50\u4ea4\u6362\u3002</p> <p>\u4e0a\u4ee3\u7801\uff1a</p> C<pre><code>PriorityQueue  Merge ( PriorityQueue H1, PriorityQueue H2 )\n{ \n    if ( H1 == NULL )   return H2;  \n    if ( H2 == NULL )   return H1;  \n    if ( H1-&gt;Element &lt; H2-&gt;Element )  return Merge1( H1, H2 );\n    else return Merge1( H2, H1 );\n}\n\nstatic PriorityQueue\nMerge1( PriorityQueue H1, PriorityQueue H2 )\n{ \n    if ( H1-&gt;Left == NULL )     /* single node */\n        H1-&gt;Left = H2;  /* H1-&gt;Right is already NULL \n                    and H1-&gt;Npl is already 0 */\n    else {\n        H1-&gt;Right = Merge( H1-&gt;Right, H2 );     /* Step 1 &amp; 2 */\n        if ( H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl )\n            SwapChildren( H1 ); /* Step 3 */\n        H1-&gt;Npl = H1-&gt;Right-&gt;Npl + 1;\n    } /* end else */\n    return H1;\n}\n</code></pre> <p>\\(T_p = O(logN)\\).</p>"},{"location":"study/course/ads/lec4/#22-merge-iterative-version","title":"2.2 Merge (iterative version)","text":"<p>\u5148\u5bf9\u4e24\u4e2a\u5806\u7684\u53f3\u8def\u5f84\u505a\u7c7b\u4f3c\u5f52\u5e76\u6392\u5e8f\u7684 Merge \u64cd\u4f5c\uff0c\u7136\u540e\u68c0\u67e5\u9700\u8981\u66f4\u6362\u5de6\u53f3\u513f\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\u5e76\u8fdb\u884c\u66f4\u6362\u3002\u8fd9\u4e2a\u548c\u524d\u9762\u7684\u9012\u5f52\u7248\u672c\u662f\u5bf9\u7b49\u7684\u3002</p>"},{"location":"study/course/ads/lec4/#23-deletemin","title":"2.3 DeleteMin","text":"<p>\u5982\u4e0a\u56fe\u3002\u5220\u9664\u6839\u7ed3\u70b9\u4e4b\u540e\u5408\u5e76\u5373\u53ef\u3002\\(O(logN)\\).</p>"},{"location":"study/course/ads/lec4/#3-skew-heap-definition","title":"3 Skew Heap: Definition","text":"<p>\u5b83\u4e0e\u5de6\u5f0f\u5806\u7684\u5173\u7cfb\u5c31\u597d\u6bd4\u4f38\u5c55\u6811\u4e0e AVL \u6811\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u662f\u4e00\u79cd\u7b80\u5316\u7248\u7684\u5de6\u5f0f\u5806\u3002\u4e0d\u5173\u6ce8NPL\u3002</p> <ul> <li>Target: Any \\(M\\) consecutive operations take at most \\(O(MlogN)\\) time.</li> </ul> <p>\u505a\u6cd5\uff1f</p> <p>Always swap the left and right children excpet that the largest of all the nodes on the right paths does not have its children swapped. NO NPL.</p> <p></p> <p>\u4e0e\u5de6\u5f0f\u5806\u7c7b\u4f3c\uff0c\u9700\u8981\u65f6\u523b\u5728\u53f3\u8def\u5f84\u4e0a\u505a merge\u3002\u4f46\u662f\u6bcf attach \u4e00\u6b21\u4e4b\u524d\u90fd\u4ea4\u6362\u4e00\u6b21\u5de6\u53f3\u513f\u5b50\u3002</p> <p>\u4e24\u70b9\u89e3\u91ca</p> <ol> <li>\u659c\u5806\u7684\u597d\u5904\u662f\u4e0d\u9700\u8981\u4f7f\u7528\u8bb0\u5f55 npl \u7684\u989d\u5916\u7a7a\u95f4\uff0c\u800c\u4e14\u65e0\u9700 if-else \u5224\u65ad\uff1b</li> <li>\u5bf9\u4e8e\u659c\u5806\u548c\u5de6\u5f0f\u5806\uff0c\u6211\u4eec\u90fd\u4e0d\u77e5\u9053\u7cbe\u786e\u7684\u53f3\u8def\u5f84\u957f\u5ea6\u3002</li> </ol>"},{"location":"study/course/ads/lec4/#4-skew-heap-analysis","title":"4 Skew Heap: Analysis","text":"<p>\u8bc1\u660e\uff1a\u659c\u5806\u7684\u644a\u8fd8\u65f6\u95f4\u64cd\u4f5c\u4e3a \\(O(logN)\\).</p> <p>Heavy node \u7684\u5b9a\u4e49</p> <p>A node \\(p\\) is heavy if the number of the descendants of \\(p\\)'s right subtree is at least half of the number of descendants of \\(p\\), and light otherwise. Note the descendants of \\(p\\) includes \\(p\\) itself.</p> <p>\u4e5f\u5c31\u662f\u8bf4\u67d0\u4e2a\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7ed3\u70b9\u603b\u6570\u81f3\u5c11\u662f\u8be5\u7ed3\u70b9\u6240\u6709\u540e\u4ee3\uff08\u52a0\u4e0a\u5b83\u81ea\u5df1\uff09\u6570\u91cf\u7684\u4e00\u534a\uff0c\u5c31\u53eb heavy node\u3002</p> <p>\u8fd9\u91cc\u7684\u52bf\u80fd\u51fd\u6570\u5c31\u53d6\u4f5c \\(\\Phi(D_i) = \\mathrm{number\\ of\\ heavy\\ nodes}\\).</p> <p></p> <p>\u6ce8\u610f\u89c2\u5bdf\u5230\u5408\u5e76\u524d\u53f3\u8def\u5f84\u4e0a\u7684 heavy node \u5c06\u5168\u90e8\u53d8\u4e3a light node\uff0c\u800c\u90e8\u5206 light node \u5c06\u4f1a\u53d8\u4e3a heavy node\uff0c\u8fd9\u91cc\u53d6\u6700\u574f\u60c5\u51b5\u3002\u6700\u7ec8\u5f97\u5230\u644a\u8fd8\u65f6\u95f4\u4e3a \\(O(logN)\\)\u3002</p>"},{"location":"study/course/ads/lec5/","title":"Lecture 5: Binomial Queue","text":"<p>\u4e8c\u9879\u5806\u3002</p>"},{"location":"study/course/ads/lec5/#1-definition","title":"1 Definition","text":"<p>A binomial queue is not a heap-ordered tree, but rather a collection of heap-ordered trees, known as a forest. Each heap-ordered tree is a binomial tree.</p> <p>\u4e8c\u9879\u5806\u662f\u4e00\u7fa4\u4e8c\u53c9\u5806\u6784\u6210\u7684\u68ee\u6797\u3002\u6bcf\u4e00\u4e2a\u4e8c\u53c9\u6811\u6709\u56fa\u5b9a\u7684\u5f62\u72b6\u3002</p> <p>\u4e00\u4e2a\u5355\u4f4d\u53eb Binomial Tree\uff0c\u4e00\u4e2a\u8282\u70b9\u7684 Binomial Tree \u7684\u9ad8\u5ea6\u4e3a 0\uff0c\u8bb0\u4f5c \\(B_0\\)\u3002\\(B_k\\) \u4e3a\u9ad8\u5ea6\u662f \\(k\\) \u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u4e24\u4e2a \\(B_{k-1}\\) \u7684\u6811\u8fde\u63a5\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\uff0c\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u6ce8\u610f</p> <p>\\(B_k\\) consists of a root with \\(k\\) children, which are \\(B_0\\), \\(B_1\\), ..., \\(B_{k-1}\\). \\(B_k\\) has exactly \\(2^k\\) nodes. The number of nodes at depth \\(d\\) is \\(C_k^d\\).</p> <p>\u4e8c\u9879\u5806\u7684\u540d\u5b57\u7531\u6b64\u800c\u6765\u3002\u6ce8\u610f\u5230\uff0c\u6bcf\u4e00\u4e2a\u5341\u8fdb\u5236\u6b63\u6574\u6570\u90fd\u6709\u552f\u4e00\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\uff0c\u6240\u4ee5\u67d0\u4e00\u79cd\u8282\u70b9\u6570\u91cf\u7684\u4e8c\u9879\u5806\u662f\u786e\u5b9a\u7684\u3002</p> <p></p>"},{"location":"study/course/ads/lec5/#2-operation","title":"2 Operation","text":"<ul> <li>FindMin: \u626b\u63cf\u6240\u6709\u7684\u6811\u6839\u3002\\(T_p=O(logN)\\).</li> <li>Merge: \u548c\u4e8c\u8fdb\u5236\u52a0\u6cd5\u7c7b\u4f3c\u3002   </li> </ul> <p>\u6ce8\u610f attach \u7684\u65f6\u5019\u628a\u5927\u7684\u63a5\u5230\u5c0f\u7684\u4e0a\u9762\u4ee5\u7ef4\u6301\u6700\u5c0f\u5806\u7279\u6027\u3002\u800c\u4e14\u8981\u628a\u68ee\u6797\u91cc\u7684\u6811\u6309\u7167\u9ad8\u5ea6\u9006\u5e8f\u6392\u5e8f\u3002 * Insert: \u662f\u5408\u5e76\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\u4e0d\u591a\u8bf4\u3002</p> <p>\u7a7a\u4e8c\u9879\u5806\u63d2\u5165</p> <p>If the smallest nonexistent binomial tree is \\(B_i\\), then \\(T_p=Const*(i+1)\\).</p> <p>\u5728\u7a7a\u4e8c\u9879\u5806\u91cc\u9762\u63d2\u5165 \\(N\\) \u4e2a\u5143\u7d20\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N)\\)\uff0c\u5e73\u5747\u7684\u5355\u6b65\u7528\u65f6\u662f\u5e38\u6570\u3002</p> <ul> <li>DeleteMin: \u89c1\u4e0b\u56fe\u3002   </li> </ul>"},{"location":"study/course/ads/lec5/#3-implementations","title":"3 Implementations","text":"<p>\u5b9e\u73b0\u65b9\u5f0f\u662f\u6784\u5efa\u4e8c\u53c9\u6811\u6784\u6210\u7684\u6570\u7ec4\u3002</p> <p>\u7531\u4e8e\u9700\u8981\u5feb\u901f\u627e\u5230\u5b50\u6811\uff0c\u8fd9\u91cc\u4f7f\u7528 First Child Next Sibling \u7684\u94fe\u8868\u5b58\u50a8\u65b9\u5f0f\u3002</p> C<pre><code>typedef struct BinNode *Position;\ntypedef struct Collection *BinQueue;\ntypedef struct BinNode *BinTree;  /* missing from p.176 */\n\nstruct BinNode \n{ \n    ElementType     Element;\n    Position        LeftChild;\n    Position        NextSibling;\n} ;\n\nstruct Collection \n{ \n    int         CurrentSize;  /* total number of nodes */\n    BinTree TheTrees[ MaxTrees ];\n} ;\n\nBinTree CombineTrees( BinTree T1, BinTree T2 )\n{  /* merge equal-sized T1 and T2 */\n    if ( T1-&gt;Element &gt; T2-&gt;Element )\n        /* attach the larger one to the smaller one */\n        return CombineTrees( T2, T1 );\n    /* insert T2 to the front of the children list of T1 */\n    T2-&gt;NextSibling = T1-&gt;LeftChild;\n    T1-&gt;LeftChild = T2;\n    return T1;\n}// combine \u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\n\nBinQueue  Merge( BinQueue H1, BinQueue H2 )\n{   \n    BinTree T1, T2, Carry = NULL;   \n    int i, j;\n    if ( H1-&gt;CurrentSize + H2-&gt; CurrentSize &gt; Capacity )  ErrorMessage();\n    H1-&gt;CurrentSize += H2-&gt; CurrentSize;\n    for ( i=0, j=1; j&lt;= H1-&gt;CurrentSize; i++, j*=2 ) {\n        T1 = H1-&gt;TheTrees[i]; T2 = H2-&gt;TheTrees[i]; /*current trees */\n        switch( 4*!!Carry + 2*!!T2 + !!T1 ) { \n        case 0: /* 000 */ ;\n        case 1: /* 001 */  break;   \n        case 2: /* 010 */  H1-&gt;TheTrees[i] = T2; H2-&gt;TheTrees[i] = NULL; break;\n        case 4: /* 100 */  H1-&gt;TheTrees[i] = Carry; Carry = NULL; break;\n        case 3: /* 011 */  Carry = CombineTrees( T1, T2 );\n                        H1-&gt;TheTrees[i] = H2-&gt;TheTrees[i] = NULL; break;\n        case 5: /* 101 */  Carry = CombineTrees( T1, Carry );\n                        H1-&gt;TheTrees[i] = NULL; break;\n        case 6: /* 110 */  Carry = CombineTrees( T2, Carry );\n                        H2-&gt;TheTrees[i] = NULL; break;\n        case 7: /* 111 */  H1-&gt;TheTrees[i] = Carry; \n                        Carry = CombineTrees( T1, T2 ); \n                        H2-&gt;TheTrees[i] = NULL; break;\n        } /* end switch */\n    } /* end for-loop */\n    return H1;\n}\n\nElementType  DeleteMin( BinQueue H )\n{   \n    BinQueue DeletedQueue; \n    Position DeletedTree, OldRoot;\n    ElementType MinItem = Infinity;  /* the minimum item to be returned */  \n    int i, j, MinTree; /* MinTree is the index of the tree with the minimum item */\n\n    if ( IsEmpty( H ) )  {  PrintErrorMessage();  return \u2013Infinity; }\n\n    for ( i = 0; i &lt; MaxTrees; i++) {  /* Step 1: find the minimum item */\n        if( H-&gt;TheTrees[i] &amp;&amp; H-&gt;TheTrees[i]-&gt;Element &lt; MinItem ) { \n        MinItem = H-&gt;TheTrees[i]-&gt;Element;  MinTree = i;    } /* end if */\n    } /* end for-i-loop */\n    DeletedTree = H-&gt;TheTrees[ MinTree ];  \n    H-&gt;TheTrees[ MinTree ] = NULL;   /* Step 2: remove the MinTree from H =&gt; H\u2019 */ \n    OldRoot = DeletedTree;   /* Step 3.1: remove the root */ \n    DeletedTree = DeletedTree-&gt;LeftChild;   free(OldRoot);\n    DeletedQueue = Initialize();   /* Step 3.2: create H\u201d */ \n    DeletedQueue-&gt;CurrentSize = ( 1&lt;&lt;MinTree ) \u2013 1;  /* 2MinTree \u2013 1 */\n    for ( j = MinTree \u2013 1; j &gt;= 0; j \u2013 \u2013 ) {  \n        DeletedQueue-&gt;TheTrees[j] = DeletedTree;\n        DeletedTree = DeletedTree-&gt;NextSibling;\n        DeletedQueue-&gt;TheTrees[j]-&gt;NextSibling = NULL;\n    } /* end for-j-loop */\n    H-&gt;CurrentSize  \u2013 = DeletedQueue-&gt;CurrentSize + 1;\n    H = Merge( H, DeletedQueue ); /* Step 4: merge H\u2019 and H\u201d */ \n    return MinItem;\n}\n</code></pre>"},{"location":"study/course/ads/lec5/#4-analysis","title":"4 Analysis","text":"<p>A binomial queue of \\(N\\) elements can be built by \\(N\\) successive insertions in \\(O(N)\\).</p> <p></p> <p></p>"},{"location":"study/course/ads/lec6/","title":"Lecture 6: Backtracking","text":"<p>\u56de\u6eaf\u7b97\u6cd5\u3002</p>"},{"location":"study/course/ads/lec6/#1-introduction","title":"1 Introduction","text":"<p>\u56de\u6eaf\u7b97\u6cd5\u7684\u76ee\u7684\uff0c\u6216\u8005\u8bf4\u6765\u6e90\uff1f</p> <p>\u5bf9\u4e8e\u4e00\u822c\u7684\u95ee\u9898\u6211\u4eec\u53ef\u80fd\u60f3\u5230\u7684\u662f\u66b4\u529b\u679a\u4e3e\u3002\u8fd9\u5728\u7ed3\u679c\u4e3a\u6709\u9650\u96c6\u7684\u65f6\u5019\u786e\u5b9e\u662f\u80fd\u591f\u4fdd\u8bc1\u5f97\u5230\u6b63\u786e\u7b54\u6848\u7684\uff0c\u4f46\u662f\u5176\u901f\u5ea6\u8f83\u6162\uff0c\u800c\u4e14\u5728\u7ed3\u679c\u4e3a\u65e0\u9650\u96c6\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u95ee\u9898\u3002</p> <p>\u56de\u6eaf\u7b97\u6cd5\u80fd\u591f\u8ba9\u6211\u4eec\u4ece\u5927\u7684\u89e3\u96c6\u4e2d\u8fdb\u884c\u526a\u679d\uff08pruning\uff09\uff0c\u800c\u4f9d\u7136\u4fdd\u8bc1\u6211\u4eec\u80fd\u591f\u5f97\u5230\u6b63\u786e\u7684\u7b54\u6848\u3002\u8fd9\u79cd\u65b9\u6cd5\u80fd\u591f\u8ba9\u6211\u4eec\u5728\u6bd4\u8f83\u65e9\u7684\u65f6\u5019\u5c31\u77e5\u9053\u67d0\u4e00\u4e2a\u533a\u57df\u7684\u89e3\u96c6\u662f\u4e0d\u4f1a\u6b63\u786e\u7684\uff0c\u4ece\u800c\u4e0d\u8bbf\u95ee\u90a3\u4e9b\u7b54\u6848\u3002</p> <p>\u5176\u57fa\u672c\u601d\u60f3\u662f\u5728\u4e00\u4e2a\u90e8\u5206\u6b63\u786e\u7684\u89e3\u96c6 \\((x_1, x_2, ..., x_i)\\) \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684 \\(x_{i+1}\\)\uff0c\u7136\u540e\u770b\u662f\u5426\u6b63\u786e\u3002\u5982\u679c\u6b63\u786e\u7684\u8bdd\u5c31\u7ee7\u7eed\uff0c\u5982\u679c\u4e0d\u6b63\u786e\u5c31\u628a \\(x_{i}\\) \u5220\u6389\uff0c\u4e5f\u5c31\u662f\u56de\u9000\u5230\u4e0a\u4e00\u4e2a\u89e3  \\((x_1, x_2, ..., x_{i-1})\\)\u3002</p>"},{"location":"study/course/ads/lec6/#2-example-eight-queens","title":"2 Example: Eight Queens","text":"<p>\u57fa\u672c\u95ee\u9898\u5c31\u662f\u5728 8*8 \u7684\u68cb\u76d8\u4e2d\u653e\u7f6e\u516b\u4e2a\u68cb\u5b50\uff0c\u8981\u6c42\u4e24\u4e24\u4e4b\u95f4\u6ee1\u8db3\uff1a\u4e0d\u5728\u540c\u4e00\u884c\u3001\u4e0d\u5728\u540c\u4e00\u5217\u800c\u4e14\u4e0d\u5728\u540c\u4e00\u5bf9\u89d2\u7ebf\u3002</p> <p>\u5728\u8fd9\u4e00\u79cd\u95ee\u9898\u91cc\u9762\u6211\u4eec\u5982\u4f55\u4f7f\u7528\u56de\u6eaf\u7b97\u6cd5\uff1f\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u6784\u5efa Game Tree\u3002\u8fd9\u4e2a\u6e38\u620f\u6811\u4e2d\u6bcf\u4e00\u6761\u4ece\u6839\u8282\u70b9\u9053\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u5c31\u662f\u4e00\u4e2a\u89e3\u3002</li> <li>\u5bf9\u8fd9\u4e2a\u6811\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\uff0c\u9047\u5230\u8fdd\u53cd\u6e38\u620f\u89c4\u5219\u7684\u7ed3\u70b9\u5c31\u8fdb\u884c\u526a\u679d\uff0c\u7136\u540e undo\u3002</li> </ol> <p>\u6ce8\u610f\u5728\u5b9e\u9645\u7684\u7a0b\u5e8f\u7f16\u5199\u4e2d\u6ca1\u6709\u5b9e\u9645\u6784\u5efa\u6811\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\u3002\u8981\u4e0d\u7136\u7684\u8bdd\u8ddf\u66b4\u529b\u679a\u4e3e\u5c31\u6ca1\u533a\u522b\u4e86\u3002</p>"},{"location":"study/course/ads/lec6/#3-example-the-turnpike-reconstruction-problem","title":"3 Example: The Turnpike Reconstruction Problem","text":"<p>\u95ee\u9898\uff1aGiven \\(N\\) points on the \\(x\\)-axis with coordinates \\(x_1&lt;x_2&lt;...&lt;x_N\\). Assume that \\(x_1=0\\). There are \\(N(N-1)/2\\) distances between every pair of points.</p> <p>Now given those \\(N(N-1)/2\\) distances and reconstruct a point set from the distances.</p> <p>\u7ed9\u51fa\u76f8\u5bf9\u8ddd\u79bb\uff0c\u6c42\u5750\u6807\u96c6\u5408\u3002</p> <p>\u4e00\u4e2a\u56de\u6eaf\u7b97\u6cd5\u7684\u6a21\u677f\uff1a C++<pre><code>bool backtracking(int i)\n{\n    found = false;\n    if(i&gt;n) return true;\n\n    for(each x_i in S_i)\n    {\n        OK = check((x_1,...,x_i),R);\n        if(OK)\n        {\n            count x_i in;\n            found = backtracking(i+1);\n            if(!found) undo(i);\n        }\n        if(found) break;\n    }\n\n    return found;\n}\n</code></pre></p> <p>\u5173\u4e8e\u641c\u7d22\u6811\u7684\u9009\u62e9\uff1a</p> <p></p> <p>\u6211\u4eec\u4e00\u822c\u9009\u62e9\u66f4\u5c0f\u89c4\u6a21\u7684\u6811\uff0c\u8fd9\u6837\u526a\u679d\u7684\u65f6\u5019\u80fd\u591f\u526a\u66f4\u591a\u3002</p>"},{"location":"study/course/ads/lec6/#4-example-game-of-tic-tac-toe","title":"4 Example: Game of Tic-tac-toe","text":"<p>\u5bf9\u4e8e\u4e94\u5b50\u68cb\u6e38\u620f\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u6784\u5efa\u6e38\u620f\u6811\u3002\u5728\u8ba1\u7b97\u673a\u8fdb\u884c\u51b3\u7b56\u7684\u65f6\u5019\u4f7f\u7528\u66b4\u529b\u679a\u4e3e\u6cd5\u592a\u8fc7\u4e8e\u8017\u65f6\uff0c\u4e8e\u662f\u4fbf\u6709\u4ee5\u4e0b\u76f8\u5173\u6280\u672f\uff1a</p> <ol> <li> <p>Minimax    \u4e3a\u6bcf\u4e00\u4e2a\u72b6\u6001\u8d4b\u4e00\u4e2a \"Goodness\" \u503c\uff0c\u4f8b\u5982\uff1a    $$    f(P) = W_{Computer} - W_{Human}    $$    \u8fd9\u91cc \\(W\\) \u4ee3\u8868\u5728\u72b6\u6001 \\(P\\) \u7684\u65f6\u5019\u8d62\u5c40\u7684\u79cd\u7c7b\u6570\u3002    \u8ba1\u7b97\u673a\u51b3\u7b56\u7684\u65f6\u5019\u8ba9\u8fd9\u4e2a\u503c\u6700\u5927\uff0c\u4eba\u51b3\u7b56\u7684\u65f6\u5019\u8ba9\u8fd9\u4e2a\u503c\u6700\u5c0f\u3002</p> </li> <li> <p>Alpha-beta pruning</p> </li> </ol> <p></p> <p></p> <p>\u4e00\u76ee\u4e86\u7136\u3002</p>"},{"location":"study/course/ads/lec7/","title":"Lecture 7: Divide and Conquer","text":"<p>\u5206\u6cbb\u6cd5\u3002\u5173\u4e8e Closest Pair Problem \u67e5\u9605 PPT\u3002\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u5bf9\u4e8e\u5206\u6cbb\u6cd5\u7684\u9012\u63a8\u5f0f</p> \\[ T(N) = aT(n/b) + f(N) \\] <p>\u7684\u4e09\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5\u3002</p>"},{"location":"study/course/ads/lec7/#1-substitution-method","title":"1 Substitution Method","text":"<p>\u5148\u731c\u540e\u8bc1\u3002</p> <p>\u8fd9\u91cc\u4e3e\u4e24\u4e2a\u4f8b\u5b50\u3002</p> \u6b63\u786e\u7684\u65b9\u6cd5 <p>\u4f8b\u5982\u6211\u4eec\u6709\u9012\u63a8\u5f0f</p> \\[ T(N) = 2T(\\lfloor N/2 \\rfloor) + N \\] <p>\u5bf9\u6b64\u8fdb\u884c\u5206\u6790\u3002</p> <p>\u6211\u4eec\u731c\u6d4b \\(T(N)=O(NlogN)\\)\u3002\u8bc1\u660e\u5982\u4e0b\uff1a</p> <p>\u5728\u5047\u8bbe \\(T(N)=O(NlogN)\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4efb\u610f\u7684 \\(m&lt;N\\) \u90fd\u6210\u7acb\uff0c\u90a3\u4e48\u8fd9\u91cc\u53d6 \\(m=\\lfloor N/2 \\rfloor\\)\u3002\u5219\u5b58\u5728\u5e38\u6570 \\(c&gt;0\\)\uff0c\u4f7f\u5f97 $$ T(\\lfloor N/2 \\rfloor) \\le c \\lfloor N/2 \\rfloor log (\\lfloor N/2 \\rfloor) $$</p> <p>\u90a3\u4e48\u6839\u636e\u9898\u5e72\u7684\u9012\u63a8\u5f0f\uff0c\u53ef\u5f97\uff1a</p> \\[ \\begin{aligned} T(N) &amp;= 2T(\\lfloor N/2 \\rfloor) + N \\\\ &amp;\\le 2c \\lfloor N/2 \\rfloor log (\\lfloor N/2 \\rfloor) + N\\\\ &amp;\\le cN(logN-log2) + N\\\\ &amp;\\le cNlogN\\\\&amp;(for\\ c \\ge 1) \\end{aligned} \\] <p>\u4ece\u800c\u7b54\u6848\u6b63\u786e\u3002</p> \u9519\u8bef\u7684\u793a\u8303 <p>\u4f8b\u5982\u6211\u4eec\u8fd8\u662f\u7528\u8fd9\u4e2a\u9012\u63a8\u5f0f</p> \\[ T(N) = 2T(\\lfloor N/2 \\rfloor) + N \\] <p>\u5bf9\u6b64\u8fdb\u884c\u53e6\u4e00\u79cd\u731c\u6d4b\u3002</p> <p>\u6211\u4eec\u731c\u6d4b \\(T(N)=O(N)\\)\u3002\u8bc1\u660e\u5982\u4e0b\uff1a</p> <p>\u5728\u5047\u8bbe \\(T(N)=O(N)\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4efb\u610f\u7684 \\(m&lt;N\\) \u90fd\u6210\u7acb\uff0c\u90a3\u4e48\u8fd9\u91cc\u53d6 \\(m=\\lfloor N/2 \\rfloor\\)\u3002\u5219\u5b58\u5728\u5e38\u6570 \\(c&gt;0\\)\uff0c\u4f7f\u5f97 $$ T(\\lfloor N/2 \\rfloor) \\le c \\lfloor N/2 \\rfloor $$</p> <p>\u90a3\u4e48\u6839\u636e\u9898\u5e72\u7684\u9012\u63a8\u5f0f\uff0c\u53ef\u5f97\uff1a</p> \\[ \\begin{aligned} T(N) &amp;= 2T(\\lfloor N/2 \\rfloor) + N \\\\ &amp;\\le 2c \\lfloor N/2 \\rfloor+ N\\\\ &amp;\\le cN+ N\\\\ &amp;\\le (c+1)N = O(N)\\\\&amp;(for\\ c \\ge 1) \\end{aligned} \\] <p>\u4ece\u800c\u7b54\u6848\u6b63\u786e\u3002\u5417\uff1f</p> <p>\u9519\u8bef\uff01 \u5728\u8fd0\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u5019\u9700\u8981\u8bc1\u660e \"Exact Form\"\uff0c\u731c\u6d4b\u7684\u662f \\(T(N)\\le cN\\)\uff0c\u8bc1\u660e\u5230\u6700\u540e\u7684\u5e38\u6570\u5c31\u5e94\u8be5\u662f \\(c\\)\uff0c\u800c\u6ca1\u6709\u540e\u9762\u7684 \\(+N\\)\u3002</p>"},{"location":"study/course/ads/lec7/#2-recursion-tree-method","title":"2 Recursion-tree Method","text":"<p>\u53ef\u4ee5\u5355\u72ec\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u548c\u5148\u731c\u540e\u8bc1\u4e00\u8d77\u4f7f\u7528\u3002</p> <p></p> <p></p>"},{"location":"study/course/ads/lec7/#3-master-theorem","title":"3 Master Theorem","text":"<p>\u5c11\u5e9f\u8bdd\u3002\u76f4\u63a5\u4e0a\u56fe</p> <p></p> <p></p> <p></p> <p>\u4e09\u79cd\u4e3b\u5b9a\u7406\uff0c\u6309\u7167\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u5373\u53ef\u3002\u6ce8\u610f\u4e3b\u5b9a\u7406\u5e76\u4e0d\u80fd\u6db5\u76d6\u6240\u6709\u7684\u60c5\u51b5\uff01</p>"},{"location":"study/course/ads/lec8/","title":"Lecture 8: Dynamic Programming","text":"<p>\u52a8\u6001\u89c4\u5212\u3002</p> <p>Solve sub-problems just once and save the answers in a table.</p>"},{"location":"study/course/ads/lec8/#1-example-fibonacci-number","title":"1 Example: Fibonacci Number","text":"<p>\u4f7f\u7528\u4f20\u7edf\u7684\u9012\u5f52\u65b9\u6cd5:</p> C<pre><code>int fib(int n)\n{\n    if (n &lt;= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);\n}\n</code></pre> <p>\u5bf9\u6b64\u8fdb\u884c\u6027\u80fd\u5206\u6790\uff1a\\(T(N) \\ge T(N-1) + T(N-2)\\)\uff0c\u63a8\u5bfc\u51fa\u4e86 \\(T(N) \\ge F(N)\\)\u3002</p> <p>\u95ee\u9898\u51fa\u5728\uff0c\u6211\u4eec\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\uff0c\u91cd\u590d\u8ba1\u7b97\u4e86\u5f88\u591a\u6b21\u76f8\u540c\u7684\u5b50\u95ee\u9898\u3002\u5982\u679c\u6211\u4eec\u80fd\u5c06\u8fd9\u4e9b\u91cd\u590d\u7684\u5b50\u95ee\u9898\u7684\u89e3\u653e\u5728\u4e00\u5f20\u8868\u4e2d\uff08\u6216\u8005\u5c31\u662f\u7b80\u5355\u5730\u4fdd\u5b58\u4e0b\u6765\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002</p> C<pre><code>int fib(int n)\n{\n    int f[n + 1];\n    f[0] = 0;\n    f[1] = 1;\n    for (int i = 2; i &lt;= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    return f[n];\n}\n</code></pre> <p>\u663e\u7136\u8fd9\u79cd\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f4e\u5f88\u591a\uff0c\u4e3a \\(O(N)\\)\u3002</p>"},{"location":"study/course/ads/lec8/#2-example-ordering-matrix-multiplication","title":"2 Example: Ordering Matrix Multiplication","text":"<p>\u8981\u627e\u5230\u4e00\u79cd\u4f7f\u5f97\u5f00\u9500\u6700\u5c0f\u7684\u4e58\u6cd5\u987a\u5e8f\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u79cd\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u3002\u8ba1\u7b97\u4efb\u610f\u4e00\u4e2a\u77e9\u9635\u94fe\u7684\u6700\u5c0f\u4e58\u6cd5\u6b21\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5206\u89e3\u4e3a\u4e24\u4e2a\u5b50\u94fe\u7684\u6700\u5c0f\u4e58\u6cd5\u6b21\u6570\uff0c\u4f46\u662f\u8fd9\u4e2a\u5206\u89e3\u65b9\u5f0f\u5c31\u6709\u5f88\u591a\u79cd\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u6700\u4f18\u7684\u90a3\u79cd\u3002</p> \\[ m_{ij} = \\left \\{ \\begin{aligned} 0 &amp; \\quad i = j \\\\ \\min_{i \\le k &lt; j} \\{ m_{ik} + m_{k+1,j} + p_{i-1}p_kp_j \\} &amp; \\quad i &lt; j \\end{aligned} \\right. \\]"},{"location":"study/course/ads/lec8/#3-example-optimal-binary-search-tree","title":"3 Example: Optimal Binary Search Tree","text":"<p>\u9700\u8981\u627e\u5230\u4e00\u79cd\u4f7f\u5f97\u5e73\u5747\u67e5\u8be2\u65f6\u95f4\u6700\u5c0f\u7684\u6811\u7ed3\u6784\uff0c\u4e5f\u5373\u9700\u8981\u4f7f</p> \\[ T(N) = \\sum\\limits_{i=1}^{N} p_i\\cdot (1+d_i) \\] <p>\u6700\u5c0f\u3002\u4e00\u79cd\u5f88 Greedy \u7684\u60f3\u6cd5\u5c31\u662f\u628a freq \u6700\u5927\u7684\u653e\u5728\u6839\u8282\u70b9\u3002\u8fd9\u79cd\u867d\u7136\u505a\u51fa\u6765\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\uff0c\u4f46\u662f\u5374\u7ed9\u6211\u4eec\u4ee5\u542f\u793a\uff1a\u6211\u4eec\u6839\u636e\u201c\u8c01\u6765\u5f53\u6839\u8282\u70b9\u201d\u4f5c\u4e3a\u8fd9\u79cd\u904d\u5386\u7684\u6307\u6807\u3002</p> <p>\u5177\u4f53\u63a8\u5bfc\u53ef\u4ee5\u770b PPT\uff0c\u6700\u540e\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u5f0f\u662f\u81ea\u5e95\u5411\u4e0a\uff0c\u4ece\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u6811\u5f00\u59cb\u4e00\u6b65\u4e00\u6b65\u6784\u9020\u3002</p> <p></p>"},{"location":"study/course/ads/lec8/#4-example-all-pairs-shortest-path","title":"4 Example: All-Pairs Shortest Path","text":"<p>Floyd \u7b97\u6cd5\uff08\u52a8\u6001\u89c4\u5212\uff09\u3002</p> <p>\u4e0e\u524d\u9762\u7684\u4f8b\u5b50\u7c7b\u4f3c\uff0c\u6211\u4eec\u8fd8\u662f\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u7684\u6570\u7ec4\u3002</p> \\[ D^k[i][j]=min\\{length\\ of\\ path\\ i \\rightarrow \\{l \\le k\\} \\rightarrow j\\} \\] <p>\u8fd9\u4ee3\u8868\u4ece i \u5230 j \u7684\uff0c\u4e2d\u95f4\u7ecf\u8fc7 k \u4e2a\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u5f88\u5bb9\u6613\u77e5\u9053\u5f53\u6211\u4eec\u4ece k \u4e3a 0 \u7684\u65f6\u5019\u5f00\u59cb\u904d\u5386\uff0c\u6700\u540e k \u5230 N-1 \u7684\u65f6\u5019\u4e00\u5b9a\u5f97\u5230\u7684\u662f\u6700\u4f18\u89e3\u3002</p> <p>\u5982\u4f55\u8fdb\u884c\u201c\u72b6\u6001\u8f6c\u79fb\u201d\u5462\uff1f\u5f53\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 \\(D^{k-1}\\) \u7684\u4fe1\u606f\u4e4b\u540e\uff1a</p> <ol> <li>\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u5c06 k \u52a0\u5165\u6700\u77ed\u8def\u5f84\uff0c\u76f4\u63a5\u8ba9 \\(D^k\\) \u7ee7\u627f\u4e0a\u4e00\u4e2a\u503c\u5373\u53ef\uff1b</li> <li>\u5982\u679c\u60f3\uff0c\u90a3\u4e48\u5c31\u662f\u628a i \u5230 k \u7684\u6700\u77ed\u8def\u5f84\u548c k \u5230 j \u7684\u6700\u77ed\u8def\u5f84\u52a0\u8d77\u6765\u5c31\u884c\u4e86\u3002</li> </ol> <p>\u6240\u4ee5\uff1a</p> \\[ D^k[i][j]=min\\{ D^{k-1}[i][j],D^{k-1}[i][k]+D^{k-1}[k][j] \\},\\ k\\ge 0 \\] <p>\u7ed9\u51fa\u4ee3\u7801\uff1a</p> C<pre><code>void AllPairs(A[][], D[][], int n)\n{\n    int i,j,k;\n    for(i=0;i&lt;n;i++)\n        for(j=0;j&lt;n;j++)\n            D[i][j]=A[i][j];\n\n    for(k=0;k&lt;n;k++)\n        for(i=0;i&lt;n;i++)\n            for(j=0;j&lt;n;j++)\n                if(D[i][k]+D[k][j]&lt;D[i][j])\n                    D[i][j]=D[i][k]+D[k][j];\n}\n</code></pre> <p>\\(T(N) = O(N)\\).</p>"},{"location":"study/course/ads/lec8/#5-example-product-assembly","title":"5 Example: Product Assembly","text":"<p>\u7b2c i \u4e2a stage \u6765\u6e90\u4e8e\u4e0a\u4e00\u4e2a stage\uff0c\u5b83\u53ef\u4ee5\u662f\u7531\u522b\u7684\u751f\u4ea7\u7ebf\u8f6c\u79fb\u800c\u6765\uff0c\u4e5f\u53ef\u4ee5\u662f\u81ea\u5df1\u8fd9\u6761\u751f\u4ea7\u7ebf\u3002</p>"},{"location":"study/course/ads/lec8/#6-summary","title":"6 Summary","text":"<p>\u603b\u7ed3\u4e00\u4e0b\u3002</p> <p>DP \u7684\u7279\u5f81\uff1a</p> <ul> <li>\u6700\u4f18\u5b50\u7ed3\u6784</li> <li>\u91cd\u53e0\u5b50\u95ee\u9898</li> </ul> <p>\u8bbe\u8ba1 DP \u65b9\u6cd5\uff1a</p> <ul> <li>\u63cf\u8ff0\u6700\u4f18\u89e3\u7684\u6837\u5b50</li> <li>\u9012\u5f52\u5730\u5b9a\u4e49\u6700\u4f18\u503c</li> <li>\u4ee5\u67d0\u4e00\u987a\u5e8f\u6765\u8ba1\u7b97</li> <li>\u6700\u540e\u91cd\u6784\u89e3\u6cd5\uff08\u9009\uff09</li> </ul>"},{"location":"study/course/ads/lec9/","title":"Lecture 9: Greedy Algorithm","text":"<p>\u8d2a\u5fc3\u7b97\u6cd5\u3002</p>"},{"location":"study/course/ads/lec9/#1-introduction","title":"1 Introduction","text":"<p>Greedy algorithms are used to solve what we call optimization problems\uff08\u6700\u4f18\u5316\u95ee\u9898\uff09.</p> Optimization Problem\uff1a\u6700\u4f18\u5316\u95ee\u9898 <p>Given a set of constraints and an optimization function. Solutions that satisfy the constrains are called feasible solutions. A feasible solution for which the optimization function has the best possible value is called an optimal solution.</p> <p>The greedy method make the best decision at each stage, under some greedy criterion. A decision made in one stage is not changed in a later stage, so each decision should assure feasibility.</p> <p>\u4e5f\u5c31\u662f\u8bf4\u8d2a\u5fc3\u7b97\u6cd5\u5728\u6bcf\u4e00\u6b65\u90fd\u6839\u636e\u4e00\u4e9b\u539f\u5219\u6765\u505a\u51fa\u6700\u597d\u7684\u9009\u62e9\uff0c\u5e76\u4e14\u524d\u4e00\u6b65\u505a\u51fa\u51b3\u5b9a\u4e4b\u540e\u5728\u540e\u7eed\u7684\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u80fd undo \u4e86\u3002\u540c\u65f6\u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u6bcf\u4e00\u6b65\u9700\u8981\u4fdd\u8bc1\u8fdb\u884c\u8fd9\u6b21\u64cd\u4f5c\u4e4b\u540e\u95ee\u9898\u8fd8\u662f\u6709\u89e3\uff0c\u8fd9\u5c31\u662f\u9700\u8981\u4fdd\u8bc1 feasibility\u3002</p> <p>\u6ce8\u610f</p> <ul> <li>Greedy algorithm works only if the local optimum is equal to the global optimum.</li> <li>Greedy algorithm does not guarantee optimal solutions. \u8d2a\u5a6a\u4e0d\u4fdd\u8bc1\u5f97\u5230\u6700\u4f18\u89e3\uff0c\u4f46\u662f\u4e00\u822c\u80fd\u5728\u6570\u503c\u4e0a\u548c\u6700\u4f18\u89e3\u6bd4\u8f83\u63a5\u8fd1\uff08heuristics\uff0c\u542f\u53d1\u5f0f\u7b97\u6cd5\uff09\uff0c\u6240\u4ee5\u5f53\u627e\u5230\u6700\u4f18\u89e3\u5f88\u8d39\u65f6\u95f4\u7684\u65f6\u5019\uff0c\u8d2a\u5a6a\u8fd8\u662f\u5f88\u6709\u7528\u7684\u3002</li> </ul>"},{"location":"study/course/ads/lec9/#2-example-activity-selection-problem","title":"2 Example: Activity Selection Problem","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6d3b\u52a8\u96c6 \\(S={a_1,a_2,...,a_n}\\)\uff0c\u90fd\u53d1\u751f\u5728\u540c\u4e00\u4e2a\u5730\u70b9\uff0c\u800c\u4e14\u6bcf\u4e00\u4e2a\u6d3b\u52a8\u7684\u8d77\u6b62\u65f6\u95f4\u4e3a \\([s_i,f_i)\\)\u3002\u5982\u679c\u67d0\u4e24\u4e2a\u6d3b\u52a8\u65f6\u95f4\u4e0d\u91cd\u53e0\uff0c\u90a3\u4ed6\u4eec\u5c31\u79f0\u4f5c compatible\u3002</p> <p>\u95ee\u9898\u6765\u4e86\uff1a\u7ed9\u8fd9\u6837\u4e00\u4e2a\u6d3b\u52a8\u96c6\uff0c\u5982\u4f55\u6311\u9009\u51fa\u6700\u5927\u7684\u4e0d\u91cd\u53e0\u6d3b\u52a8\u5b50\u96c6\uff1f\u5047\u8bbe\u8fd9\u4e9b\u6d3b\u52a8\u6309\u7167\u7ec8\u6b62\u65f6\u95f4\u6765\u6392\u5e8f\uff0c\u4e5f\u5373 \\(f_1\\le f_2\\le ... \\le f_{n-1} \\le f_n\\)\u3002</p>"},{"location":"study/course/ads/lec9/#21-a-dp-solution","title":"2.1 A DP Solution","text":"<p>\u6211\u4eec\u9996\u5148\u5c1d\u8bd5\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u7ef4\u89e3\u51b3\u3002\u6311\u9009\u5b50\u95ee\u9898 \\(S_{ij}\\)\uff0c\u5b83\u7684\u542b\u4e49\u662f\u4ece \\(a_i\\) \u5230 \\(a_j\\)\uff08\u4e0d\u5305\u542b\u8fd9\u4e24\u4e2a\u6d3b\u52a8\uff09\u7684 ASP \u5b50\u95ee\u9898\u3002\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\uff1a</p> \\[ c_{ij}=\\left\\{ \\begin{aligned} 0, &amp;  \\quad \\mathrm{if } S_{ij} = \\emptyset \\\\ \\mathop{max}\\limits_{a_k \\in S_{ij}} \\{c_{ik}+c_{kj}+1\\}, &amp; \\quad \\mathrm{if } S_{ij} \\neq \\emptyset \\end{aligned} \\right. \\] <p>\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(N^2)\\).</p>"},{"location":"study/course/ads/lec9/#22-how-to-be-greedy","title":"2.2 How to be greedy","text":"<p>\u6211\u4eec\u8003\u5bdf\u51e0\u79cd\u53ef\u80fd\u7684\u8d2a\u5fc3\u7b56\u7565\uff1a</p> <ol> <li>\u9009\u62e9\u53ef\u884c\u7684\u6700\u65e9\u5f00\u59cb\u7684\u6d3b\u52a8\u533a\u95f4\u3002\u8fd9\u663e\u7136\u662f\u9519\u7684\u5566</li> <li>\u9009\u62e9\u53ef\u884c\u7684\u6700\u77ed\u7684\u6d3b\u52a8\u533a\u95f4\u3002\u8fd9\u4e5f\u662f\u9519\u7684</li> <li>\u9009\u62e9\u53ef\u884c\u7684\u4e0e\u5269\u4e0b\u672a\u9009\u62e9\u6d3b\u52a8\u4e4b\u95f4\u53d1\u751f\u65f6\u95f4\u51b2\u7a81\u6570\u91cf\u6700\u5c11\u7684\u6d3b\u52a8\u533a\u95f4\u3002\u4e5f\u662f\u9519\u7684</li> <li>\u9009\u62e9\u53ef\u884c\u7684\u6700\u5148\u7ed3\u675f\u7684\u6d3b\u52a8\u533a\u95f4\u3002\u770b\u4e0a\u53bb\u4e0d\u9519\u54e6</li> </ol> <p>\u8fd9\u91cc\u7ed9\u51fa\u8bc1\u660e\uff1a</p> <p></p> <p>\u8bf4\u660e\u8d2a\u5fc3\u7b56\u7565 4 \u786e\u5b9e\u80fd\u591f\u5f97\u5230\u6700\u4f18\u89e3\u3002</p> \u8fd8\u6709\u5176\u4ed6\u7684\u8d2a\u5fc3\u7b56\u7565\u5417\uff1f <p>\u7b54\u6848\u662f\u6709\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u53ef\u884c\u7684\u6700\u65e9\u5f00\u59cb\u7684\u6d3b\u52a8\u533a\u95f4\u3002</p>"},{"location":"study/course/ads/lec9/#23-back-to-dp","title":"2.3 Back to DP","text":"<p>\u8fd9\u65f6\u91cd\u65b0\u770b\u52a8\u6001\u89c4\u5212\u89e3\u6cd5\uff1a</p> \\[ c_{ij}=\\left\\{ \\begin{aligned} 1, &amp;  \\quad \\mathrm{if } j = 1 \\\\ \\mathop{max} \\{c_{i,j-1}+c_{1,k(j)}+1\\}, &amp; \\quad \\mathrm{if } j &gt; 1 \\end{aligned} \\right. \\] <p>\u8fd9\u91cc \\(a_{k(j)}\\) \u662f\u5728\u6d3b\u52a8 \\(a_j\\) \u4e4b\u524d\u7ed3\u675f\u7684\u6700\u8fd1\u7684\u53ef\u80fd\u6d3b\u52a8\u3002</p> <p>\u95ee\u9898\u6765\u4e86\uff1a\u5982\u679c\u6211\u4eec\u8d4b\u4e88\u6bcf\u4e2a\u6d3b\u52a8\u4e00\u4e2a\u6743\u91cd\uff0c\u60f3\u8981\u5f97\u5230\u603b\u6743\u91cd\u6700\u5927\u7684\u6d3b\u52a8\u5b89\u6392\uff0c\u600e\u4e48\u505a\uff1f</p> <p>\u5bf9\u4e8e\u52a8\u6001\u89c4\u5212\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e0a\u5f0f\u7b2c\u4e8c\u884c\u540e\u9762\u7684 +1 \u6539\u6210 +\u6743\u91cd(i)\uff0c\u8fd9\u6837\u7684\u52a8\u6001\u89c4\u5212\u89e3\u6cd5\u4ecd\u7136\u53ef\u884c\u3002</p> <p>\u53ef\u662f\u5982\u679c\u6211\u4eec\u4ecd\u7136\u91c7\u7528\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u5c31\u4e0d\u4e00\u5b9a\u5f97\u5230\u6700\u4f18\u89e3\u4e86\u3002</p>"},{"location":"study/course/ai/","title":"\u4eba\u5de5\u667a\u80fd\u5f15\u8bba","text":"<p>\u6d59\u6c5f\u5927\u5b66 2023-2024 \u79cb\u51ac\u5b66\u671f\u300a\u4eba\u5de5\u667a\u80fd\u5f15\u8bba\u300b\u8bfe\u7a0b\u590d\u4e60\u8d44\u6599</p> <p>\u6559\u5e08\uff1a\u6768\u6613/\u6731\u9716\u6f6e</p> \u4eba\u5de5\u667a\u80fd\u5f15\u8bba_\u590d\u4e60\u601d\u7ef4\u5bfc\u56fe_by_Frankoxer.pdf 297 KB / 1 P / 2024-03-02 <p>\u4e0b\u8f7d\u672c\u6587\u6863</p>"},{"location":"study/course/asm/","title":"Assembly Language and Microcomputer Interface","text":""},{"location":"study/course/asm/#_1","title":"\u8bfe\u7a0b\u4fe1\u606f","text":"<ul> <li>\u8bfe\u7a0b\u540d\u79f0\uff1a\u6c47\u7f16\u4e0e\u63a5\u53e3</li> <li>\u5b66\u671f\uff1a2024-2025 \u79cb\u51ac</li> <li>\u6559\u5e08\uff1a\u8521\u94ed</li> </ul>"},{"location":"study/course/asm/#_2","title":"\u7b14\u8bb0\u4fe1\u606f","text":"<ul> <li>\u7c7b\u578b\uff1a\u8bfe\u7a0b\u7b14\u8bb0</li> <li>\u4f5c\u8005\uff1aFrankoxer</li> <li>\u53c2\u8003\uff1a\u8bfe\u7a0b\u8bfe\u4ef6</li> </ul>"},{"location":"study/course/asm/ch1/","title":"Introduction to the Microprocessor and Computer","text":"<p>Outline:</p> <ul> <li>Overview of Intel microprocessors</li> <li>Discussion of history of computers</li> <li>Function of the microprocessor</li> <li>Computer data formats</li> <li>Terms and jargon</li> </ul>"},{"location":"study/course/asm/ch1/#historical-background","title":"Historical Background","text":"<ul> <li>\u7b2c\u4e00\u53f0\u901a\u7528\u7684\u3001\u53ef\u7f16\u7a0b\u7684\u7535\u5b50\u8ba1\u7b97\u673a\u662f 1946 \u5e74\u7531\u7f8e\u56fd\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u7684\u7ea6\u7ff0\u00b7\u666e\u96f7\u65af\u73ed\u8bbe\u8ba1\u7684 ENIAC\uff08Electronic Numerical Integrator and Computer\uff09\u3002\u53ef\u7f16\u7a0b\u76f8\u6bd4\u91cd\u65b0\u8bbe\u8ba1\u786c\u4ef6\u66f4\u52a0\u7075\u6d3b\u3002</li> <li>\u51af\u00b7\u8bfa\u4f9d\u66fc\uff08John von Neumann\uff09\u5728 1945 \u5e74\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u8ba1\u7b97\u673a\u7ed3\u6784\uff0c\u8fd9\u79cd\u7ed3\u6784\u88ab\u79f0\u4e3a\u51af\u00b7\u8bfa\u4f9d\u66fc\u7ed3\u6784\u3002\u8fd9\u79cd\u7ed3\u6784\u7684\u7279\u70b9\u662f\u7a0b\u5e8f\u548c\u6570\u636e\u5b58\u50a8\u5728\u540c\u4e00\u5757\u5b58\u50a8\u5668\u4e2d\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u5f53\u4f5c\u6570\u636e\u6765\u5904\u7406\u3002</li> <li>\u8d77\u521d\u7684\u7f16\u7a0b\u662f\u7528\u673a\u5668\u7801\u5b9e\u73b0\u7684\uff0c\u7531\u4e00\u7cfb\u5217\u7684 0 \u548c 1 \u7ec4\u6210\u3002</li> <li>1950 \u5e74\u4ee3 UNIVAC \u7b49\u7cfb\u7edf\u51fa\u73b0\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u7f16\u7a0b\uff0c\u6c47\u7f16\u8bed\u8a00\u662f\u4e00\u79cd\u7b26\u53f7\u5316\u7684\u673a\u5668\u7801\u3002</li> <li>1957 \u5e74 Grace Hopper \u53d1\u660e\u4e86\u7b2c\u4e00\u4e2a\u9ad8\u7ea7\u8bed\u8a00\uff0c\u79f0\u4e3a FLOWMATIC\u3002\u540c\u5e74 IBM \u53d1\u660e\u4e86 FORTRAN \u8bed\u8a00\u3002Grace Hopper \u4e5f\u662f COBOL \u8bed\u8a00\u7684\u53d1\u660e\u8005\u4e4b\u4e00\uff0c\u5979\u4e5f\u53d1\u73b0\u4e86\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a bug\uff081947\uff09\uff0c\u662f\u4e00\u53ea\u5361\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u98de\u86fe\u3002</li> </ul> <p>\u8fdb\u5165\u5fae\u673a\u65f6\u4ee3\uff1a</p> <ul> <li>1971 \u5e74\uff0cIntel \u516c\u53f8\u63a8\u51fa\u4e86 4004 \u5fae\u5904\u7406\u5668\uff0c\u8fd9\u662f\u7b2c\u4e00\u6b3e\u96c6\u6210\u7535\u8def\u5fae\u5904\u7406\u5668\u30024004 \u662f\u4e00\u6b3e 4 \u4f4d\u7684\u3001\u80fd\u5bfb\u5740 4096 \u4e2a\u5b57\u8282\u7684\u5b58\u50a8\u5668\uff0c\u5176\u6307\u4ee4\u96c6\u5305\u542b 45 \u6761\u6307\u4ee4\u3002\u5176\u901f\u5ea6\u6bd4 ENIAC \u8fd8\u662f\u6162\uff0c\u4f46\u662f\u5176\u91cd\u91cf\u5c0f\u4e8e 1 \u76ce\u53f8\u3002</li> <li>1978 \u5e74\uff0cIntel \u63a8\u51fa\u4e86 8086 \u5fae\u5904\u7406\u5668\uff0c\u4f7f\u7528\u4e86 IA-32 \u67b6\u6784\uff0c\u542b\u6709 16 \u4f4d\u7684\u5bc4\u5b58\u5668\u548c 16 \u4f4d\u7684 data bus\uff0c\u5185\u5b58\u7ba1\u7406\u4f7f\u7528\u4e86\u5206\u6bb5\u7684\u6280\u672f\u3002</li> <li>1982 \u5e74\uff0cIntel \u53d1\u5e03 80286 \u5fae\u5904\u7406\u5668\uff0c\u5f15\u5165\u4e86 protected mode\u3002</li> <li>1985 \u5e74\uff0cIntel \u53d1\u5e03 80386 \u5fae\u5904\u7406\u5668\uff0c\u662f IA-32 \u67b6\u6784\u7684\u7b2c\u4e00\u6b3e 32 \u4f4d\u5904\u7406\u5668\uff0c\u5bc4\u5b58\u5668\u4e3a 32 \u4f4d\uff0c\u4e14\u4f4e 16 \u4f4d\u4fdd\u6301\u524d\u51e0\u4ee3\u7684\u5bc4\u5b58\u5668\u529f\u80fd\uff0c\u7ef4\u6301\u4e86\u5411\u540e\u517c\u5bb9\u6027\u3002\u540c\u65f6\u5176\u63d0\u4f9b\u4e86\u865a\u62df 8086 \u6a21\u5f0f\uff0c\u4e14\u652f\u6301\u4e86\u5185\u5b58\u7684\u5206\u9875\uff0cpage size \u4e3a 4KB\u3002</li> <li>1989 \u5e74\uff0cIntel \u53d1\u5e03 80486 \u5fae\u5904\u7406\u5668\uff0c\u63d0\u4f9b\u4e86\u5185\u7f6e\u7684\u6d6e\u70b9\u8fd0\u7b97\u5355\u5143 x87\uff0c\u63d0\u4f9b\u4e86 8KB \u7684\u4e00\u7ea7\u7f13\u5b58\u3002</li> <li>1993 \u5e74\uff0cIntel \u53d1\u5e03 Pentium \u5fae\u5904\u7406\u5668\uff0c\u5f15\u5165\u4e86\u7b2c\u4e8c\u6761\u6267\u884c\u6d41\u6c34\u7ebf\uff0c\u5b9e\u73b0\u4e86\u8d85\u6807\u91cf\u7684\u8bbe\u8ba1\uff0c\u540c\u65f6\u5f15\u5165\u4e86\u5206\u652f\u9884\u6d4b\u6280\u672f\u3002</li> <li>1995-1999 \u5e74\uff0c\u76f8\u7ee7\u53d1\u5e03\u4e86 Pentium Pro\u3001Pentium II\u3001Pentium III \u5fae\u5904\u7406\u5668\u3002</li> <li>2000-2006 \u5e74\uff0c\u53d1\u5e03 Pentium 4 \u7cfb\u5217\u5904\u7406\u5668\u3002</li> </ul>"},{"location":"study/course/asm/ch1/#some-technical-terms","title":"Some Technical Terms","text":"<ul> <li>RISC\uff1a\u4ece Pentium Pro \u5f00\u59cb\uff0cIntel \u5728 CISC \u6307\u4ee4\u96c6\u4e0b\u5b9e\u73b0\u7684\u662f RISC \u8bbe\u8ba1\uff0c\u5373\u5c06 CISC \u6307\u4ee4\u96c6\u8f6c\u6362\u4e3a RISC \u6307\u4ee4\u96c6\u518d\u6267\u884c\uff0c\u4f46\u540c\u65f6\u80fd\u591f\u517c\u5bb9 CISC \u6307\u4ee4\u96c6\u3002</li> <li>\u4e71\u5e8f\u6267\u884c\uff1a\u8d85\u6807\u91cf\u8bbe\u8ba1\u5e26\u6765\u4e86 ILP\uff08Instruction Level Parallelism\uff09\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u636e\u76f8\u5173\u6027\uff0c\u6307\u4ee4\u4e4b\u95f4\u7684\u6267\u884c\u987a\u5e8f\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u56e0\u6b64\u9700\u8981\u4e71\u5e8f\u6267\u884c\u6280\u672f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</li> </ul> \u4e71\u5e8f\u6267\u884c\u7684\u4f8b\u5b50 Text Only<pre><code>r1 = r4 / r7    # Assmue divide takes 20 cycles\nr8 = r1 + r2\nr5 = r5 + 1\nr6 = r6 - r3\nr4 = r5 + r6\nr7 = r8 * r4\n</code></pre> <p>\u5047\u8bbe\u8fd9\u91cc\u7684 look ahead window = 4\uff0c\u8fd0\u7528\u4e09\u6761\u6d41\u6c34\u7ebf\u3002\u5982\u679c\u662f\u987a\u5e8f\u6267\u884c\uff0c\u56e0\u4e3a\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\uff0c\u5176\u6267\u884c\u60c5\u51b5\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u5982\u679c\u4f7f\u7528\u4e71\u5e8f\u6267\u884c\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u6d41\u56fe\uff1a</p> <p></p> <p>\u6309\u7167\u6570\u636e\u6d41\u56fe\u53ef\u4ee5\u6765\u4f18\u5316\u6267\u884c\u987a\u5e8f\uff1a</p> <p></p> <ul> <li>SIMD\uff1a\u5355\u6307\u4ee4\u591a\u6570\u636e\u6d41\uff0c\u5373\u4e00\u6761\u6307\u4ee4\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u6570\u636e\uff0c\u4f8b\u5982 MMX\u3001SSE\u3001AVX \u7b49\u3002</li> <li>Hyper-Threading\uff1a\u4e00\u79cd\u591a\u7ebf\u7a0b\u6280\u672f\uff0c\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u7269\u7406\u6838\u5fc3\u6a21\u62df\u51fa\u591a\u4e2a\u903b\u8f91\u6838\u5fc3\uff0c\u63d0\u9ad8\u4e86 CPU \u7684\u5229\u7528\u7387\u3002</li> </ul> Intel 64 Architecture <p>\u8f6f\u4ef6\u5bfb\u5740 64 \u4f4d\uff0c\u7269\u7406\u5730\u5740\u5bfb\u5740\u6700\u591a 52 \u4f4d\u3002\u8fd9\u79cd\u6280\u672f\u4e5f\u88ab\u79f0\u4e3a IA-32e \u6a21\u5f0f\uff0c\u5305\u542b 64-bit \u6a21\u5f0f\u548c\u517c\u5bb9\u6a21\u5f0f\u3002</p>"},{"location":"study/course/asm/ch1/#number-systems","title":"Number Systems","text":"<p>\u8fd9\u4e00\u90e8\u5206\u6bd4\u8f83\u57fa\u7840\uff0c\u7565\u8fc7\u3002</p>"},{"location":"study/course/asm/ch1/#computer-data-formats","title":"Computer Data Formats","text":"<p>\u5305\u542b ACSCII\u3001Unicode\u3001BCD\u3001\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u6574\u6570\u3001\u6d6e\u70b9\u6570\u7b49\u7b49\u3002</p> <ul> <li>ACSCII\uff1aAmerican Standard Code for Information Interchange\uff0c\u6807\u51c6\u7684 ASCII \u662f\u4e00\u79cd 7 \u4f4d\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5305\u542b 128 \u4e2a\u5b57\u7b26\u3002<ul> <li>\u5176\u4e2d\uff0c\u7b2c 8 \u4f4d\uff08MSB\uff09\u7528\u6765\u505a\u6821\u9a8c\u4f4d\u3002\u5728\u6253\u5370\u673a\u4e2d\uff0c\u8fd9\u4e00\u4f4d\u7684 0 \u4ee3\u8868 alphanumeric\uff0c1 \u4ee3\u8868 graphics\u3002</li> <li>Extended ASCII\uff1a\u4f7f\u7528 8 \u4f4d\u6765\u8868\u793a\u5b57\u7b26\uff08\u6700\u9ad8\u4f4d\u4e3a 1\uff09\uff0c\u5305\u542b 256 \u4e2a\u5b57\u7b26\uff0c\u5b58\u50a8\u4e86\u4e00\u4e9b\u5916\u56fd\u5b57\u7b26\u3001\u6ce8\u97f3\u3001\u5e0c\u814a\u5b57\u6bcd\u3001\u5236\u8868\u7b26\u7b49\u3002</li> </ul> </li> <li>Unicode\uff1a\u5927\u591a\u6570\u57fa\u4e8e Windows \u7684\u5e94\u7528\u4f7f\u7528 Unicode\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4f7f\u7528 16 \u4f4d\u6765\u8868\u793a\u3002<ul> <li>0000H-00FFH \u548c\u6807\u51c6 ASCII \u4e00\u6837\uff0c00FFH-FFFFH \u7528\u6765\u8868\u793a\u5176\u4ed6\u5b57\u7b26\u3002</li> </ul> </li> <li>BCD\uff1aBinary Coded Decimal\uff0c\u7528 4 \u4f4d\u4e8c\u8fdb\u5236\u6570\u6765\u8868\u793a\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u5305\u542b 0-9 \u7684\u6570\u5b57\u3002</li> </ul> Packed &amp; Unpacked BCD <ul> <li>Packed BCD\uff1a\u4e24\u4e2a BCD \u6570\u5b57\u5b58\u50a8\u5728\u4e00\u4e2a\u5b57\u8282\u4e2d\uff0c\u6bcf\u4e2a\u6570\u5b57\u5360 4 \u4f4d\uff0c\u7528\u4e8e\u5fae\u5904\u7406\u5668\u4e2d\u7684 BCD \u52a0\u6cd5\u51cf\u6cd5\u3002</li> <li>Unpacked BCD\uff1a\u6bcf\u4e2a BCD \u6570\u5b57\u5360 1 \u5b57\u8282\uff0c\u5373 8 \u4f4d\uff0c\u4e00\u822c\u662f\u952e\u76d8\u8f93\u5165\u7684\u6570\u636e\u3002</li> </ul> <p>\u4f8b\u5982\uff0c<code>12</code> \u7684 Packed BCD \u8868\u793a\u4e3a <code>0001 0010</code>\uff0cUnpacked BCD \u8868\u793a\u4e3a <code>0000 0001 0000 0010</code>\u3002</p> <p>\u590d\u6742\u7684\u8ba1\u7b97\u60c5\u51b5\u4e0b\u4e00\u822c\u4e0d\u7528 BCD \u7801\u3002</p> <ul> <li>Byte-sized Data\uff1a\u5b57\u8282\u5927\u5c0f\u7684\u6570\u636e\uff0c\u4e00\u822c\u7528\u6765\u5b58\u50a8\u5b57\u7b26\u3001\u6574\u6570\u7b49\u3002</li> <li>Word-sized Data\uff1a\u5b57\u5927\u5c0f\uff0816 \u4f4d\uff09\u7684\u6570\u636e\uff0c\u4e00\u822c\u7528\u6765\u5b58\u50a8\u5730\u5740\u3001\u6574\u6570\u7b49\u3002\u5728 x86 \u67b6\u6784\u4e2d\uff0c\u6570\u636e\u4ee5\u5c0f\u7aef\u5e8f\u5b58\u50a8\u3002</li> </ul> \u5927\u5c0f\u7aef\u95ee\u9898 <p></p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cx86 \u4e2d\u6570\u636e\u662f\u5c0f\u7aef\u5b58\u50a8\uff0c\u4f46\u662f\u5b57\u7b26\u4e32\u3001\u6307\u4ee4\u7b49\u662f\u5927\u7aef\u5b58\u50a8\u3002</p> <ul> <li>Double Word-sized Data\uff1a\u53cc\u5b57\u5927\u5c0f\uff0832 \u4f4d\uff09\u7684\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684 DWORD\u3002</li> <li>Real Numbers\uff1a\u5b9e\u6570\uff0c\u4e5f\u5c31\u662f\u6d6e\u70b9\u6570\u3002IEEE 754 \u6807\u51c6\u5b9a\u4e49\u4e86\u6d6e\u70b9\u6570\u7684\u8868\u793a\u65b9\u6cd5\u3002</li> </ul> <p>\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u522b\u540d\u7b26\u53f7\uff0cMASM \u662f\u4e00\u4e2a x86 \u6c47\u7f16\u5668\uff0c\u5176\u5b9a\u4e49\u4e86\u4e00\u4e9b\u522b\u540d\u7b26\u53f7\uff1a</p> <p></p>"},{"location":"study/course/asm/ch1/#the-ieee-754-format","title":"The IEEE 754 Format","text":"<p>\u7531 William Morton Kahan \u7b49\u4eba\u4e8e 1985 \u5e74\u63d0\u51fa\uff0c\u5b9a\u4e49\u4e86\u6d6e\u70b9\u6570\u7684\u8868\u793a\u65b9\u6cd5\u3002Kahan \u4e5f\u83b7\u5f97\u4e86 1989 \u5e74\u7684 ACM \u56fe\u7075\u5956\uff0c\u88ab\u8a89\u4e3a\u201c\u6d6e\u70b9\u6570\u4e4b\u7236\u201d\u3002</p>"},{"location":"study/course/asm/ch1/#format","title":"Format","text":"<p>\u8be5\u6807\u51c6\u5c06\u6d6e\u70b9\u6570\u8868\u793a\u4e3a\uff1a</p> \\[ (-1)^{\\text{sign bit}} \\times (1+\\text{fraction}) \\times 2^{\\text{exponent-bias}} \\] <p>\u5bf9\u4e8e\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a</p> Text Only<pre><code>| Sign (1 bit) | Exponent (8 bits) | Fraction (23 bits) |\n</code></pre> <p>\u5bf9\u4e8e\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a</p> Text Only<pre><code>| Sign (1 bit) | Exponent (11 bits) | Fraction (52 bits) |\n</code></pre>"},{"location":"study/course/asm/ch1/#why-not-2s-complement","title":"Why not 2's Complement?","text":"<ul> <li>\u6ca1\u6709\u65e0\u7b26\u53f7\u6d6e\u70b9\u6570\uff0c\u7528 2's Complement \u6ca1\u6709\u4efb\u4f55\u7684\u989d\u5916\u597d\u5904\u3002</li> <li>\u8865\u7801\u7684\u8d1f\u6570\u6bd4\u6b63\u6570\u591a\u4e00\u4e2a\uff0c\u5bfc\u81f4\u4e0d\u5bf9\u79f0\u3002</li> <li>\u79d1\u5b66\u8ba1\u7b97\u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u662f\u533a\u5206 +0 \u548c -0 \u7684\uff0c\u800c 2's Complement \u65e0\u6cd5\u533a\u5206\u3002</li> <li>\u7b49\u7b49\u7b49\u7b49\u3002</li> </ul>"},{"location":"study/course/asm/ch1/#special-values","title":"Special Values","text":"<p>Exponent \u90e8\u5206\u4e3a\u5168 0 \u6216\u5168 1 \u65f6\uff0c\u8868\u793a\u7279\u6b8a\u503c\uff1a</p> <ul> <li>0\uff1aExponent \u5168 0\uff0cFraction \u5168 0\uff0c\u8868\u793a +0 \u6216 -0\uff0c\u770b Sign \u4f4d\u3002</li> <li>\u65e0\u7a77\u5927\uff1aExponent \u5168 1\uff0cFraction \u5168 0\uff0c\u770b Sign \u4f4d\u51b3\u5b9a\u6b63\u8d1f\u3002</li> <li>NaN\uff1aExponent \u5168 1\uff0cFraction \u975e 0\uff0c\u8868\u793a Not a Number\u3002</li> </ul>"},{"location":"study/course/asm/ch1/#subnormal-numbers","title":"Subnormal Numbers","text":"<ul> <li>Normal Numbers\uff1aExponent \u4e0d\u5168 0 \u4e5f\u4e0d\u5168 1\u3002</li> <li>Subnormal Numbers\uff1aExponent \u5168 0\uff0cFraction \u975e 0\u3002\u8fd9\u4e2a\u6570\u5f88\u5c0f\uff0c\u5c0f\u5230\u8d85\u8fc7\u4e86 IEEE 754 \u7684\u7cbe\u5ea6\u8303\u56f4\uff0c\u56e0\u6b64\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002\u8fd9\u4e2a\u65f6\u5019\u7684\u6570\u5b57\u8868\u793a\u6709\u4e00\u4e9b\u5dee\u5f02\uff1a</li> </ul> \\[ (-1)^{\\text{sign bit}} \\times (0+\\text{fraction}) \\times 2^{1-\\text{exponent-bias}} \\] <ul> <li>Subnormal Numbers \u53ef\u80fd\u4f1a\u5f15\u53d1\u6027\u80fd\u7684\u5267\u70c8\u4e0b\u964d\u3002</li> </ul>"},{"location":"study/course/asm/ch1/#rounding","title":"Rounding","text":"<ul> <li>TiesToEven\uff1a\u9760\u8fd1\u5076\u6570\u7684\u65f6\u5019\u5411\u5076\u6570\u9760\u62e2\u3002\uff08\u9ed8\u8ba4\uff09</li> <li>TiesAwayfromZero</li> <li>TiesToZero</li> <li>TiesTowards +\u221e</li> <li>TiesTowards -\u221e</li> </ul>"},{"location":"study/course/asm/ch1/#addition","title":"Addition","text":"<p>\u5bf9\u9636\u3001\u76f8\u52a0\u3001\u820d\u5165\u3002</p> <p>\u5bf9\u9636\u64cd\u4f5c\u7684\u5b58\u5728\u4f1a\u5bfc\u81f4\u5927\u6570\u5403\u5c0f\u6570\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u820d\u5165\u64cd\u4f5c\u3002</p> <p>\u4e00\u4e9b\u516c\u5f0f\u53ef\u4ee5\u8fdb\u884c\u91cd\u5199\uff0c\u4f1a\u6709\u6027\u80fd\u548c\u7cbe\u5ea6\u7684\u53d8\u5316\u3002\u4f8b\u5982 Herbie \u7b49\u5de5\u5177\u53ef\u4ee5\u81ea\u52a8\u4f18\u5316\u8fd9\u4e9b\u516c\u5f0f\u3002</p> \u91cd\u5199\u6d6e\u70b9\u8868\u8fbe\u5f0f\u7684\u4f8b\u5b50 \\[ \\sqrt{x+1} - \\sqrt{x} = \\frac{1}{\\sqrt{x+1} + \\sqrt{x}} \\] <p>\u7cbe\u5ea6\u4ece 70.6% \u63d0\u5347\u5230 99.5%\uff0c\u6027\u80fd\u4ece 1.0x \u4e0b\u964d\u5230 0.7x\u3002</p>"},{"location":"study/course/asm/ch1/#new-floating-point-format-for-ai","title":"New Floating-point Format for AI","text":"<p>\u4e3a\u4e86\u4fbf\u4e8e AI \u8ba1\u7b97\uff0c\u4e00\u4e9b\u65b0\u7684\u6d6e\u70b9\u6570\u683c\u5f0f\u88ab\u63d0\u51fa\uff0c\u4f8b\u5982 Bfloat16\u3001TF32\u3001FP16 \u7b49\u3002</p> <p></p>"},{"location":"study/course/ds/","title":"Fundamentals of Data Structures","text":""},{"location":"study/course/ds/#_1","title":"\u8bfe\u7a0b\u4fe1\u606f","text":"<ul> <li>\u8bfe\u7a0b\u540d\u79f0\uff1a\u6570\u636e\u7ed3\u6784\u57fa\u7840</li> <li>\u5b66\u671f\uff1a2023-2024 \u79cb\u51ac</li> <li>\u6559\u5e08\uff1a\u4f55\u94a6\u94ed</li> </ul>"},{"location":"study/course/ds/#_2","title":"\u7b14\u8bb0\u4fe1\u606f","text":"<ul> <li>\u7c7b\u578b\uff1a\u590d\u4e60\u7b14\u8bb0</li> <li>\u4f5c\u8005\uff1aFrankoxer</li> <li>\u53c2\u8003\uff1a\u8bfe\u7a0b\u8bfe\u4ef6\u3001\u4e2d\u56fd\u5927\u5b66 MOOC\u300a\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\uff08\u6d59\u6c5f\u5927\u5b66 \u9648\u8d8a\u3001\u4f55\u94a6\u94ed\uff09</li> </ul> <p>\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\uff01</p>"},{"location":"study/course/ds/ch1/","title":"Chap1. Algorithm Analysis","text":"<p>\u672c\u7ae0\u4ecb\u7ecd\u7b97\u6cd5\u5206\u6790\u7684\u5b9a\u4e49\u4ee5\u53ca\u4e00\u822c\u65b9\u6cd5\u3002</p> <p>\u7b97\u6cd5\u7684\u5b9a\u4e49\uff1a</p> <p>An algorithm is a finite set of instructions that, if followed, accomplishes a particular task.</p>"},{"location":"study/course/ds/ch1/#11-five-features","title":"1.1 Five Features","text":"<ol> <li>Input\uff1a\u6709/\u65e0\u8f93\u5165</li> <li>Output\uff1a\u81f3\u5c11\u6709\u4e00\u4e2a\u8f93\u51fa</li> <li>Definiteness\uff1a\u6bcf\u4e2a\u8bed\u53e5\u542b\u4e49\u6e05\u6670\uff0c\u5e76\u65e0\u6b67\u4e49</li> <li>Finiteness\uff1a\u5728\u6709\u9650\u6b65\u9aa4\u4e4b\u540e\u7ec8\u6b62</li> <li>Effectiveness\uff1a\u80fd\u591f\u5b9e\u73b0</li> </ol>"},{"location":"study/course/ds/ch1/#12-analysis","title":"1.2 Analysis","text":""},{"location":"study/course/ds/ch1/#121-preliminaries","title":"1.2.1 Preliminaries","text":"<p>\u4e24\u4e2a\u6982\u5ff5\uff1a</p> <p>Run times--\u8fd0\u884c\u65f6\u95f4\uff0c\u4f9d\u8d56\u4e8e\u8bbe\u5907\u548c\u7f16\u8bd1\u5668\u3002</p> <p>Time &amp; Space complexities--\u65f6\u95f4/\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u8bbe\u5907\u548c\u7f16\u8bd1\u5668\u3002</p> <p>\u4e09\u4e2a\u524d\u63d0\uff1a</p> <ul> <li>\u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c</li> <li>\u6bcf\u4e2a\u8bed\u53e5\u6d88\u80171\u4e2a\u65f6\u95f4\u5355\u4f4d</li> <li>\u56fa\u5b9a\u7684\u6570\u5b57\u5927\u5c0f\u4ee5\u53ca\u6709\u9650\u5185\u5b58</li> </ul> <p>\u901a\u5e38\u5206\u6790\u4e24\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T_{\\mathrm{avg}}(N)\\) &amp; \\(T_{\\mathrm{worst}}(N)\\)\uff0c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"study/course/ds/ch1/#122","title":"1.2.2 \u6e10\u8fdb\u8bb0\u53f7","text":"<p>\u5305\u542b\\(O, \\Omega, \\Theta, o\\)\u7b49\u8bb0\u53f7\u3002\u79bb\u6563\u6570\u5b66\u4e2d\u5df2\u7ecf\u6d89\u53ca\u8fc7\u3002</p> <p></p>"},{"location":"study/course/ds/ch1/#123-basic-rules","title":"1.2.3 Basic Rules","text":"<ul> <li> <p>for\u5faa\u73af\uff1a\u5faa\u73af\u5185\u6700\u957f\u8fd0\u884c\u65f6\u95f4\u00d7\u5faa\u73af\u6b21\u6570\u3002</p> </li> <li> <p>\u5d4c\u5957\u7684for\u5faa\u73af\uff1a\u5faa\u73af\u5185\u6700\u957f\u8fd0\u884c\u65f6\u95f4\u00d7\u6240\u6709\u5faa\u73af\u4f53\u5faa\u73af\u6b21\u6570\u4e58\u79ef\u3002</p> </li> <li> <p>\u8fde\u7eed\u8bed\u53e5\uff1a\u76f4\u63a5\u76f8\u52a0\u3002</p> </li> <li> <p>if/else\u8bed\u53e5\uff1a</p> </li> </ul> C<pre><code>if(Condition) S1;\nelse S2;\n</code></pre> <p>\u5224\u5b9a\u65f6\u95f4+S1\u548cS2\u4e2d\u66f4\u5927\u7684\u65f6\u95f4\u3002</p> <ul> <li>\u9012\u5f52\uff1a\u4ee5Fibonacci number\u4e3a\u4f8b\uff1a</li> </ul> C<pre><code>long int Fib(int N)\n{\n    if (N&lt;=1)\n        return 1;\n    else\n        return Fib(N-1) + Fib(N-2);\n}\n</code></pre> <p>\u9012\u63a8\u5206\u6790\uff1a\\(T(N)=T(N-1)+T(N-2)+2\\)\uff0c\u5f97\u5230\\((\\frac{3}{2})^{N}\\le \\mathrm{Fib}(N)\\le (\\frac{5}{3})^{N}\\)\uff0c\u4e5f\u5373\\(T(N)\\)\u6307\u6570\u589e\u957f\u3002</p>"},{"location":"study/course/ds/ch1/#124-practice","title":"1.2.4 Practice","text":"<ol> <li>For the following piece of code</li> </ol> C<pre><code>if ( A &gt; B ){     \n  for ( i=0; i&lt;N*2; i++ )         \n    for ( j=N*N; j&gt;i; j-- )             \n      C += A; \n}\nelse {     \n  for ( i=0; i&lt;N*N/100; i++ )         \n    for ( j=N; j&gt;i; j-- ) \n      for ( k=0; k&lt;N*3; k++)\n        C += B; \n}\n</code></pre> <p>the lowest upper bound of the time complexity is ( \\(O(N^{3})\\) ).</p> <p>\u6ce8\u610f\uff1a<code>if</code>\u8bed\u53e5\u4e2dN*2\u4e0d\u662fN*N\uff0c\u590d\u6742\u5ea6\u4e3a\\(O(N^{3})\\)\uff0c<code>else</code>\u8bed\u53e5\u4e2d\u590d\u6742\u5ea6\u4e5f\u4e3a\\(O(N^{3})\\)\uff0c\u56e0\u4e3a<code>i</code>\u5230<code>N</code>\u7684\u65f6\u5019\u5185\u5c42\u5faa\u73af\u5c31\u4e0d\u8fdb\u53bb\u4e86\u3002</p> <ol> <li>The recurrent equations for the time complexities of programs P1 and P2 are:</li> </ol> <ul> <li>P1: \\(T(1)=1,T(N)=T(N/3)+1\\)</li> <li>P2: \\(T(1)=1,T(N)=3T(N/3)+1\\)</li> </ul> <p>Then the correct conclusion about their time complexities is: ( \\(O(logN)\\) for P1, \\(O(N)\\) for P2 ).</p> <ol> <li>\u9012\u5f52\u65b9\u5f0f\u6c42\u89e3Fibonacci\u6570\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a( \\(O(N)\\) )\u3002</li> </ol>"},{"location":"study/course/ds/ch2/","title":"Chap2. Linear ADT","text":"<p>\u672c\u7ae0\u8282\u5f00\u59cb\u4ecb\u7ecd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5305\u542b\u7ebf\u6027\u8868\u3001\u6808\u4ee5\u53ca\u961f\u5217\u3002</p>"},{"location":"study/course/ds/ch2/#21-abstract-data-type-adt","title":"2.1 Abstract Data Type (ADT)","text":"<p>An Abstract Data Type (ADT) is a data type that is organized in such a way that the specification on the objects and specification of the operations on the objects are separated from the representation of the objects and the implementation on the operations.</p> <p>\u7b80\u5355\u5730\u6765\u8bf4\u5c31\u662f\u6570\u636e\u53ca\u5b9a\u4e49\u5728\u5176\u4e0a\u7684\u64cd\u4f5c\u3002</p>"},{"location":"study/course/ds/ch2/#22-the-list-adt","title":"2.2 The List ADT","text":""},{"location":"study/course/ds/ch2/#221-adt","title":"2.2.1 ADT","text":"<ul> <li>Objects: (item_0, item_1, ..., item_(N-1))</li> <li>Important Operations:</li> <li>Finding the \\(k\\)-th item from a list, \\(0\\le k &lt; N\\).</li> <li>Inserting a new item after the \\(k\\)-th item of a list, \\(0\\le k &lt;N\\).</li> <li>Deleting an item from a list.</li> </ul>"},{"location":"study/course/ds/ch2/#222-simple-array-implementation","title":"2.2.2 Simple Array Implementation","text":"<p>\u7528\u6570\u7ec4\u6765\u5b58\u50a8\u7ebf\u6027\u8868\uff0c\u4e5f\u5373\\(\\mathrm{array}[\\ i\\ ]=\\mathrm{item}_{i}\\).</p> <p>Advantage: Find takes \\(O(1)\\) time.</p> <p>Disadvantage: Insertion and Deletion not onle takes \\(O(N)\\) time, but also involve a lot of data movements which takes time; MaxSize has to be estimated.</p> <p>\u67e5\u627e\u662f\u5f88\u5feb\u7684\uff0c\u4f46\u662f\u63d2\u5165\u5220\u9664\u975e\u5e38\u6d88\u8017\u65f6\u95f4\u3002\u540c\u65f6\u9700\u8981\u63d0\u524d\u4f30\u8ba1\u597d\u6570\u7ec4\u7684\u5927\u5c0f\u3002</p>"},{"location":"study/course/ds/ch2/#223-linked-list-implementation","title":"2.2.3 Linked List Implementation","text":"<p>\u7528\u94fe\u8868\u6765\u5b58\u50a8\u7ebf\u6027\u8868\u3002\u8fd9\u6837\u63d2\u5165\u5220\u9664\u90fd\u53ea\u9700\u8981\\(O(1)\\)\u7684\u65f6\u95f4\u3002</p> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53cc\u6307\u9488\u5faa\u73af\u94fe\u8868\uff08\u5e26\u6709\u5934\u8282\u70b9\uff09\uff1a</p> <p></p> <p>\u4e24\u4e2a\u5e94\u7528\uff1a</p> <ul> <li>\u8868\u793a\u591a\u9879\u5f0f\u3002</li> </ul> C<pre><code>typedef struct Polynomial{\n    int coefficient;\n    int exponent;\n    struct Polynomial* next;\n}\n</code></pre> <ul> <li>\u8868\u793a\u77e9\u9635\uff08\u5c24\u5176\u7a00\u758f\u77e9\u9635\uff09\uff0c\u4f7f\u7528\u5341\u5b57\u94fe\u8868\uff1a</li> </ul> <p></p> <p>\u6570\u636e\u57df\uff1a\u884c\u5750\u6807Row\u3001\u5217\u5750\u6807Col\u3001\u6570\u503cValue</p> <p>\u6307\u9488\u57df\uff1a\u884c\u6307\u9488Right\u3001\u5217\u6307\u9488Down</p> <p>\u9759\u6001\u94fe\u8868\uff1a\u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u7684Next\u6570\u7ec4\u6765\u6a21\u62df\u5b58\u50a8\u672c\u8282\u70b9\u7684<code>next</code>.</p> <p></p>"},{"location":"study/course/ds/ch2/#23-the-stack-adt","title":"2.3 The Stack ADT","text":""},{"location":"study/course/ds/ch2/#231-adt","title":"2.3.1 ADT","text":"<p>LIFO: Last-In-First-Out</p> <ul> <li>Objects: A finite ordered list with zero or more elements.</li> <li>Important Operations:</li> <li>Push</li> <li>Pop(Top)</li> </ul> <p>\u6808\u662f\u4e00\u79cd\u540e\u8fdb\u5148\u51fa\u7ed3\u6784\uff0c\u4e3b\u8981\u5b9e\u73b0Push\u548cPop\u64cd\u4f5c\u3002</p>"},{"location":"study/course/ds/ch2/#232-implementations","title":"2.3.2 Implementations","text":"<ul> <li>Linked-List:</li> <li>Push: <code>Tmpcell-&gt;Next = S-&gt;Next; S-&gt;Next = Tmpcell</code></li> <li> <p>Pop: <code>FirstCell = S-&gt;Next; S-&gt;Next=S-&gt;Next-&gt;Next; free(FirstCell)</code></p> </li> <li> <p>Array:</p> </li> </ul> C<pre><code>struct Stack{\n    int Capacity;\n    int TopOfStack; // ++ for push, -- for pop, -1 for empty stack\n    ElementType *Array;\n}\n</code></pre>"},{"location":"study/course/ds/ch2/#233-applications","title":"2.3.3 Applications","text":"<ul> <li>Balancing Symbols: \u68c0\u67e5(), [], {}\u7b49\u62ec\u53f7\u662f\u5426\u9f50\u5168\u3002</li> </ul> <p>\u521b\u5efa\u7a7a\u6808\u3002\u8bfb\u5165\u5de6\u62ec\u53f7\u5c31push\uff0c\u8bfb\u5165\u53f3\u62ec\u53f7\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u7a7a\u6808\uff0c\u5f53\u6808\u975e\u7a7a\uff0c\u4e14\u6808\u9876\u4e3a\u4e0e\u4e4b\u5339\u914d\u7684\u5de6\u62ec\u53f7\uff0c\u5c31pop\u3002\u6700\u540e\u5982\u679c\u6808\u975e\u7a7a\uff0c\u5219\u6574\u4e2a\u5f0f\u5b50\u4e0d\u662f\u5b8c\u6574\u7684\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N)\\)\uff0c\u5176\u4e2d\\(N\\)\u4e3a\u8868\u8fbe\u5f0f\u7684\u957f\u5ea6\u3002</p> <ul> <li> <p>Postfix Evaluation: \u5f97\u5230\u540e\u5e8f\u8868\u8fbe\u5f0f</p> </li> <li> <p>Function Calls: \u51fd\u6570\u7684\u8fd0\u884c\u65b9\u5f0f\u5373\u4e3a\u4f7f\u7528\u6808\u3002\u53ef\u89c1\u8ba1\u6982\u90e8\u5206\u3002</p> </li> </ul>"},{"location":"study/course/ds/ch2/#24-the-queue-adt","title":"2.4 The Queue ADT","text":""},{"location":"study/course/ds/ch2/#241-adt","title":"2.4.1 ADT","text":"<p>FIFO: First-In-First-Out</p> <ul> <li>Objects: A finite ordered list with zero or more elements.</li> <li>Important Operations:</li> <li>Enqueue</li> <li>Dequeue(Front)</li> </ul>"},{"location":"study/course/ds/ch2/#242-implementations","title":"2.4.2 Implementations","text":"<ul> <li>Array:</li> </ul> C<pre><code>struct QueueRecord{\n    int Capacity;\n    int Front;\n    int Rear;\n    int Size;\n    ElementType *Array;\n}\n</code></pre> <p>\u53e6\u5916\u53ef\u8003\u8651\u5faa\u73af\u6570\u7ec4\u6765\u5b9e\u73b0\u961f\u5217\u7684\u7a7a\u95f4\u8282\u7701\u3002</p> <ul> <li>Linked-List: \u7c7b\u4f3c\u4e8eStack\u3002</li> </ul>"},{"location":"study/course/ds/ch3/","title":"Chap3. Trees","text":"<p>\u672c\u7ae0\u4ecb\u7ecd\u4e00\u79cd\u201d\u4e00\u5bf9\u591a\u201c\u7684\u6570\u636e\u7ed3\u6784\uff1a\u6811\u3002\u5176\u4e2d\u91cd\u70b9\u4ecb\u7ecd\u4e8c\u53c9\u6811\uff0c\u5305\u542b\u5176\u8868\u8fbe\u65b9\u5f0f\u3001\u904d\u5386\u8bbf\u95ee\u3001\u4ee5\u53ca\u6811\u884d\u751f\u51fa\u7684\u7279\u6b8a\u7ed3\u6784\uff0c\u5305\u62ec\u4e8c\u53c9\u641c\u7d22\u6811\u3001\u6700\u5c0f\u6700\u5927\u5806\u3001\u5e76\u67e5\u96c6\u7b49\u3002</p>"},{"location":"study/course/ds/ch3/#31-preliminaries","title":"3.1 Preliminaries","text":"<p>\u57fa\u672c\u77e5\u8bc6\u5728\u79bb\u6563\u6570\u5b66\u4e2d\u5df2\u6709\u6d89\u53ca\u3002</p> <p>\u6ce8\u610f\uff1a</p> <ul> <li>\u6811\u53ef\u4ee5\u662f\u7a7a\u7684</li> <li>\\(N\\)\u7ed3\u70b9\u6811\u6709\\(N-1\\)\u6761\u8fb9</li> <li>\u6811\u7ed3\u70b9\u7684degree\u7684\u5b9a\u4e49\u4e0d\u540c\u4e8e\u56fe\u3002\u6811\u7684\u7ed3\u70b9\u7684degree\u662f\u5b50\u6811\u7684\u6570\u91cf</li> <li>\u6811\u7684degree\u4e3a\u6240\u6709\u7ed3\u70b9degree\u7684\u6700\u5927\u503c</li> <li>\u7ed3\u70b9\u7684depth\u4e3aroot\u5230\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\uff1b\u7ed3\u70b9\u7684height\u4e3a\u8be5\u8282\u70b9\u5230leaf\u7684\u6700\u957f\u957f\u5ea6\u3002\u5177\u4f53\u7684\u8ba1\u6570\u60c5\u51b5\u770b\u9898\u76ee\u8981\u6c42</li> </ul>"},{"location":"study/course/ds/ch3/#32-implementation","title":"3.2 Implementation","text":"<ul> <li>List Representation:</li> </ul> <p>\u7f3a\u70b9\u662f\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u6765\u786e\u5b9a\u6bcf\u4e00\u4e2anode\u7684\u5927\u5c0f\u3002</p> <ul> <li>FirstChild-NextSibling Representation:</li> </ul> <p></p> <p>\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e24\u4e2a\u6307\u9488\u57df\uff0c\u5206\u522b\u4e3a\u5927\u513f\u5b50\u548c\u4e0b\u4e00\u4e2a\u5144\u5f1f\u3002\u8fd9\u79cd\u65b9\u5f0f\u80fd\u628a\u4efb\u4f55\u6811\u7ed3\u6784\u5316\u4e3a\u4e8c\u53c9\u6811\uff0c\u4e14\u5bf9\u4e8e\u540c\u4e00\u68f5\u6811\u80fd\u6709\u4e0d\u540c\u7684\u8868\u793a\u65b9\u5f0f\uff08children\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\uff09\u3002</p>"},{"location":"study/course/ds/ch3/#33-binary-trees","title":"3.3 Binary Trees","text":"<p>A binary tree is a tree in which no node can have more than two children.</p> <p>\u53ef\u4ee5\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u6811\uff08Expression trees/Syntax trees\uff09\u3002</p> <p>\u4e8c\u53c9\u6811\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u662f\u4e0d\u4e00\u6837\u7684\uff01</p> <p>\u6027\u8d28\uff1a</p> <ul> <li>The maximum number of nodes on level \\(i\\) is \\(2^{i-1},\\ i\\ge1\\).</li> <li>The maximum number of nodes in a binary tree of depth \\(k\\) is \\(2^{k}-1,\\ k\\ge1\\).</li> <li>For any nonempty binary tree, \\(n_{0}=n_{2}+1\\) where \\(n_{i}\\) is the number of leaf nodes of degree \\(i\\).</li> </ul>"},{"location":"study/course/ds/ch3/#331-tree-traversals","title":"3.3.1 Tree Traversals","text":"<ol> <li>Preorder</li> </ol> C<pre><code>void preorder(tree_ptr tree)\n{\n    if(tree){\n        visit(tree);\n        for(each child C of tree)\n            preorder(C);\n    }\n}\nvoid preorder_binary(tree_ptr tree)// for binary trees\n{\n    if(tree){\n        visit(tree);\n        preorder_binary(tree-&gt;leftchild);\n        preorder_binary(tree-&gt;rightchild);\n    }\n}\n</code></pre> <ol> <li>Inorder (For binary trees)</li> </ol> C<pre><code>void inorder_binary(tree_ptr tree)// for binary trees\n{\n    if(tree){\n        inorder_binary(tree-&gt;leftchild);\n        visit(tree);\n        inorder_binary(tree-&gt;rightchild);\n    }\n}\nvoid iter_inorder(tree_ptr tree)// iterative\n{\n    Stack S=CreateStack();\n    while(True)\n    {\n        for(;tree;tree=tree-&gt;leftchild)\n            Push(tree,S);\n        tree=Top(S);\n        Pop(S);\n        if(!tree) break;\n        visit(tree);\n        tree=tree-&gt;Right;\n    }\n}\n</code></pre> <ol> <li>Postorder</li> </ol> C<pre><code>void postorder(tree_ptr tree)\n{\n    if(tree){\n        for(each child C of tree)\n            postorder(C);\n        visit(tree);\n    }\n}\nvoid postorder_binary(tree_ptr tree)// for binary trees\n{\n    if(tree){\n        postorder_binary(tree-&gt;leftchild);\n        visit(tree);\n        postorder_binary(tree-&gt;rightchild);\n    }\n}\n</code></pre> <ol> <li>Levelorder</li> </ol> C<pre><code>void levelorder(tree_ptr tree)\n{\n    enqueue(tree);\n    while(queue is not empty)\n    {\n        visit(T=dequeue());\n        for(each child C of T)\n            enqueue(T);\n    }\n}\n</code></pre> <p>\u76f8\u5f53\u4e8e\u6bcf\u4e00\u5c42\u7684\u7ed3\u70b9\u90fd\u5165\u961f\uff0c\u904d\u5386\u65f6\u9009\u53d6\u7ed3\u70b9\u51fa\u961f\u5373\u53ef\u3002</p>"},{"location":"study/course/ds/ch3/#332-threaded-binary-trees","title":"3.3.2 Threaded Binary Trees","text":"<p>Rules:</p> <ol> <li>If <code>Tree-&gt;Left</code> is <code>NULL</code>, replace it with a pointer to the inorder predecessor of <code>Tree</code>.</li> <li>If <code>Tree-&gt;Right</code> is <code>NULL</code>, replace it with a pointer to the inorder sucessor of <code>Tree</code>.</li> <li>There must not be any loose threads. Therefore a threaded binary tree must have a head node of which the left child points to the first node.</li> </ol> <p>\u628a\u7a7a\u7684Leaf\u7ed3\u70b9\u5229\u7528\u8d77\u6765\uff0c\u7528\u4ee5\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u7684\u524d\u540e\u7ed3\u70b9\u3002</p> <p>\u5728\u5b58\u50a8\u7684\u65f6\u5019\u9700\u8981\u8bbe\u5b9a\u4e00\u4e2aflag\u7528\u4ee5\u6807\u5fd7\u662f\u7ebf\u7d22\u8fd8\u662f\u771f\u6b63\u7684\u5b69\u5b50\u3002</p> C<pre><code>typedef  struct  ThreadedTreeNode  *PtrTo  ThreadedNode;\ntypedef  struct  PtrToThreadedNode  ThreadedTree;\ntypedef  struct  ThreadedTreeNode {\n       int                  LeftThread;   /* if it is TRUE, then Left */\n       ThreadedTree     Left;      /* is a thread, not a child ptr.   */\n       ElementType  Element;\n       int                  RightThread; /* if it is TRUE, then Right */\n       ThreadedTree     Right;    /* is a thread, not a child ptr.   */\n}\n</code></pre>"},{"location":"study/course/ds/ch3/#34-the-search-tree-adt-binary-search-trees","title":"3.4 The Search Tree ADT (Binary Search Trees)","text":""},{"location":"study/course/ds/ch3/#341-adt","title":"3.4.1 ADT","text":"<p>A binary search tree is a binary tree. It may be empty.</p> <p>If it is not empty, it satisfies the following properties:</p> <ol> <li>Every node has a key which is an integer, and the keys are distinct.</li> <li>The keys in a nonempty left subtree must be smaller than the key in the root of the subtree.</li> <li>The keys in a nonempty right subtree must be larger than the key in the root of the subtree.</li> <li>The left and right subtrees are also binary search trees.</li> </ol> <ul> <li>Objects: A finite ordered list with zero or more elements.</li> <li>Important Operations: </li> <li>Find</li> <li>FindMin/FindMax</li> <li>Insert</li> <li>Delete</li> </ul>"},{"location":"study/course/ds/ch3/#342-implementations","title":"3.4.2 Implementations","text":"<ol> <li>Find:</li> </ol> C<pre><code>Position Find(ElementType X, SearchTree T)\n{\n    if(T==NULL) return NULL;\n    if(X&lt;T-&gt;Element) return Find(X, T-&gt;Left);\n    else if(X&gt;T-&gt;Element) return Find(X, T-&gt;Right);\n    else return T;\n}\n</code></pre> <p>\\(T(N)=S(N)=O(d)\\), where \\(d\\) is the depth of <code>X</code>.</p> <ol> <li>FindMin/FindMax:</li> </ol> C<pre><code>Position FindMin(SearchTree T)// recursive version\n{\n    if(T=NULL) return NULL;\n    else if(T-&gt;Left==NULL) return T;\n    else return FindMin(T-&gt;Left);\n}\nPosition FindMax(SearchTree T)// iterative version\n{\n    if(T!=NULL)\n        while(T-&gt;Right!=NULL)\n            T=T-&gt;right;\n    return T;\n}\n</code></pre> <p>\\(T(N)=O(d)\\).</p> <ol> <li>Insert:</li> </ol> <p>\u6839\u672c\u601d\u60f3\uff1a\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u4e00\u5c42\u4e00\u5c42\u6bd4\u5bf9\uff0c\u76f4\u5230\u627e\u5230\u7a7a\u4f4d\u6216\u8005\u5df2\u7ecf\u5b58\u5728\u5f85\u63d2\u5165\u5143\u7d20\u7ed3\u675f\u3002</p> C<pre><code>SearchTree Insert( ElementType X, SearchTree T ) \n{ \n    if ( T == NULL ) \n    { /* Create and return a one-node tree */ \n     T = malloc( sizeof( struct TreeNode ) ); \n     if ( T == NULL ) FatalError( \"Out of space!!!\" ); \n     else \n        { \n         T-&gt;Element = X; \n         T-&gt;Left = T-&gt;Right = NULL; \n        } \n    }\n    else  /* If there is a tree */\n         if ( X &lt; T-&gt;Element ) T-&gt;Left = Insert( X, T-&gt;Left ); \n else if ( X &gt; T-&gt;Element ) T-&gt;Right = Insert( X, T-&gt;Right ); \n    /* Else X is in the tree already; we'll do nothing */ \n    return  T;\n}\n</code></pre> <p>\\(T(N)=O(d)\\).</p> <ol> <li>Delete:</li> </ol> <p>\u5206\u4e3a\u51e0\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u5220\u9664\u53f6\u8282\u70b9\uff1a\u76f4\u63a5\u8bbe\u7f6e\u4e3a<code>NULL</code>\u5373\u53ef</li> <li>\u5220\u96641\u5ea6\u7ed3\u70b9\uff1a\u513f\u5b50\u8ddf\u4e0a\u6765</li> <li>\u5220\u96642\u5ea6\u7ed3\u70b9\uff1a\u5de6\u5b50\u6811\u6700\u5927\u503c\u6216\u53f3\u5b50\u6811\u6700\u5c0f\u503c\u66ff\u4ee3\u4e4b</li> </ul> C<pre><code>SearchTree Delete(ElementType X, SearchTree T)\n{\n    if(T==NULL) Error(\"NOT FOUND\");\n    else\n    {\n        if(X&lt;T-&gt;Element) T-&gt;Left=Delete(X, T-&gt;Left);\n        else if(X&gt;T-&gt;Element) T-&gt;Right=Delete(X, T-&gt;Right);\n        else if(T-&gt;Left&amp;&amp;T-&gt;Right)\n        {\n            Position temp=FindMin(T-&gt;Right);\n            T-&gt;Element=temp-&gt;Element;\n            T-&gt;Right=Delete(T-&gt;Element, T-&gt;Right);  \n        }\n        else\n        {\n            Position temp=T;\n            if(T-&gt;Left==NULL) T=T-&gt;Right;\n            else if(T-&gt;Right==NULL) T=T-&gt;Left;\n            free(temp);\n        }\n    }\n    return T;\n}\n</code></pre> <p>\\(T(N)=O(h)\\), where \\(h\\) is the height of tree.</p> <p>\u6ce8\u610f\uff1a\u5982\u679c\u5220\u9664\u6b21\u6570\u4e0d\u591a\uff0c\u53ef\u4ee5\u7528lazy deletion\u65b9\u6848\uff0c\u5373\u5c06\u9700\u8981\u5220\u9664\u7684\u7ed3\u70b9\u4ec5\u4f5c\u6807\u8bb0\u800c\u4e0d\u662f\u771f\u7684\u5220\u9664\uff0c\u904d\u5386\u65f6\u81ea\u52a8\u8df3\u8fc7\u8fd9\u4e9b\u7ed3\u70b9\u5373\u53ef\u3002</p>"},{"location":"study/course/ds/ch3/#343-average-case-analysis","title":"3.4.3 Average-Case Analysis","text":"<p>Q: Place \\(n\\) elements in a binary search tree. How high can this tree be?</p> <p>A: Depends on the order of insertion. From \\(log\\ n\\) to \\(n\\).</p>"},{"location":"study/course/ds/ch3/#35-priority-queues-heaps","title":"3.5 Priority Queues (Heaps)","text":""},{"location":"study/course/ds/ch3/#351-adt","title":"3.5.1 ADT","text":"<ul> <li>Objects: A finite ordered list with zero or more elements.</li> <li>Important Operations:</li> <li>Insert</li> <li>DeleteMin/DeleteMax</li> </ul>"},{"location":"study/course/ds/ch3/#352-implementations","title":"3.5.2 Implementations","text":"<p>\u5b9e\u9645\u4e0a\u4f7f\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\u3002\uff08\u5b8c\u5168\u4e8c\u53c9\u6811\uff09</p> <p>Defination: A binary tree with n nodes and height h is complete iff its nodes correspond to the nodes numbered from 1 to n in the perfect binary tree of height h.</p> <p>\u6bcf\u4e00\u5c42\u5148\u5360\u636e\u4ece\u5de6\u5230\u53f3\u7684\u7ed3\u70b9\u3002\u53ea\u6709\u6700\u540e\u4e00\u5c42\u662f\u6709\u53ef\u80fd\u4e0d\u6ee1\u7684\u3002</p> <p>A complete binary tree of height \\(h\\) has between \\(2^{h}\\) and \\(2^{h+1}-1\\) nodes. Thus, \\(h=\\lfloor log\\ N \\rfloor\\).</p> <p>Array Representation: <code>BT[n+1]</code> (<code>BT[0]</code> is not used).</p> <p>\u5bf9\u4e8e\u6570\u7ec4\u5f62\u5f0f\u5b58\u50a8\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5bf9\u4e8e\u4e0b\u6807\u4e3a\\(i\\)\u7684\u7ed3\u70b9\uff08\\(1\\le i \\le n\\)\uff09\uff0c\u5176\u7236\u4eb2\u8282\u70b9\u4e0b\u6807\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u4e3a\\(\\lfloor i/2 \\rfloor\\)\uff0c\u5de6\u513f\u5b50\u8282\u70b9\u4e0b\u6807\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u4e3a\\(2i\\)\uff0c\u5176\u53f3\u513f\u5b50\u8282\u70b9\u4e0b\u6807\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u4e3a\\(2i+1\\)\u3002</p> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\u80fd\u591f\u7528\u6765\u5b9e\u73b0\u6700\u5c0f\u5806/\u6700\u5927\u5806\u3002</p> <p>A min tree is a tree in which the key value in each node is no larger than the key values in its children (if any).  A min heap is a complete binary tree that is also a min tree.</p> <p>Basic operations:</p> <ol> <li>Insert:</li> </ol> C<pre><code>void Insert(ElementType X, MinHeap H)\n{\n    int i;\n    if(IsFull(H))\n        Error(\"FULL\");\n\n    for(i=++H-&gt;Size;H-&gt;Elements[i/2]&gt;X;i/=2)// H-&gt;Element[0] is the sentinel, no larger than the minimum in the heap!\n        H-&gt;Elements[i]=H-&gt;Elements[i/2];// percolate UP\n    H-&gt;Elements[i]=X;\n}\n</code></pre> <p>\\(T(N)=O(logN)\\).</p> <ol> <li>DeleteMin: \u91cd\u70b9\uff01</li> </ol> C<pre><code>ElementType DeleteMin(MinHeap H)\n{\n    if(IsEmpty(H)) Error(\"EMPTY\");\n    int parent, child;\n    ElementType MinElement, LastElement;\n    MinElement=H-&gt;Elements[1];\n    LastElement=H-&gt;Elements[H-&gt;Size--];\n\n    for(parent=1;parent*2&lt;=H-&gt;Size;parent=child)// percolate DOWN\n    {\n        child=parent*2;\n        if(child!=H-&gt;Size &amp;&amp; H-&gt;Elements[child+1]&lt;H-&gt;Elements[child])// choose if the right child or not\n            child++;\n        if(LastElement&gt;H-&gt;Elements[child])// doesn't obey the rule\n            H-&gt;Elements[parent]=H-&gt;Elements[child];\n        else break;// is the right position now\n    }\n    H-&gt;Elements[parent]=LastElement;\n    return MinElement;\n}\n</code></pre> <ol> <li>BuildHeap:</li> </ol> <ul> <li>\u91c7\u7528\u9010\u4e2a\u63d2\u5165\u7684\u65b9\u5f0f\u5efa\u5806\uff0c\\(T(N)=O(NlogN)\\)</li> <li>\u91c7\u7528\u5148\u76f4\u63a5\u653e\u7f6e\u518d\u8fdb\u884c\u8c03\u6574\u65b9\u6cd5\u5efa\u5806\uff1a\u4ece\u5012\u6570\u7b2c\u4e00\u4e2a\u6709\u5b69\u5b50\u7684\u7ed3\u70b9<code>Heap[n/2]</code>\u5f00\u59cb\uff0c\u5c06\u5176\u5b50\u6811\u8fdb\u884c\u8c03\u6574\uff08\u770b\u4f5c\u63d2\u5165\u64cd\u4f5c\uff09\uff0c\u9010\u6b65\u8c03\u6574\u81f3<code>Heap[0]</code>\uff0c\u81ea\u7136\u5efa\u6210\u5806\u3002\\(T(N)=O(N)\\)</li> </ul> <p>\u5e94\u7528\uff1a\u7ed9\\(N\\)\u4e2a\u5143\u7d20\u627e\u7b2c\\(k\\)\u5927\u7684\u5143\u7d20\u3002\u53ef\u4ee5\u91c7\u7528\u7ebf\u6027\u65f6\u95f4\u5efa\u5806\u5e76\u8c03\u7528\\(k\\)\u6b21DeleteMin\u5373\u53ef\u3002</p>"},{"location":"study/course/ds/ch3/#353-d-heaps","title":"3.5.3 d-Heaps","text":"<p>All nodes have \\(d\\) children.</p> <p></p>"},{"location":"study/course/ds/ch3/#36-the-disjoint-set-adt","title":"3.6 The Disjoint Set ADT","text":"<p>\u5e76\u67e5\u96c6\uff0c\u5b9e\u73b0\u7b49\u4ef7\u7c7b\u95ee\u9898\u3002</p>"},{"location":"study/course/ds/ch3/#361-adt","title":"3.6.1 ADT","text":"<ul> <li>Objects: Sets and their elements</li> <li>Important Operations:</li> <li>Union</li> <li>Find</li> </ul>"},{"location":"study/course/ds/ch3/#362-implementations","title":"3.6.2 Implementations","text":"<ol> <li>Union:</li> </ol> <p>\u601d\u8def\uff1a\u5c06\u4e00\u4e2a\u96c6\u5408\u6839\u8282\u70b9\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u96c6\u5408\u5b50\u6811\u7ed3\u70b9</p> <p>Union by size/by height: \u907f\u514d\u6811\u9ad8\u5ea6\u8fc7\u957f\u95ee\u9898\u3002\u9700\u8981\u5c06<code>S[root]</code>\u8bbe\u7f6e\u4e3a<code>-size</code>\u6216\u8005\u662f<code>-height</code>.</p> C<pre><code>void Union_bySize(Set S, int root1, int root2)// S[root]=-number of elements\n{\n    if(S[root2]&lt;S[root1])\n    {\n        S[root2]+=S[root1];\n        S[root1]=root2;\n    }else\n    {\n        S[root1]+=S[root2];\n        S[root2]=root1;\n    }\n}\nvoid Union_byHeight(Set S, int root1, int root2)// S[root]=-height\n{\n    if(S[root2]&lt;S[root1]) S[root1]=root2;\n    else{\n        if(S[root1]==S[root2]) S[root1]--;// height+1\n        S[root2]=root1;\n    }\n}\n</code></pre> <p>\\(N\\) union and \\(M\\) find operations is now  \\(T=O(N+Mlog_{2}N)\\).</p> <ol> <li>Find:</li> </ol> <p>\u627e\u5230\u5bf9\u5e94\u7684\u6811\u6839\u5373\u53ef\u3002</p> <p>\u8def\u5f84\u538b\u7f29\uff1a\u51cf\u5c0f\u6811\u7684\u9ad8\u5ea6\u3002\u627e\u6839\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u4e00\u4e2a\u4e2d\u95f4\u8282\u70b9\u6700\u540e\u90fd\u76f4\u63a5\u8fde\u63a5\u4e8e\u6839\u8282\u70b9\u3002</p> C<pre><code>Set Find_re(ElementType X, Set S)// recursive\n{\n    if(S[X]&lt;=0) return X;\n    else return S[X]=Find_re(S[X], S);\n}\nSet Find_it(ElementType X, Set S)// iterative\n{\n    ElementType root, trail, lead;\n    for(root=X;S[root]&gt;0;root=S[root]) ;\n    for(trail=X;trail!=root;trail=lead)\n    {\n        lead-S[trail];\n        S[trail]=root;\n    }\n    return root;\n}\n</code></pre>"},{"location":"study/course/ds/ch4/","title":"Chap4. Graph Algorithms","text":"<p>\u672c\u7ae0\u4ecb\u7ecd\u4e00\u79cd\u201d\u591a\u5bf9\u591a\u201c\u7684\u6570\u636e\u7ed3\u6784\uff1a\u56fe\u3002\u5305\u542b\u5176\u5b9a\u4e49\u548c\u4e00\u4e9b\u6027\u8d28\uff0c\u4ee5\u53ca\u5176\u4e0a\u5b58\u5728\u7684\u4e00\u4e9b\u7b97\u6cd5\uff1a\u62d3\u6251\u6392\u5e8f\u3001\u6700\u77ed\u8def\u5f84\u3001\u7f51\u7edc\u6d41\u3001\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\u7b49\u3002</p>"},{"location":"study/course/ds/ch4/#41-definitions","title":"4.1 Definitions","text":"<p>\u4e3b\u8981\u90e8\u5206\u5728\u79bb\u6563\u6570\u5b66\u4e2d\u5df2\u7ecf\u6d89\u53ca\u8fc7\u3002</p> <p>\u6ce8\u610f\uff0c\u5728\u8fd9\u91cc\uff1a</p> <ul> <li>\u7981\u6b62\u81ea\u73af\uff08self loop\uff09</li> <li>\u4e0d\u8003\u8651\u591a\u56fe\uff08\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u8d85\u8fc71\u6761\u8fb9\uff09</li> <li>\u53ef\u4ee5\u4e0d\u8fde\u901a</li> <li>degree\u4ee3\u8868\u548c\u8be5\u7ed3\u70b9\u6709\u5173\u7684\u8fb9\u6570</li> <li>Given G with \\(n\\) vertices and \\(e\\) edges, then \\(e=(\\sum\\limits_{i=0}^{n-1} d_{i})/2\\), where \\(d_{i}=\\mathrm{degree}(v_{i})\\).</li> </ul>"},{"location":"study/course/ds/ch4/#42-implementations","title":"4.2 Implementations","text":"<p>\u5b58\u50a8\u65b9\u5f0f\u4e3b\u8981\u4e24\u79cd\uff1a\u90bb\u63a5\u77e9\u9635\u548c\u90bb\u63a5\u8868\u3002</p>"},{"location":"study/course/ds/ch4/#421-adjacency-matrix","title":"4.2.1 Adjacency Matrix","text":"<p>For a graph with \\(n\\) vertices, use <code>adi_mat[n][n]</code> to store the relations between vertices.</p> <p><code>adj_mat[i][j]=1</code> if \\((v_{i},v_{j}) \\in E(G)\\), and <code>0</code> otherwise.</p> <p>\u5982\u679cG\u662f\u65e0\u5411\u56fe\uff0c\u5219\u8be5\u77e9\u9635\u4e3a\u5bf9\u79f0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u5bf9\u534a\u5b58\u50a8\uff1a\\(a_{ij}\\) \u7684\u7d22\u5f15\u662f<code>i*(i+1)/2+j</code>\uff08\u4e0b\u6807\u4ece0\u5f00\u59cb\uff09\u3002</p>"},{"location":"study/course/ds/ch4/#422-adjacency-lists","title":"4.2.2 Adjacency Lists","text":"<p>\\(N\\) \u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u5c06\u5176\u8fde\u63a5\u7684\u70b9\uff08\u5982\u679c\u662f\u6709\u5411\u56fe\u4e3a\u51fa\u70b9\uff09\u4e32\u8d77\u6765\u3002</p> <p></p> <p>\u5e76\u4e14\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u9700\u8981\u627e\u5230\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u3002\u6709\u4ee5\u4e0b\u89e3\u51b3\u65b9\u6848\uff1a</p> <ul> <li>\u52a0\u5165\u9006\u90bb\u63a5\u8868\uff1a</li> </ul> <p></p> <ul> <li>Multilists: \u4fbf\u4e8e\u6807\u8bb0\u8fb9\u3002</li> </ul> <p></p>"},{"location":"study/course/ds/ch4/#43-topological-sort","title":"4.3 Topological Sort","text":"<p>AOV Network: Action On Vertices.</p> <p>\u6838\u5fc3\u662f\u56fe\u4e2d\u5b58\u5728a-&gt;b\u7684\u5173\u7cfb\u662f\uff0c\u5f97\u5230\u7684\u62d3\u6251\u5e8f\u5217\u4e00\u5b9a\u6ee1\u8db3a\u5728b\u4e4b\u524d\u3002</p> <p>Partial order: a precedence relation which is both transitive ( i-&gt;k, k-&gt;j  THUS  i-&gt;j ) and irreflexive ( i-&gt;i is impossible ).</p> <p>A topological order is a linear ordering of the vertices of a graph such that, for any two vertices, i, j, if i is a predecessor of j in the network then i precedes j in the linear ordering.</p> <p>\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u7b97\u6cd5\u3002</p> C<pre><code>void Topsort(Graph G)\n{\n    Queue Q;\n    int cnt=0;\n    Vertex V, W;\n    for(each vertex V)\n    {\n        if(indegree[V]==0) enqueue(V,Q);\n        while(!IsEmpty(Q))\n        {\n            V=dequeue(Q);\n            TopNum[V]=++cnt;\n            for(each W adjacent to V)\n                if(--indegree[W]==0) enqueue(W,Q);\n        }\n    }\n    if(cnt!=NumberOfVertex) Error(\"GRAPH HAS A CYCLE\");\n    free(Q);\n}\n</code></pre>"},{"location":"study/course/ds/ch4/#44-shortest-path-algorithms","title":"4.4 Shortest Path Algorithms","text":""},{"location":"study/course/ds/ch4/#441-single-source-shortest-path-problem","title":"4.4.1 Single-Source Shortest-Path Problem","text":"<p>\u5206\u4e3a\u6709\u8d1f\u8fb9\u548c\u65e0\u8d1f\u8fb9\u60c5\u51b5\u3002</p> <p>\u65e0\u8d1f\u8fb9\uff1a</p> <ul> <li>Unweighted Shortest Paths: Breadth-first search</li> </ul> C<pre><code>void Unweighted(Table T)\n{\n    Queue Q;\n    Vertex V,W;\n    enqueue(S,Q);\n    while(!IsEmpty(Q))\n    {\n        V=dequeue(Q);\n        T[V].Known=True;\n        for(each W adjacent to V)\n        {\n            if(T[W].Dist==Inf)\n            {\n                T[W].Dist=T[V].Dist+1;\n                T[W].Path=V;\n                enqueue(W,Q);\n            }\n        }\n    }\n    free(Q);\n}\n</code></pre> <p>\u9700\u8981\u4e00\u4e2a<code>Path</code>\u6570\u7ec4\u6765\u4fdd\u5b58\u67d0\u4e2a\u8282\u70b9\u7684\u524d\u9a71\u8282\u70b9\u3002</p> <ul> <li>Weighted Shortest Paths: Dijkstra's Algorithm</li> </ul> <p>\u57fa\u672c\u601d\u60f3\u662f\u5efa\u7acb\u4e00\u4e2a\u96c6\u5408\u7528\u4ee5\u4fdd\u5b58\u5df2\u7ecf\u627e\u5230\u6700\u77ed\u8def\u5f84\u7684\u7ed3\u70b9\uff0c\u7528\u8fd9\u4e9b\u7ed3\u70b9\u6765\u201d\u5237\u65b0\u201c\u672a\u627e\u5230\u6700\u77ed\u8def\u5f84\u7684\u7ed3\u70b9\u3002</p> <p>\u4e0d\u9002\u7528\u4e8e\u8d1f\u8fb9\uff01</p> C<pre><code>void Dijkstra(Table T)\n{\n    Vertex V,W;\n    while(True)\n    {\n        V=smallest unknown distance vertex;\n        if(V is not found) break;\n\n        T[V].Known=True;\n        for(each W adjacent to V)\n        {\n            if(!T[W].Known)\n            {\n                if(T[V].Dist+&lt;V,W&gt;&lt;T[W].Dist)\n                {\n                    T[W].Dist=T[V].Dist+&lt;V,W&gt;;\n                    T[W].Path=V;\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Implementations:</p> <ul> <li> <p>V=smallest unknown distance vertex--simply scan the table--\\(O(|V|)\\)</p> <p>\\(T=O(|V|^{2}+|E|)\\)</p> </li> <li> <p>V=smallest unknown distance vertex--keep distances in a heap and call DeleteMin--\\(O(log|V|)\\)</p> <p>Decrease <code>T[W].Dist</code> to <code>T[V].Dist+&lt;V,W&gt;</code>:</p> <ul> <li>Method 1: DecreaseKey--\\(O(log|V|)\\), \\(T=O(|E|log|V|)\\)</li> <li>Method 2: Insert W with updated Dist into the heap--\\(T=O(|E|log|V|)\\) but requires \\(|E|\\) space.</li> </ul> </li> </ul> <p>\u6709\u8d1f\u8fb9\uff1a</p> C<pre><code>void weighted_negative(Table T)\n{\n    Queue Q;\n    Vertex V,W;\n    enquque(S,Q);\n    while(!IsEmpty(Q))\n    {\n        V=dequeue(Q);\n        for(each W adjacent to V)\n        {\n            if(T[V].Dist+&lt;V,W&gt;&lt;T[W].Dist)\n            {\n                T[W].Dist=T[V].Dist+&lt;V,W&gt;;\n                T[W].Path=V;\n                if(W is not already in Q)\n                    enqueue(W,Q);\n            }\n        }\n    }\n    free(Q);\n}\n</code></pre> <p>\u7279\u522b\u5730\uff0c\u5982\u679c\u56fe\u662f\u65e0\u73af\u56fe\uff0c\u53ef\u4ee5\u4ee5\u62d3\u6251\u5e8f\u6765\u9009\u62e9\u7ed3\u70b9\u3002</p>"},{"location":"study/course/ds/ch4/#442-all-pairs-shortest-path-problem","title":"4.4.2 All-Pairs Shortest Path Problem","text":""},{"location":"study/course/ds/ch4/#45-network-flow-problems","title":"4.5 Network Flow Problems","text":"<p>\u6bcf\u4e00\u6761\u8fb9\u4ee3\u8868\u6700\u5927\u5bb9\u91cfcapacity\u3002\u9700\u8981\u6709\u4e00\u4e2a\u56de\u6eaf\u56feresidual G\uff0c\u5176\u8fb9\u7684\u6743\u91cd\u4ee3\u8868\u7ba1\u9053\u7684\u7a7a\u95f2\u91cf\u3002</p> <p>\u4e00\u79cd\u8d2a\u5fc3\u7b97\u6cd5\uff1a</p> <ul> <li>Step 1: Find any path s-&gt;t;</li> <li>Step 2: Take the minimun edge on this path;</li> <li>Step 3: Update residual graph and remove the 0 floa edges;</li> <li>Step 4: If there is still a path s-&gt;t, goto Step 1. Else, end.</li> </ul> <p>\u8fd9\u79cd\u7b97\u6cd5\u4e0e\u5176\u9009\u53d6\u8def\u5f84\u7684\u987a\u5e8f\u6709\u5173\uff0c\u6709\u53ef\u80fd\u5f97\u4e0d\u5230\u6700\u4f18\u89e3\u3002</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a\u5f15\u5165undo\u673a\u5236\u3002\u627e\u5230\u6bcf\u6761\u8fb9\u4e4b\u540e\u5728residual graph\u4e2d\u52a0\u4e00\u6761\u53cd\u5411\u8fb9\uff0c\u6743\u91cd\u4e3a\u521a\u624d\u51cf\u6389\u7684\u6743\u91cd\u3002</p> <p>\u6b64\u65f6\\(T=O(f\\cdot|E|)\\)\uff0c\u5176\u4e2d\\(f\\)\u662f\u6700\u5927\u6d41\u5927\u5c0f\u3002</p> <p>\u6539\u8fdb\uff1a\u4e0d\u968f\u4fbf\u9009\u62e9\u8def\u5f84\u800c\u662f\u6309\u7167unweighted shortest path\u9009\u62e9\u4e00\u6761\u8def\u5f84\u3002\u6b64\u65f6\\(T=O(|E|^{2}\\cdot|V|)\\)</p>"},{"location":"study/course/ds/ch4/#46-minimun-spanning-tree","title":"4.6 Minimun Spanning Tree","text":"<p>A spanning tree of a graph G is a tree which consists of V( G ) and a subset of E( G ).</p> <p>\u6ce8\u610f\uff1a</p> <ul> <li>\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6570\u4e3a\\(|V|-1\\)</li> <li>\u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728iff\u56fe\u662f\u8fde\u901a\u7684</li> <li>\u751f\u6210\u6811\u4e2d\u4efb\u610f\u52a0\u4e00\u6761\u8fb9\uff0c\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u73af</li> </ul> <p>\u4e24\u4e2a\u7b97\u6cd5\uff1a</p> <ol> <li>Prim's Algorithm:</li> </ol> <p>\u57fa\u672c\u601d\u60f3\uff1a\u79cd\u6811\u3002</p> <p>\u4ece\u4efb\u610f\u8282\u70b9\u5f00\u59cb\u4e0d\u65ad\u6311\u9009\u5df2\u7ecf\u5728\u751f\u6210\u6811\u4e2d\u7684\u7ed3\u70b9\u548c\u4e0d\u5728\u751f\u6210\u6811\u4e2d\u7684\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8fb9\uff0c\u5c06\u5bf9\u5e94\u7684\u7ed3\u70b9\u52a0\u5165\u751f\u6210\u6811\u3002</p> <p>\u7c7b\u4f3c\u4e8eDijkstra\u7b97\u6cd5\u3002</p> <p>\\(T=O(|V|)\\).</p> <ol> <li>Kruskal's Algorithm:</li> </ol> <p>\u57fa\u672c\u601d\u60f3\uff1a\u7ef4\u6301\u4e00\u4e2a\u68ee\u6797\u3002</p> <p>\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u662f\u4e00\u68f5\u6811\uff0c\u521d\u59cb\u4e00\u5171\u6709\\(V\\)\u68f5\u6811\u3002\u4e0d\u65ad\u5730\u52a0\u8fb9\uff0c\u5bfc\u81f4\u6811\u7684\u6570\u91cf\u51cf\u5c0f\uff0c\u76f4\u81f3\u53ea\u5269\u4e0b\u4e00\u68f5\u6811\u3002</p> <p>\u628a\u8fb9\u6309\u7167\u6743\u91cd\u987a\u5e8f\u6392\u5217\u3002\u6bcf\u6b21\u9009\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u5224\u65ad\u52a0\u5165\u8fd9\u6761\u8fb9\u4f1a\u4e0d\u4f1a\u5f62\u6210\u73af\u8def\uff08\u7b49\u4ef7\u4e8e\u8fd9\u6761\u8fb9\u662f\u5426\u8fde\u63a5\u7740\u4e24\u4e2a\u4e0d\u540c\u7684\u6811\uff0c\u4e5f\u7b49\u4ef7\u4e8e\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u672c\u6765\u6ca1\u6709\u901a\u8def\uff09\uff0c\u5982\u679c\u4e0d\u4f1a\u5f62\u6210\u73af\u8def\u5219\u52a0\u5165\uff0c\u5426\u5219\u820d\u5f03\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u68f5\u6811\u5373\u53ef\u3002</p> C<pre><code>void Kruskal(Graph G)\n{   T = { } ;\n    while  ( T contains less than |V|-1 edges &amp;&amp; E is not empty ) \n    {\n        choose a least cost edge (v, w) from E ;// DeleteMin\n        delete (v, w) from E ;\n        if  ( (v, w) does not create a cycle in T )     \n         add (v, w) to T ; /*Union/Find*/\n        else     \n         discard (v, w) ;\n    }\n    if  ( T contains fewer than |V|-1 edges )\n        Error ( \u201cNo spanning tree\u201d ) ;\n}\n</code></pre>"},{"location":"study/course/ds/ch4/#47-applications-of-dfs","title":"4.7 Applications of DFS","text":"<p>DFS\u7b97\u6cd5\uff1a</p> C<pre><code>void DFS(Vertex V)\n{\n    visited[V]=True;\n    for(each W adjacent to V)\n    {\n        if(!visited[W])\n            DFS(W);\n    }\n}\n</code></pre>"},{"location":"study/course/ds/ch4/#471-components","title":"4.7.1 Components","text":""},{"location":"study/course/ds/ch4/#472-biconnectivity","title":"4.7.2 Biconnectivity","text":"<p>\u51e0\u4e2a\u5b9a\u4e49\uff1a</p> <ul> <li>Articulation Point: \u5173\u952e\u70b9\u3002\u628a\u8fd9\u4e2a\u70b9\u4ee5\u53ca\u4e0e\u5176\u76f8\u5173\u7684\u8fb9\u5220\u6389\uff0c\u56fe\u81f3\u5c11\u591a\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002</li> <li>Biconnected Graph: \u53cc\u8fde\u901a\u56fe\u3002\u6ca1\u6709\u5173\u952e\u70b9\u7684\u56fe\u3002</li> <li>Biconnected Component: \u6700\u5927\u53cc\u8fde\u901a\u5b50\u56fe\u3002</li> </ul> <p>\u5bfb\u627e\u8054\u901a\u65e0\u5411\u56feG\u7684\u53cc\u8fde\u901a\u90e8\u5206\u7b97\u6cd5\uff1a</p> <ol> <li>DFS\u6784\u5efaG\u7684\u751f\u6210\u6811</li> <li>\u627e\u5230G\u7684\u5173\u952e\u70b9</li> </ol>"},{"location":"study/course/ds/ch4/#473-euler-circuits","title":"4.7.3 Euler Circuits","text":"<p>\u51e0\u4e2a\u5b9a\u4e49\uff1a</p> <ul> <li>Euler tour: \u65e0\u91cd\u590d\u5730\u7ecf\u8fc7\u6240\u6709\u8fb9\u3002\u6761\u4ef6\u662f\uff1a\u56fe\u8fde\u901a\uff0c\u53ea\u6709\u4e24\u4e2a\u70b9\u6709\u5947\u6570\u4e2adegree\uff0c\u5e76\u628a\u8d77\u59cb\u70b9\u8bbe\u7f6e\u4e3a\u5176\u4e2d\u4e00\u4e2a\u5947\u6570\u70b9\u3002</li> <li>Euler circuit: \u65e0\u91cd\u590d\u5730\u7ecf\u8fc7\u6240\u6709\u8fb9\u4e14\u56de\u5230\u539f\u70b9\u3002\u6761\u4ef6\u662f\uff1a\u56fe\u8fde\u901a\uff0c\u4e14\u6bcf\u4e2a\u70b9degree\u90fd\u4e3a\u5076\u6570\u3002</li> <li>Hamilton Cycle: \u65e0\u91cd\u590d\u5730\u7ecf\u8fc7\u6240\u6709\u70b9\u3002</li> </ul>"},{"location":"study/course/ds/ch5/","title":"Chap5. Sorting","text":"<p>\u672c\u7ae0\u8282\u4ecb\u7ecd\u6392\u5e8f\u7b97\u6cd5\u3002</p>"},{"location":"study/course/ds/ch5/#51-preliminaries","title":"5.1 Preliminaries","text":"<ul> <li>\u7edf\u4e00\u63a5\u53e3\uff1a<code>void X_Sort(ElementType A[], int N)</code></li> <li>\u53ea\u8003\u8651\u5185\u6392\uff08\u5185\u5b58\u80fd\u88c5\u4e0b\uff09</li> <li>\u57fa\u4e8e\u3010\u6bd4\u8f83\u3011\u7684\u6392\u5e8f</li> </ul>"},{"location":"study/course/ds/ch5/#52-insertion-sort","title":"5.2 Insertion Sort","text":"<p>\u6597\u5730\u4e3b\u6478\u724c\u65b9\u5f0f\u6392\u5e8f\u3002</p> C<pre><code>void insertion_sort(ElementType A[], int N)\n{\n    for(int i=1;i&lt;N;i++)\n    {\n        ElementType temp=A[i];\n        for(int j=i; j&gt;0 &amp;&amp; A[j-1]&gt;temp ;j--)\n            A[j]=A[j-1];\n        A[j]=temp;\n    }\n}\n</code></pre> <p>Worst case: Reverse order, \\(T(N)=O(N^{2})\\).</p> <p>Best case: Sorted order, \\(T(N)=O(N)\\).</p>"},{"location":"study/course/ds/ch5/#53-a-lower-bound-for-simple-sorting-algorithms","title":"5.3 A Lower Bound for Simple Sorting Algorithms","text":"<p>\\(T(N,I)=O(I+N)\\)\uff0c\u5176\u4e2d\\(I\\)\u662f\u5e8f\u5217\u4e2d\u9006\u5e8f\u5bf9\u7684\u6570\u91cf\u3002</p>"},{"location":"study/course/ds/ch5/#54-shell-sort","title":"5.4 Shell Sort","text":"<p>\u5b9a\u4e49\u589e\u91cf\u5e8f\u5217\\(h_{1}&lt;h_{2}&lt;\\cdots,h_{t}\\)\uff0c\\((h_{1}=1)\\)</p> C<pre><code>void Shellsort(ElementType A[], int N)\n{\n    int d;\n    for(d=N/2;d&gt;0;d/=2)\n    {\n        for(int i=d;i&lt;N;i++)\n        {\n            ElementType temp=A[i];\n            for(int j=i;j&gt;=d;j-=d)\n            {\n                if(temp&lt;A[j-d])\n                    A[j]=A[j-d];\n                else break;\n                A[j]=temp;\n            }\n        }\n    }\n}\n</code></pre> <p>Worst Case: \\(\\Theta(N^{2})\\).</p> <p>\u6539\u8fdb\uff1aHibbard's Increment Sequence\uff0c\u6700\u574f\u60c5\u51b5\u4e3a\\(\\Theta(N^{1.5})\\)\uff0c\u5e73\u5747\u60c5\u51b5\u4e3a\\(\\Theta(N^{1.25})\\).</p>"},{"location":"study/course/ds/ch5/#55-heap-sort","title":"5.5 Heap Sort","text":"<p>\u5efa\u5806\uff0c\u968f\u540e\u4e0d\u65ad\u8c03\u7528DeleteMax/Min\u3002</p> C<pre><code>void heapsort(ElementType A[], int N)\n{\n    for(int i=N/2;i&gt;=0;i--)\n        percdown(A,i,N);\n    for(int i=N-1;i&gt;0;i--)\n    {\n        swap(&amp;A[0],&amp;A[i]);\n        percdown(A,0,i);\n    }\n}\n</code></pre> <p>\\(T(N)=O(NlogN)\\)</p> <p>\u5b9e\u9645\u8868\u73b0\u4e0d\u5982\u4f7f\u7528Sedgewick\u589e\u91cf\u5e8f\u5217\u7684\u5e0c\u5c14\u6392\u5e8f\u3002</p>"},{"location":"study/course/ds/ch5/#56-merge-sort","title":"5.6 Merge Sort","text":""},{"location":"study/course/ds/ch5/#561-merge","title":"5.6.1 Merge","text":"<p>Merge\u662f\u4e00\u79cd\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5e8f\u5217\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u5e8f\u5217\u7684\u64cd\u4f5c\u3002</p> C<pre><code>void merge(ElementType A[], ElementType temp[], int left, int right, int rightend)\n{\n    int leftend=right-1;\n    int temppos=left;\n    while(left&lt;=leftend &amp;&amp; right&lt;rightend)\n    {\n        if(A[left]&lt;=A[right])\n            temp[tempppos++]=A[left++];\n        else\n            temp[tempppos++]=A[right++];\n    }\n    while(left&lt;=leftend) temp[temppos++]=A[left++];\n    while(right&lt;=rightend) temp[tempppos++]=A[right++];\n\n    for(int i=0;i&lt;rightend-left+1;i++)\n        A[i]=temp[i];\n}\n</code></pre>"},{"location":"study/course/ds/ch5/#562-mergesort","title":"5.6.2 MergeSort","text":"C<pre><code>void Msort(ElementType A[], ElementType temp[], int left, int right)\n{\n    if(left&lt;right)\n    {\n        int center=(left+right)/2;\n        Msort(A, temp, left, center);\n        Msort(A, temp, cneter+1, right);\n        merge(A, temp, left, center+1, right);\n    }\n}\n</code></pre>"},{"location":"study/course/ds/ch5/#563-analysis","title":"5.6.3 Analysis","text":"<p>\\(T(N)=T(N+NlogN)=T(NlogN)\\)</p> <p>\u5e76\u4e14\u9700\u8981\\(O(N)\\)\u7684\u7ebf\u6027\u5b58\u50a8\u7a7a\u95f4\u3002</p> <p>\u53ef\u4ee5\u6539\u9020\u6210\u8fed\u4ee3\u7248\u672c\uff0c\u6bcf\u76f8\u90bb\u4e24\u6bb5\u505amerge\u64cd\u4f5c\u3002</p> <p></p>"},{"location":"study/course/ds/ch5/#57-quick-sort","title":"5.7 Quick Sort","text":"<p>The fastest known sorting algorithm in practice.</p>"},{"location":"study/course/ds/ch5/#571-algorithm","title":"5.7.1 Algorithm","text":"C<pre><code>void quicksort(ElementType A[], int N)\n{\n    if(N&lt;2) return ;\n    choose pivot;\n    Partition S={A[]\\pivot} into :\n        A1={a|a&lt;=pivot}, A2={a|a&gt;=pivot};\n    A=quicksort(A1)+{pivot}+quicksort(A2);\n}\n</code></pre> <p>Best case: \\(T(N)=O(NlogN)\\)</p> <p>The pivot is placed at the right place once and for all. Pivot \u7b2c\u4e00\u6b21\u6392\u5e8f\u540e\u5c31\u4e00\u76f4\u5728\u5176\u6b63\u786e\u4f4d\u7f6e\u4e0a\u4e86\u3002</p>"},{"location":"study/course/ds/ch5/#572-picking-the-pivot","title":"5.7.2 Picking the Pivot","text":"<p><code>Pivot=median(left,center,right)</code></p> C<pre><code>ElementType median3(ElementType A[], int left, int right)\n{\n    int center=(left+right)/2;\n    if(A[left]&gt;A[center]) swap(&amp;A[left],&amp;A[center]);\n    if(A[left]&gt;A[right]) swap(&amp;A[left],&amp;A[right]);\n    if(A[center]&gt;A[right]) swap(&amp;A[center],&amp;A[right]);\n    /* A[left]&lt;A[center]&lt;A[right] */\n    swap(&amp;A[center],&amp;A[right-1]);\n    return A[right-1];\n}\n</code></pre>"},{"location":"study/course/ds/ch5/#573-implement","title":"5.7.3 Implement","text":"C<pre><code>void quicksort(ElementType A[], int left, int right, int cutoff)\n{\n    if(cutoff&lt;=right-left)\n    {\n        int pivot=median3(A,left,right);\n        int i=left; int j=right-1;\n        while(1)\n        {\n            while(A[++i]&lt;pivot) {};\n            while(A[--j]&gt;pivot) {};\n            if(i&lt;j)\n                swap(&amp;A[i],&amp;A[j]);\n            else break;\n        }\n        swap(&amp;A[i],&amp;A[right-1]);\n        quicksort(A,left,i-1);\n        quicksort(A,i+1,right);\n    }\n    else\n        insertion_sort(A+left,right-left+1);\n}\n</code></pre>"},{"location":"study/course/ds/ch5/#574-analysis","title":"5.7.4 Analysis","text":"<p>Worst case: \\(T(N)=O(N^{2})\\)</p> <p>Best case: \\(T(N)=O(NlogN)\\)</p> <p>Average case: \\(T(N)=O(NlogN)\\)</p>"},{"location":"study/course/ds/ch5/#58-a-general-lower-bound-for-sorting","title":"5.8 A General Lower Bound for Sorting","text":"<p>\u5bf9\u4e8e\u57fa\u4e8e\u3010\u6bd4\u8f83\u3011\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u5b9a\u662f\\(\\Omega(NlogN)\\)\uff0c\u4e0d\u80fd\u518d\u5c0f\u4e86\u3002</p>"},{"location":"study/course/ds/ch5/#59-sorting-large-structures","title":"5.9 Sorting Large Structures","text":"<p>\u91c7\u7528\u975e\u76f4\u63a5\u6392\u5e8f\uff1aTable sort\uff0c\u5bf9\u6307\u9488\u6392\u5e8f\u3002</p>"},{"location":"study/course/ds/ch5/#510-bucket-sort-and-radix-sort","title":"5.10 Bucket Sort and Radix Sort","text":""},{"location":"study/course/ds/ch5/#5101-bucket-sort","title":"5.10.1 Bucket Sort","text":"<p>\u4e00\u5206\u4e00\u6bb5\u8868\u53ef\u4ee5\u79cd\u8fd9\u79cd\u65b9\u5f0f\u6392\u5e8f\u3002</p> <p>\u4e0d\u57fa\u4e8e\u3010\u6bd4\u8f83\u3011\uff0c\u800c\u662f\u4f9d\u636e\u6570\u636e\u7684\u8303\u56f4\uff08\u8981\u6c42\u4e3a\u6709\u754c\u6574\u6570\uff09\u6784\u5efa\u5bf9\u5e94\u7684\\(N\\)\u4e2abucket\uff0c\u9047\u5230\u4e00\u4e2a\u76f4\u63a5\u653e\u8fdb\u5bf9\u5e94\u7684<code>A[bucket]</code>\u91cc\u9762\u5373\u53ef\u3002</p> <p>\u7ebf\u6027\u65f6\u95f4\u5373\u53ef\u5b8c\u6210\u6392\u5e8f\u3002\\(T(N)=O(N)\\)</p>"},{"location":"study/course/ds/ch5/#5102-radix-sort","title":"5.10.2 Radix Sort","text":"<p>\u6839\u636e\u6570\u636e\u7279\u5b9a\u4f4d\u4e0a\u7684\u6570\u636e\u5206\u7c7b\u6392\u5e8f\uff0c\u79f0\u4e3a\u57fa\u6570\u6392\u5e8f\u3002</p> <p>\u4f8b\u5982LSD\u6392\u5e8f\uff1a\u5148\u6392\u4e2a\u4f4d\uff1a0~9\uff1b\u518d\u653e\u5341\u4f4d\u3001\u767e\u4f4d\u7b49\u7b49\uff0c\u76f4\u5230\u90fd\u6392\u597d\u3002</p> <p></p> <p>MSD\u540c\u7406\uff0c\u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb\u3002</p>"},{"location":"study/course/ds/ch6/","title":"Chap6. Hashing","text":"<p>\u672c\u7ae0\u8282\u4ecb\u7ecd\u57fa\u672c\u7684\u6563\u5217\u8868\u6982\u5ff5\u4ee5\u53caHash\u503c\u7b97\u6cd5\u3002</p>"},{"location":"study/course/ds/ch6/#61-general-idea","title":"6.1 General Idea","text":"<p>\u6838\u5fc3\u601d\u60f3\u662f\u627e\u5230\u4e00\u4e2a\u6620\u5c04\\(f(x)\\)\uff0c\u5176\u4e2d\\(x\\)\u662f\u6240\u9700\u8981\u5206\u7c7b\u7684\u5143\u7d20\uff0c\u5c06\u5176\u6620\u5c04\u5230\u7b80\u5355\u800c\u53c8\u5bb9\u6613\u8ba1\u7b97\u7684Hash\u503c\u4e2d\u3002</p> <p>\u5c06{}\u6784\u6210\u7684\u96c6\u5408\u79f0\u4e3a\u6563\u5217\u8868\uff08Symbol Table\uff09\u3002 <p>ADT:</p> <ul> <li>Objects: A set of name-attribute pairs, where the names are unique</li> <li>Important Operations:</li> <li>Find</li> <li>Insert</li> <li>Delete</li> </ul> <p>Hash Tables:</p> <p></p> <p>\u6ce8\u610f\u4e0a\u56fe\u4e2didentifier density\u548cloading density\u7684\u5b9a\u4e49\uff01</p> <p>\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\uff1a</p> <ol> <li>Collision\uff1a\\(i_{1}\\neq i_{2}\\)\uff0c\u4f46\u662f\\(f(i_{1})=f(i_{2})\\)\u3002\u8bbe\u8ba1hash\u51fd\u6570\u7684\u65f6\u5019\u9700\u8981\u5c3d\u91cf\u907f\u514d\u8fd9\u79cd\u60c5\u51b5</li> <li>Overflow\uff1a\u67d0\u4e2abucket\u5df2\u7ecf\u6ee1\u4e86\uff0c\u6765\u4e86\u4e00\u4e2a\u65b0\u5143\u7d20\u3002</li> </ol> <p>\u5f53\\(s=1\\)\u7684\u65f6\u5019\uff0ccollision\u4e0eoverflow\u540c\u65f6\u53d1\u751f\u3002</p> <p>\u6ca1\u6709Overflow\u7684\u60c5\u51b5\u4e0b\uff1a\\(T_{\\mathrm{search}}=T_{\\mathrm{insert}}=T_{\\mathrm{delete}}=O(1)\\)</p>"},{"location":"study/course/ds/ch6/#62-hash-function","title":"6.2 Hash Function","text":"<p>\u6620\u5c04\u51fd\u6570\u7684\u51e0\u4e2a\u6027\u8d28\uff1a</p> <ol> <li>\u4fbf\u4e8e\u8ba1\u7b97\u3001\u6700\u5927\u7a0b\u5ea6\u89c4\u907fcollision\u95ee\u9898</li> <li>\u4e0d\u80fd\u6709\u504f\u91cd\uff0c\u5373\\(\\forall x,\\ \\forall i\\)\uff0c\u90fd\u6709\\(\\mathrm{Probability}(f(x)=i)=1/b\\)\u3002\u8fd9\u88ab\u79f0\u4f5cuniform hash function\u3002</li> </ol> <p>\u4f8b\u5982\u53d6\\(f(x)=x\\% \\mathrm{Tablesize}\\)\uff0cTablesize\u6700\u597d\u53d6\u8d28\u6570\u3002</p>"},{"location":"study/course/ds/ch6/#63-separate-chaining","title":"6.3 Separate Chaining","text":"<p>\u51b2\u7a81\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u5f0f\u3002\u6bcf\u4e2ahash\u503c\u8bbe\u7f6e\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709collision\u7684\u95ee\u9898\u4e86\u3002</p> <p>\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u67e5\u627e\u4e0d\u662f\\(O(1)\\)\u65f6\u95f4\uff0chash\u7684\u4f18\u52bf\u65e0\u6cd5\u4f53\u73b0\u4e86\u3002</p>"},{"location":"study/course/ds/ch6/#64-open-addressing","title":"6.4 Open Addressing","text":"<p>\u51b2\u7a81\u7684\u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u5f0f\u3002\u9009\u62e9\u5176\u4ed6\u7684\u7a7a\u4f4d\u586b\u8865\u3002</p> <ol> <li>Linear Probing:</li> </ol> <p>\u9047\u5230\u51b2\u7a81\u5c31+1\u4f4d\uff0c\u8fd8\u51b2\u7a81\u5c31+2\u4f4d......\u4ee5\u6b64\u7c7b\u63a8\u3002\u6ea2\u51fa\u4e86\u5faa\u73af\u56de\u6765\uff0c\u53d6tablesize\u7684\u4f59\u6570\u3002</p> <p>\u7f3a\u70b9\u662f\u5bb9\u6613\u9020\u6210\u805a\u5806\u95ee\u9898\u3002</p> <ol> <li>Quadratic Probing:</li> </ol> <p>\u9047\u5230\u51b2\u7a81+1^2\u4f4d\uff0c\u8fd8\u51b2\u7a81-1^2\u4f4d\uff0c\u8fd8\u51b2\u7a81+2^2=4\u4f4d\uff0c\u518d\u51b2\u7a81-2^2=-4\u4f4d......\u4ee5\u6b64\u7c7b\u63a8\u3002\u6ea2\u51fa\u4e86\u540c\u6837\u5faa\u73af\u56de\u6765\u3002</p> <p>\u7f3a\u70b9\u662f\u53ef\u80fd\u9020\u6210\u6709\u7a7a\u4f4d\u4f46\u603b\u662f\u586b\u4e0d\u6ee1\u7684\u60c5\u51b5\u3002\u4f46\u662f\u5f53tablesize\u6ee1\u8db3\\(4k+3\\)\u7684\u8d28\u6570\u5f62\u5f0f\u7684\u65f6\u5019\u53ef\u4ee5\u586b\u6ee1\u3002</p> <ol> <li>Double Hashing:</li> </ol> <p>\\(f(x)=i*\\mathrm{hash}_{2}(x)\\)\uff0chash_2\u4ee3\u8868\u53e6\u4e00\u4e2ahash\u51fd\u6570\uff0c\u8981\u6c42\u4e0d\u6052\u7b49\u4e8e0.</p> <p>\u4e00\u822c\u91c7\u7528\\(\\mathrm{hash}_{2}(x)=R-(x\\% R)\\)\uff0c\u5176\u4e2d\\(R\\)\u662f\u4e00\u4e2a\u5c0f\u4e8eTableSize\u7684\u8d28\u6570\u3002</p>"},{"location":"study/course/ds/ch6/#65-rehashing","title":"6.5 Rehashing","text":"<p>Q: When to rehash?</p> <p>A:</p> <ol> <li>As soon as the table is half full</li> <li>When an insertion fails</li> <li>When the table reaches a certain load factor</li> </ol>"},{"location":"study/course/fpa/final-exam-re/","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840","text":"<p>\u8fd9\u91cc\u662f\u7b14\u8005\u4fee\u8bfb\u6d59\u6c5f\u5927\u5b66 2022-2023 \u79cb\u51ac\u5b66\u671f\u300a\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840\u300b\u8bfe\u7a0b\u7684\u671f\u672b\u8003\u8bd5\u5f00\u5377\u8d44\u6599\u6574\u7406\u3002</p> <p>\u6559\u5e08\uff1a\u7fc1\u607a</p>"},{"location":"study/course/fpa/final-exam-re/#escape-char","title":"Escape Char/\u9003\u9038\u5b57\u7b26","text":"char meaning <code>\\b</code> back position/\u56de\u9000 <code>\\t</code> next table stop/\u5236\u8868 <code>\\\"</code> double quote/\u53cc\u5f15\u53f7 <code>\\'</code> single quote/\u5355\u5f15\u53f7 <code>\\n</code> new line/\u6362\u884c <code>\\r</code> return the carriage/\u56de\u8f66"},{"location":"study/course/fpa/final-exam-re/#code","title":"Code/\u5e38\u7528\u4ee3\u7801","text":""},{"location":"study/course/fpa/final-exam-re/#gcdeuclids","title":"GCD\uff08Euclid's\uff09/\u6700\u5927\u516c\u7ea6\u6570","text":"<p>Loop:</p> C<pre><code>while(1)\n{\n    int r=a%b;\n    a=b;\n    b=r;\n}\n</code></pre> <p>Recursion:</p> C<pre><code>int gcd(int x,int y)\n{\n    if(y==0)\n        return x;\n    return gcd(y,x%y);\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#yang-hui-triangle","title":"Yang Hui Triangle/\u6768\u8f89\u4e09\u89d2","text":"C<pre><code>int main(void)\n{\n    int n;\n    scanf(\"%d\",&amp;n);\n    for(int i=0;i&lt;=n;i++)\n    {\n        for(int j=0;j&lt;=i;j++)\n        {\n            printf(\"%9d\",Yang(i,j));\n        }\n        printf(\"\\n\");\n    }\n}\n\nint Yang (int a,int b)\n{\n    if(b==a||b==0)\n        return 1;\n    else\n        return Yang(a-1,b-1)+Yang(a-1,b);\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#hanoi","title":"Hanoi/\u9012\u5f52\u6c49\u8bfa\u5854","text":"C<pre><code>int main(void)\n{\n    char a, b, c;\n    int n;\n    scanf(\"%d %c %c %c\", &amp;n, &amp;a, &amp;b, &amp;c);\n    func(n, a, b, c);\n    return 0;\n}\n\nvoid func(int n, char first, char target, char pro)\n{\n    if (n &gt; 0)\n    {\n        func(n - 1, first, pro, target); \n        printf(\"%d: %c -&gt; %c\\n\", n, first, target);\n        func(n - 1, pro, target, first);\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#quick-power","title":"Quick Power/\u5feb\u901f\u5e42\u8ba1\u7b97","text":"<p>Loop:</p> C<pre><code>int power(int x, int n)\n{\n    int res=1;// \u7ed3\u679c\u4ece1\u5f00\u59cb\n    while(n)\n    {\n        if(n%2)// \u6700\u540e\u4e00\u4f4d\u4e3a1\uff0c\u5c31\u9700\u8981\u628a\u5f53\u524d\u7684\u5e42\u4e58\u5230\u7ed3\u679c\u4e2d\n        {\n            res*=x;\n        }\n        x*=x;// \u4e00\u76f4\u7d2f\u4e58\n        n/=2;// \u53bb\u6389\u6700\u540e\u4e00\u4f4d\n    }\n}\n</code></pre> <p>Recursion:</p> C<pre><code>int power(int x, int n)\n{\n    if(n==0)\n        return 1;\n    else if(n%2==1)\n        return x*power(x,n-1);\n    else\n    {\n        int t=power(x,n/2);\n        return t*t;\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#least-prefix-hash","title":"Least Prefix/\u6700\u5c0f\u7f16\u53f7--\u7b80\u6613Hash","text":"C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int hash[100000]={0};// create hash array\n    int n;\n    scanf(\"%d\",&amp;n);\n    int a[n];\n\n    for(int i=0;i&lt;n;i++)\n    {\n        scanf(\"%d\",&amp;a[i]);// record the number\n    }\n\n    int res;// least prefix\n    for(int i=0;i&lt;n;i++)\n    {\n        if(hash[a[i]]==0)\n        {\n            hash[a[i]]==1;\n            res=i;\n        }\n    }\n\n    printf(\"%d\",res);\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#simple-hash-sorthash","title":"Simple Hash Sort/\u7b80\u6613Hash\u6392\u5e8f","text":"C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int hash[100000]={0};\n    int n;\n    scanf(\"%d\",&amp;n);\n\n    for(int i=0;i&lt;n;i++)\n    {\n        int temp;\n        scanf(\"%d\",&amp;temp);\n        hash[temp]++;\n    }\n\n    for(int i=0;i&lt;100000;i++)\n    {\n        if(hash[i])\n        {\n            for(int j=0;j&lt;hash[i];j++)\n            {\n                printf(\"%d \",i);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#stack-operate","title":"Stack Operate/\u6808\u64cd\u4f5c","text":"C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int n;\n    int x;\n    scanf(\"%d\",&amp;n);\n    int a[20003]={0};\n    int p=0;\n    int q=0;\n    for(int i=1;i&lt;=n;i++)\n    {\n        scanf(\"%d\",&amp;x);\n        if(x==1)\n        {\n            scanf(\"%d\",&amp;a[++p]);\n            q=p;\n        }\n        if(x==0)\n        {\n            if(p==0)\n                printf(\"invalid\\n\");\n            else\n                printf(\"%d\\n\",a[p--]);\n        }\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#queue-operate","title":"Queue Operate/\u961f\u5217\u64cd\u4f5c","text":"C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int n;\n    int x,y,p,q;\n    scanf(\"%d\",&amp;n);\n    int a[20001]={0};\n    p=0;\n    q=0;\n    for (int i=0;i&lt;n;i++)\n    {\n        scanf(\"%d\",&amp;x);\n        if(x==1)\n        {\n            scanf(\"%d\",&amp;y);\n            a[p++]=y;\n        }\n        else \n        {\n            if(p==q)\n                printf(\"invalid\\n\");\n            if(p!=q)\n                printf(\"%d\\n\",a[q++]);\n        }\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#valid-stack","title":"Valid Stack/\u6709\u6548\u6808\u5e8f\u5217","text":"C<pre><code>for(int i=0;i&lt;n;i++)\n{\n    if(a[i]&gt;m+i)// m\u4e3a\u6808\u5bb9\u91cf\n        index=0;\n}\n\nfor(int i=0;i&lt;n-2;i++)\n{\n    if(a[i]&gt;a[i+2]&amp;&amp;a[i+2]&gt;a[i+1])\n        index=0;\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#binary-search","title":"Binary Search/\u4e8c\u5206\u641c\u7d22","text":"C<pre><code>int search(int key, int a[], int begin, int end)\n{\n    int ret=-1;\n    if(begin&lt;end)\n    {\n        int mid=(begin+end)/2;\n        if(key&lt;a[mid])\n            ret=search(key, a, begin, mid-1);\n        else if(key&gt;a[mid])\n            ret=search(key, a, mid+1, end);\n        else\n            ret=mid;\n    }\n    else\n        printf(\"FAILED\\n\");\n    return ret;\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#selection-sort","title":"Selection Sort/\u9009\u62e9\u6392\u5e8f","text":"C<pre><code>void selection_sort(int a[], int n)\n{\n    for(int i=0;i&lt;n-1;i++)\n    {\n        int index=i;\n        for(int j=i;j&lt;n;j++)\n        {\n            if(a[index]&gt;a[j])\n                index=j;\n        }\n        int temp=a[index];\n        a[index]=a[i];\n        a[i]=temp;\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#bubble-sort","title":"Bubble Sort/\u5192\u6ce1\u6392\u5e8f","text":"C<pre><code>void bubble_sort(int a[], int n)\n{\n    for(int i=n-1;i&gt;0;i--)\n    {\n        for(int j=0;j&lt;i;j++)\n        {\n            if(a[j]&gt;a[j+1])\n            {\n                int temp=a[j];\n                a[j]=a[j+1];\n                a[j+1]=temp;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#insertion-sort","title":"Insertion Sort/\u63d2\u5165\u6392\u5e8f","text":"C<pre><code>void insertionSort(int arr[], int n)\n{\n    for(int i=1;i&lt;n;i++)\n    {\n        int ele=arr[i];\n        int j=i-1;\n        while(j&gt;=0&amp;&amp;ele&lt;arr[j])\n        {\n            arr[j+1]=arr[j];\n            j--;\n            arr[j+1]=ele;\n        }\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#merge-sort","title":"Merge Sort/\u5f52\u5e76\u6392\u5e8f","text":"C<pre><code>void MergeSort(int a[], int lo, int hi)\n{\n    int md;\n    if (lo &lt; hi)\n    {\n        md = (lo + hi) / 2;\n        MergeSort(a, lo, md);\n        MergeSort(a, md + 1, hi);\n        merge(a, lo, md, hi);\n    }\n}\n\nvoid merge(int a[], int lo, int md, int hi)\n{\n    int i = lo, j = md + 1, k = lo;\n    int b[MAXN + 3];\n\n    while (k &lt; hi)\n    {\n        if (i &lt;= md &amp;&amp; j &lt;= hi)\n        {\n            if (a[i] &lt;= a[j])\n                b[k++] = a[i++];\n            else\n                b[k++] = a[j++];\n        }\n        else\n            break;\n    }\n\n    while (i &lt;= md)\n        b[k++] = a[i++];\n    while (j &lt;= hi)\n        b[k++] = a[j++];\n\n    for (k = lo; k &lt;= hi; k++)\n        a[k] = b[k];\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#quick-sort","title":"Quick Sort/\u5feb\u901f\u6392\u5e8f","text":""},{"location":"study/course/fpa/final-exam-re/#lomuto","title":"Lomuto","text":"C<pre><code>void quicksort_lomuto(int a[], int low, int high)\n{\n    int pivot;\n    if(low&lt;high)\n    {\n        pivot=partition(a, low, high);\n        quicksort_lomuto(a, low, pivot-1);\n        quicksort_lomuto(a, pivot+1, high);\n    }\n}\n\nint partition(int a[], int low, int high)\n{\n    int pi=a[high];\n    int i=low;\n    for(int j=low;j&lt;=high;j++)\n    {\n        if(a[j]&lt;pi)\n        {\n            int t=a[i];\n            a[i]=a[j];\n            a[j]=t;\n            i++;\n        }\n    }\n    int k=a[i];\n    a[i]=a[high];\n    a[high]=k;\n\n    return i;\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#hoare","title":"Hoare","text":"C<pre><code>void quicksort_hoare(int a[], int low, int high)\n{\n    int pivot;\n    if(low&lt;high)\n    {\n        pivot=partition(a, low, high);\n        quicksort_hoare(a, low, pivot-1);\n        quicksort_hoare(a, pivot+1, high);\n    }\n}\n\nint partition(int a[], int low, int high)\n{\n    int pi=a[low+(high-low)/2];\n    int i=low-1;\n    int j=high+1;\n    while(1)\n    {\n        do{\n            i++;\n        }while(a[i]&lt;pi);\n        do{\n            j--;\n        }while(a[j]&gt;pi);\n\n        if(i&lt;=j)\n            return j;\n        int t=a[i];\n        a[i]=a[j];\n        a[j]=t;\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#qsort","title":"qsort","text":"C<pre><code>#include &lt;stdlib.h&gt;\nvoid qsort(void *base, size_t nel, size_t width, int (*compar) (const void *, const void *));\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#stringhc","title":"string.h/C\u8bed\u8a00\u5e93\u5b57\u7b26\u4e32\u51fd\u6570","text":"C<pre><code>#include &lt;string.h&gt;\n\nsize_t strlen(const char *s);\nint strcmp(const char *s1, const char *s2);\nchar *strcpy(char *restrict dst, const char *restrict src);\nchar *strcat(char *restrict s1, const char *restrict s2);\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#linked-list","title":"Linked List/\u94fe\u8868\u5e38\u7528\u64cd\u4f5c","text":"C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct _node\n{\n    int value;\n    struct _node *next;\n} Node;\n\ntypedef struct\n{\n    Node *head;\n    Node *tail;\n} List;\n\nList list_create()\n{\n    List list = {NULL, NULL};\n    return list;\n}\n\nvoid list_free(List *list)\n{\n    for(Node *p=list-&gt;head;p;)\n    {\n        Node *q=p-&gt;next;\n        free(p);\n        p=q;\n    }\n    list-&gt;head=list-&gt;tail=NULL;\n}\n\nvoid list_append(List *list, int v)\n{\n    Node *p = (Node *)malloc(sizeof(Node));\n    p-&gt;value = v;\n    p-&gt;next = NULL;\n    if (list-&gt;tail)\n    {\n        list-&gt;tail-&gt;next = p;\n        list-&gt;tail = p;\n    }\n    else\n    {\n        list-&gt;head = list-&gt;tail = p;\n    }\n}\n\nvoid list_insert(List *list, int v)\n{\n    Node *p = (Node *)malloc(sizeof(Node));\n    p-&gt;value = v;\n    p-&gt;next = list-&gt;head;\n    list-&gt;head = p;\n    if (list-&gt;tail == NULL)\n    {\n        list-&gt;tail = p;\n    }\n}\n\nint list_find(List *list, int v)\n{\n    int cnt = 0;\n    Node *p = list-&gt;head;\n    while (p)\n    {\n        if (p-&gt;value == v)\n        {\n            return cnt;\n        }\n        cnt++;\n        p = p-&gt;next;\n    }\n    return -1;\n}\n\nvoid list_remove(List *list, int v)\n{\n    for (Node *p = list-&gt;head, *q = NULL; p;)\n    {\n        if (p-&gt;value == v)\n        {\n            Node *r = p-&gt;next;\n            if (q)\n            {\n                q-&gt;next = p-&gt;next;\n            }\n            else\n            {\n                list-&gt;head = p-&gt;next;\n            }\n            if (p == list-&gt;tail)\n            {\n                list-&gt;tail = q;\n            }\n            free(p);\n            p = r;\n        }\n        else\n        {\n            q = p;\n            p = p-&gt;next;\n        }\n    }\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#mystr","title":"mystr/\u81ea\u5236\u5b57\u7b26\u4e32\u51fd\u6570","text":"C<pre><code>int mylen(const char *s)\n{\n    int cnt=0;\n    while(s[cnt])\n    {\n        cnt++;\n    }\n    return cnt;\n}\n\nint mycmp(const char *s1, const char *s2)\n{\n    while( *s1==*s2 &amp;&amp; *s1!='\\0' )\n    {\n        s1++;\n        s2++;\n    }\n    return *s1-*s2;\n}\n\nchar *mycpy(char *restrict dst, const char *restrict src)\n{\n    int idx=0;\n    while(src[idx])\n    {\n        dst[idx++]=src[idx++];\n    }\n    dst[idx]='\\0';\n    return dst;\n}\n\nchar *mycat(char *restrict s1, const char *restrict s2)\n{\n    //\u8c03\u7528mycpy\u5373\u53ef\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#_2","title":"\u9ad8\u7cbe\u5ea6\u52a0\u6cd5","text":"C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main()\n{\n    char a[101],b[101],res[101];\n    scanf(\"%s\",a);\n    scanf(\"%s\",b);\n    int len=strlen(a)&gt;strlen(b)?  strlen(a):strlen(b);\n    int up=0;\n\n    for(int i=0;i&lt;len;i++)\n    {\n        int aelem,belem;\n        if(i&lt;strlen(a))\n            aelem=a[strlen(a)-i-1]-'0';\n        else\n            aelem=0;\n\n        if(i&lt;strlen(b))\n            belem=b[strlen(b)-i-1]-'0';\n        else\n            belem=0;\n\n        int add=aelem+belem;\n\n        res[i]=add%10+up;\n        up=add/10;\n    }\n\n    if(up)\n        printf(\"1\");\n    for(int i=len-1;i&gt;=0;i--)\n        printf(\"%d\",res[i]);\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#quick-powermod","title":"Quick Power(MOD)","text":"C<pre><code>int Power(int N, int k)\n{\n    N%=MOD;\n    int res=1;\n    while(k)\n    {\n        if(k%2)\n        {\n            res*=N;\n            res%=MOD;\n        }\n        N*=N;\n        N%=MOD;\n        k/=2;\n    }\n    return res;\n}\n</code></pre>"},{"location":"study/course/fpa/final-exam-re/#_3","title":"\u53cc\u5934\u53cc\u5411\u94fe\u8868","text":"C<pre><code>typedef struct _Node {\n    int value;\n    struct _Node *next;\n    struct _Node *prev;\n} Node;\n\ntypedef struct {\n    Node *head;\n    Node *tail;\n} List;\n\nvoid list_print(List *list)\n{\n    for ( Node *p = list-&gt;head; p; p=p-&gt;next ) {\n        printf(\"%d \", p-&gt;value);\n    }\n    printf(\"\\n\");\n}\n\nvoid list_clear(List *list)\n{\n    for ( Node *p = list-&gt;head, *q; p; p=q ) {\n        q = p-&gt;next;\n        free(p);\n    }\n}\n\nvoid list_append(List *list, int value)\n{\n    Node *p = (Node *)malloc(sizeof(Node));\n    p-&gt;value = value;\n    if (list-&gt;tail)\n    {\n        p-&gt;prev = list-&gt;tail;\n        list-&gt;tail-&gt;next = p;\n        list-&gt;tail = p;\n        p-&gt;next = NULL;\n    }\n    else\n    {\n        list-&gt;tail = list-&gt;head = p;\n        p-&gt;next = p-&gt;prev = NULL;\n    }\n}\n\nvoid list_remove(List *list, int value)\n{\n    for (Node *p = list-&gt;head; p;)\n    {\n        if (p-&gt;value == value)\n        {\n            Node *n = p-&gt;next;\n            if (p-&gt;prev)\n                p-&gt;prev-&gt;next = p-&gt;next;\n            else\n                list-&gt;head = p-&gt;next;\n\n            if (p-&gt;next)\n                p-&gt;next-&gt;prev = p-&gt;prev;\n            else\n                list-&gt;tail = p-&gt;prev;\n\n            free(p);\n            p = n;\n        }\n        else\n            p = p-&gt;next;\n    }\n}\n</code></pre> <p>\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\uff01</p>"},{"location":"study/self/css/","title":"CSS \u5b66\u4e60\u7b14\u8bb0","text":"<p>\u672c\u6587\u6863\u662f\u672c\u4eba\u5b66\u4e60 CSS \u65f6\u7684\u7b14\u8bb0\uff0c\u6559\u7a0b\u4e3a\u7fc1\u607a\u8001\u5e08\u7684\u300aCSS \u5165\u95e8\u300b\u3002</p>"},{"location":"study/self/css/lec1/","title":"Lecture 1: CSS \u7b80\u4ecb","text":"<p>CSS \u7684\u4e2d\u6587\u540d\u5b57\u53eb\u505a\u5c42\u53e0\u6837\u5f0f\u8868\u3002\u6211\u4eec\u4e00\u822c\u5c31\u76f4\u63a5\u8bf4 CSS\u3002</p> <p>HTML \u8868\u8fbe\u7ed3\u6784\uff0cCSS \u8868\u8fbe\u6837\u5f0f\uff0cJavaScript \u8868\u8fbe\u884c\u4e3a\u3002 \u6837\u5f0f\u548c\u5185\u5bb9/\u7ed3\u6784\u662f\u5206\u79bb\u7684\u3002</p> <p>CSS \u662f\u4e00\u79cd\u7528\u6765\u63a7\u5236\u7f51\u9875\u6837\u5f0f\u7684\u8bed\u8a00\u3002\u5b83\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00\uff0c\u7528\u6765\u63cf\u8ff0\u7f51\u9875\u7684\u5c55\u793a\u6548\u679c\u3002CSS \u4e0e HTML \u4e00\u6837\uff0c\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00\uff0c\u4f46\u662f\u5b83\u662f\u4e00\u79cd\u6837\u5f0f\u6807\u8bb0\u8bed\u8a00\u3002</p>"},{"location":"study/self/css/lec1/#css","title":"CSS \u653e\u5728\u54ea\u91cc\uff1f","text":"<p>\u6709\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\uff1a</p> <ul> <li>\u72ec\u7acb\u7684 CSS \u6587\u4ef6\uff0c\u7136\u540e\u518d\u5f15\u5165\u5230 HTML \u6587\u4ef6\u4e2d\u3002</li> <li>\u5185\u5d4c\u5728 HTML \u6587\u4ef6\u7684\u5168\u5c40\u6837\u5f0f\u4e2d\uff0c\u5373\u5728<code>&lt;head&gt;</code>\u6807\u7b7e\u4e2d\u7684<code>&lt;style&gt;</code>\u6807\u7b7e\u4e2d\u3002</li> <li>\u5185\u5d4c\u5728 HTML \u6587\u4ef6\u7684\u5c40\u90e8\u6837\u5f0f\u4e2d\uff0c\u4f8b\u5982\u6bb5\u843d\u6807\u7b7e<code>&lt;p&gt;</code>\u4e2d\u7684<code>style</code>\u5c5e\u6027\u3002</li> </ul>"},{"location":"study/self/css/lec2/","title":"Lecture 2: \u80cc\u666f\u6837\u5f0f","text":""},{"location":"study/self/css/lec2/#_1","title":"\u989c\u8272\u586b\u5145","text":""},{"location":"study/self/css/lec2/#_2","title":"\u9884\u8bbe\u989c\u8272","text":"<p>\u4f7f\u7528 <code>background-color</code> \u5c5e\u6027\u53ef\u4ee5\u8bbe\u7f6e\u80cc\u666f\u989c\u8272\u3002</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body style=\"background-color: lightblue;\"&gt;\n  &lt;h1&gt;\u8fd9\u662f\u4e00\u4e2a\u6807\u9898&lt;/h1&gt;\n  &lt;p&gt;\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\u3002&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u89c4\u5b9a\u4e86\u6b64 HTML \u6587\u4ef6\u7684\u6b63\u6587\u80cc\u666f\u989c\u8272\u4e3a\u6d45\u84dd\u8272\u3002</p> <p>\u9664\u4e86\u8fd9\u79cd\u76f4\u63a5\u5bf9\u989c\u8272\u547d\u540d\u7684\u65b9\u5f0f\uff0c\u8fd8\u6709\u4e00\u4e9b\u81ea\u5b9a\u4e49\u989c\u8272\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\uff1a</p>"},{"location":"study/self/css/lec2/#rgb","title":"\u5341\u516d\u8fdb\u5236 RGB \u989c\u8272","text":"<p>\u4f7f\u7528\u5341\u516d\u8fdb\u5236\u7684 RGB \u503c\u6765\u5b9a\u4e49\u989c\u8272\u3002</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body style=\"background-color: #ff0000;\"&gt;\n  &lt;h1&gt;\u8fd9\u662f\u4e00\u4e2a\u6807\u9898&lt;/h1&gt;\n  &lt;p&gt;\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\u3002&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u8fd9\u4e00\u6bb5\u89c4\u5b9a\u4e86\u6b64 HTML \u6587\u4ef6\u7684\u6b63\u6587\u80cc\u666f\u989c\u8272\u4e3a\u7ea2\u8272\u3002</p>"},{"location":"study/self/css/lec2/#rgb_1","title":"\u5341\u8fdb\u5236 RGB \u989c\u8272","text":"<p>\u4f7f\u7528\u5341\u8fdb\u5236\u7684 RGB \u503c\u6765\u5b9a\u4e49\u989c\u8272\u3002</p> HTML<pre><code>...\n&lt;body style=\"background-color: rgb(255, 0, 0);\"&gt;\n...\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u89c4\u5b9a\u4e86\u6b64 HTML \u6587\u4ef6\u7684\u6b63\u6587\u80cc\u666f\u989c\u8272\u4e3a\u7ea2\u8272\u3002</p>"},{"location":"study/self/css/lec2/#rgba","title":"RGBA \u989c\u8272","text":"<p>\u591a\u4e86\u4e00\u4e2a alpha \u901a\u9053\uff0c\u7528\u6765\u5b9a\u4e49\u900f\u660e\u5ea6\u3002alpha \u901a\u9053\u7684\u503c\u662f 0 \u5230 1 \u4e4b\u95f4\u7684\u6570\u5b57\u3002</p> HTML<pre><code>...\n&lt;body style=\"background-color: rgba(255, 0, 0, 0.3);\"&gt;\n...\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u89c4\u5b9a\u4e86\u6b64 HTML \u6587\u4ef6\u7684\u6b63\u6587\u80cc\u666f\u989c\u8272\u4e3a\u7ea2\u8272\uff0c\u900f\u660e\u5ea6\u4e3a 0.3\u3002</p>"},{"location":"study/self/css/lec2/#_3","title":"\u56fe\u7247\u586b\u5145","text":""},{"location":"study/self/css/lec2/#_4","title":"\u80cc\u666f\u56fe\u7247","text":"<p>\u4f7f\u7528 <code>background-image</code> \u5c5e\u6027\u53ef\u4ee5\u8bbe\u7f6e\u80cc\u666f\u56fe\u7247\u3002</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body style=\"background-image: url('paper.gif');\"&gt;\n  &lt;h1&gt;\u8fd9\u662f\u4e00\u4e2a\u6807\u9898&lt;/h1&gt;\n  &lt;p&gt;\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\u3002&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u89c4\u5b9a\u4e86\u6b64 HTML \u6587\u4ef6\u7684\u6b63\u6587\u80cc\u666f\u56fe\u7247\u4e3a <code>paper.gif</code>\u3002\u6ce8\u610f\u8fd9\u91cc\u7684 url \u6307\u7684\u662f\u56fe\u7247\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684 CSS \u662f\u5185\u8054\u7684\uff0c\u6240\u4ee5\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e HTML \u6587\u4ef6\u7684\u3002</p>"},{"location":"study/self/css/lec2/#_5","title":"\u91cd\u590d\u65b9\u5f0f","text":"<p>\u5982\u679c\u8bf4\u56fe\u7247\u7684\u5927\u5c0f\u6bd4\u6d4f\u89c8\u5668\u663e\u793a\u90e8\u5206\u8fd8\u5c0f\u7684\u8bdd\uff0c\u9ed8\u8ba4\u4f1a\u81ea\u52a8\u91cd\u590d\u3002\u5982\u679c\u4e0d\u60f3\u91cd\u590d\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>background-repeat</code> \u5c5e\u6027\u3002</p> HTML<pre><code>...\n&lt;body style=\"background-image: url('paper.gif'); background-repeat: no-repeat;\"&gt;\n...\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u89c4\u5b9a\u4e86\u6b64 HTML \u6587\u4ef6\u7684\u6b63\u6587\u80cc\u666f\u56fe\u7247\u4e3a <code>paper.gif</code>\uff0c\u5e76\u4e14\u4e0d\u91cd\u590d\u3002</p> <p>\u8fd8\u6709\u4e00\u4e9b\u91cd\u590d\u65b9\u5f0f\uff0c\u4f8b\u5982 <code>repeat-x</code>\uff0c<code>repeat-y</code>\uff0c<code>repeat</code>\u3002\u5176\u4e2d <code>repeat-x</code> \u8868\u793a\u6c34\u5e73\u91cd\u590d\uff0c<code>repeat-y</code> \u8868\u793a\u5782\u76f4\u91cd\u590d\uff0c<code>repeat</code> \u8868\u793a\u6c34\u5e73\u548c\u5782\u76f4\u90fd\u91cd\u590d\u3002</p>"},{"location":"study/self/css/lec2/#_6","title":"\u80cc\u666f\u56fe\u7247\u4f4d\u7f6e","text":"<p>\u4f7f\u7528 <code>background-position</code> \u5c5e\u6027\u53ef\u4ee5\u8bbe\u7f6e\u80cc\u666f\u56fe\u7247\u7684\u4f4d\u7f6e\u3002</p> HTML<pre><code>...\n&lt;body style=\"background-image: url('paper.gif'); background-position: right top;\"&gt;\n...\n</code></pre> <p>\u8fd9\u91cc\u89c4\u5b9a\u4e86\u56fe\u7247\u5728\u53f3\u4e0a\u89d2\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u4f4d\u7f6e\uff0c\u4f8b\u5982 <code>left top</code>\uff0c<code>left center</code>\uff0c<code>left bottom</code>\uff0c<code>right top</code>\uff0c<code>right center</code>\uff0c<code>right bottom</code>\uff0c<code>center top</code>\uff0c<code>center center</code>\uff0c<code>center bottom</code> \u7b49\u3002</p> <p>\u8fd8\u53ef\u4ee5\u4f7f\u7528\u50cf\u7d20\u503c\u6216\u767e\u5206\u6bd4\u503c\u6765\u8bbe\u7f6e\u4f4d\u7f6e\uff0c\u4f8b\u5982 <code>10px 20px</code>\uff0c<code>50% 50%</code>\u3002</p>"},{"location":"study/self/css/lec2/#_7","title":"\u56fa\u5b9a\u80cc\u666f\u56fe\u7247","text":"<p>\u4f7f\u7528 <code>background-attachment</code> \u5c5e\u6027\u53ef\u4ee5\u8bbe\u7f6e\u80cc\u666f\u56fe\u7247\u662f\u5426\u56fa\u5b9a\u3002</p> HTML<pre><code>...\n&lt;body style=\"background-image: url('paper.gif'); background-attachment: fixed;\"&gt;\n...\n</code></pre> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709 <code>scroll</code>\uff0c<code>local</code> \u7b49\u503c\u3002</p>"},{"location":"study/self/html/","title":"HTML \u5b66\u4e60\u7b14\u8bb0","text":"<p>\u672c\u6587\u6863\u662f\u672c\u4eba\u5b66\u4e60 HTML \u65f6\u7684\u7b14\u8bb0\uff0c\u6559\u7a0b\u4e3a\u7fc1\u607a\u8001\u5e08\u7684\u300aHTML \u5165\u95e8\u300b\u3002</p>"},{"location":"study/self/html/lec1/","title":"Lecture 1\uff1aHTML \u7b80\u4ecb","text":""},{"location":"study/self/html/lec1/#1-html","title":"1 \u4ec0\u4e48\u662f HTML","text":"<p>HTML \u7684\u5168\u79f0\u662f HyperText Markup Language\uff0c\u5373\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\u3002\u5b83\u662f\u4e00\u79cd\u7528\u4e8e\u521b\u5efa\u7f51\u9875\u7684\u6807\u8bb0\u8bed\u8a00\uff0c\u7531\u4e00\u7cfb\u5217\u7684\u5143\u7d20\u7ec4\u6210\uff0c\u8fd9\u4e9b\u5143\u7d20\u53ef\u4ee5\u7528\u6765\u5305\u88f9\u6587\u672c\u3001\u56fe\u7247\u3001\u89c6\u9891\u7b49\u5185\u5bb9\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4 HTML \u63cf\u8ff0\u9875\u9762\u91cc\u9762\u7684\u5185\u5bb9\u3002</p>"},{"location":"study/self/html/lec1/#2","title":"2 \u51c6\u5907\u5b66\u4e60\u7528\u7684\u8f6f\u4ef6","text":"<p>\u5206\u4e3a\u4e24\u90e8\u5206\uff1a</p> <ul> <li>\u6587\u672c\u7f16\u8f91\u5668</li> <li>\u6d4f\u89c8\u5668</li> </ul> <p>\u4f60\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u8bb0\u4e8b\u672c\u6765\u5199 HTML\uff0c\u4f46\u662f\u6ce8\u610f\u4fdd\u5b58\u683c\u5f0f\u4e3a .html\u3002</p> .htm \u662f\u4ec0\u4e48\uff1f <p>.htm \u662f HTML \u7684\u7f29\u5199\uff0c\u662f\u65e9\u671f\u6d4f\u89c8\u5668\u5bf9\u6587\u4ef6\u540d\u957f\u5ea6\u7684\u9650\u5236\uff0c\u73b0\u5728\u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528\u3002\u8fd9\u4e24\u4e2a\u4e1c\u897f\u662f\u4e00\u6837\u7684\u3002</p> <p>\u73b0\u5728\u53ef\u4ee5\u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684 HTML \u9875\u9762\uff1a</p> HTML<pre><code>\u6211\u7684\u7b2c\u4e00\u4e2a HTML \u9875\u9762\n</code></pre> <p>\u4fdd\u5b58\u4e4b\u540e\u7528\u6d4f\u89c8\u5668\u6253\u5f00\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u9875\u9762\u4e86\u3002</p>"},{"location":"study/self/html/lec1/#3-html","title":"3 HTML \u6587\u4ef6\u6846\u67b6","text":"<p>\u4f5c\u4e3a\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00\uff0c\u9700\u8981\u6709\u80fd\u591f\u88ab\u8bc6\u522b\u4e3a\u3010\u6807\u8bb0\u3011\u7684\u7b26\u53f7\uff0c\u5728\u8fd9\u91cc\u662f\u5c16\u62ec\u53f7 <code>&lt;&gt;</code>\u3002</p> <p>\u4f8b\u5982\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728\u90a3\u53e5\u8bdd\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u6807\u8bb0\uff1a</p> HTML<pre><code>&lt;html&gt;\n\u6211\u7684\u7b2c\u4e00\u4e2a HTML \u9875\u9762\n</code></pre> <p>\u8fd9\u5bf9\u5c16\u62ec\u53f7\u4e2d\u7684\u4e1c\u897f\u5c31\u662f\u6807\u8bb0\uff0c\u4e0d\u4f1a\u5728\u9875\u9762\u4e0a\u663e\u793a\u51fa\u6765\u3002\u5c16\u62ec\u53f7\u4e2d\u7684 html \u4ee3\u8868\u7740\uff1a\u4ece\u8fd9\u91cc\u5f00\u59cb\u662f\u4e00\u4e2a HTML \u9875\u9762\u3002</p> <p>\u65e2\u7136\u6709\u5f00\u59cb\uff0c\u90a3\u4e48\u5c31\u6709\u7ed3\u675f\uff1a</p> HTML<pre><code>&lt;html&gt;\n\u6211\u7684\u7b2c\u4e00\u4e2a HTML \u9875\u9762\n&lt;/html&gt;\n</code></pre> <p>\u7edd\u5927\u591a\u6570 HTML \u7684\u6807\u8bb0\u90fd\u957f\u6210\u8fd9\u4e2a\u6837\u5b50\uff0c\u6709\u5f00\u59cb\u6709\u7ed3\u675f\u3002</p> <p>\u9664\u4e86 html \u6807\u8bb0\u5916\uff0cHTML \u9875\u9762\u8fd8\u7ecf\u5e38\u6709\u4ee5\u4e0b\u4e24\u79cd\u6807\u8bb0\uff1a</p> <ul> <li>head \u6807\u8bb0\uff1a\u7528\u4e8e\u5b58\u653e\u4e00\u4e9b\u9875\u9762\u7684\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u6807\u9898\u3001\u5b57\u7b26\u96c6\u7b49\u914d\u7f6e\uff0c\u4e0d\u662f\u6b63\u6587\u5185\u5bb9\u3002</li> <li>body \u6807\u8bb0\uff1a\u7528\u4e8e\u5b58\u653e\u9875\u9762\u7684\u4e3b\u8981\u5185\u5bb9\u3002</li> </ul> HTML<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;\u6211\u7684\u9875\u9762&lt;/title&gt;\n    &lt;meta charset=utf-8&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    \u8fd9\u662f\u6211\u7684\u7b2c\u4e00\u4e2a HTML \u9875\u9762\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>&lt;title&gt;</code> \u6807\u8bb0\u7528\u4e8e\u8bbe\u7f6e\u9875\u9762\u7684\u6807\u9898\uff0c\u8fd9\u4e2a\u6807\u9898\u4f1a\u663e\u793a\u5728\u6d4f\u89c8\u5668\u7684\u6807\u7b7e\u9875\u4e0a\u3002</p> <p><code>&lt;meta charset=utf-8&gt;</code> \u6807\u8bb0\u7528\u4e8e\u8bbe\u7f6e\u9875\u9762\u7684\u5b57\u7b26\u96c6\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u4e3a utf-8\uff0c\u8868\u793a\u4f7f\u7528 UTF-8 \u7f16\u7801\u3002</p> <p>\u6211\u4eec\u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u4fdd\u5b58\u4e3a .html \u6587\u4ef6\uff0c\u7136\u540e\u7528\u6d4f\u89c8\u5668\u6253\u5f00\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u7b80\u5355\u7684 HTML \u9875\u9762\u4e86\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u5bf9\u4e8e HTML 5 \u6765\u8bf4\uff0c\u9700\u8981\u5728\u6587\u6863\u524d\u9762\u52a0\u4e0a\u4e00\u884c</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n</code></pre> <p>\u4ee5\u8868\u793a\u8be5\u6587\u6863\u4f7f\u7528 HTML 5 \u89c4\u8303\u3002</p>"},{"location":"study/self/html/lec2/","title":"Lecture 2\uff1a\u6bb5\u843d\u4e0e\u57fa\u672c\u683c\u5f0f","text":""},{"location":"study/self/html/lec2/#1","title":"1 \u6bb5\u843d","text":"<p>\u5982\u679c\u4e0d\u5206\u6bb5\u843d\u7684\u8bdd\uff0cHTML \u9875\u9762\u5c31\u4f1a\u53d8\u6210\u4e00\u5927\u5768\u6587\u5b57\uff0c\u4e0d\u5229\u4e8e\u9605\u8bfb\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6bb5\u843d\u6807\u8bb0\u3002\u8fd9\u4e2a\u6807\u8bb0\u5c31\u662f <code>p</code> \u6807\u8bb0\uff08paragraph\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d\u3002&lt;/p&gt;\n&lt;p&gt;\u8fd9\u662f\u53e6\u4e00\u4e2a\u6bb5\u843d\u3002&lt;/p&gt;\n</code></pre> <p>\u5728\u4fdd\u5b58\u540e\u7528\u6d4f\u89c8\u5668\u6253\u5f00\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u6bb5\u843d\u4e86\u3002</p> <p>\u81f3\u4e8e\u6bb5\u843d\u4e4b\u95f4\u7a7a\u591a\u5927\u8ddd\u79bb\u3001\u6bb5\u843d\u7684\u6587\u5b57\u5927\u5c0f\u3001\u989c\u8272\u7b49\u6837\u5f0f\uff0c\u8fd9\u4e9b\u4e0d\u662f HTML \u6240\u5173\u5fc3\u7684\uff0c\u800c\u662f CSS \u7684\u4e8b\u60c5\u3002CSS \u662f\u7528\u6765\u63a7\u5236\u9875\u9762\u6837\u5f0f\u7684\u3002</p> <p><code>p</code> \u6807\u8bb0\u662f\u6bb5\u843d\u7684\u610f\u601d\u3002\u5982\u679c\u60f3\u5728\u4e00\u4e2a\u6bb5\u843d\u4e0a\u6362\u884c\uff0c\u9700\u8981\u4f7f\u7528 <code>br</code> \u6807\u8bb0\uff08break\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u884c\u6587\u5b57\u3002&lt;br&gt;\u8fd9\u662f\u53e6\u4e00\u884c\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u6ce8\u610f\uff0c<code>br</code> \u6807\u8bb0\u662f\u4e00\u4e2a\u81ea\u95ed\u5408\u6807\u8bb0\uff0c\u4e0d\u9700\u8981\u7ed3\u675f\u6807\u8bb0\u3002\u5f53\u7136\u5b83\u4e5f\u53ef\u4ee5\u88ab\u5199\u6210 <code>&lt;br /&gt;</code>\u3002</p> <p>\u66f4\u8fdb\u4e00\u6b65\uff0c\u5982\u679c\u8fd9\u7bc7\u6587\u7ae0\u6709\u4e00\u4e2a\u6807\u9898\uff0c\u5982\u4f55\u51f8\u663e\u5176\u5730\u4f4d\u5462\uff1f\u9700\u8981\u4f7f\u7528\u6807\u9898\u6807\u8bb0 <code>h1</code> \u5230 <code>h6</code>\u3002</p> HTML<pre><code>&lt;h1&gt;\u8fd9\u662f\u4e00\u4e2a\u4e00\u7ea7\u6807\u9898&lt;/h1&gt;\n&lt;h2&gt;\u8fd9\u662f\u4e00\u4e2a\u4e8c\u7ea7\u6807\u9898&lt;/h2&gt;\n&lt;h3&gt;\u8fd9\u662f\u4e00\u4e2a\u4e09\u7ea7\u6807\u9898&lt;/h3&gt;\n&lt;h4&gt;\u8fd9\u662f\u4e00\u4e2a\u56db\u7ea7\u6807\u9898&lt;/h4&gt;\n&lt;h5&gt;\u8fd9\u662f\u4e00\u4e2a\u4e94\u7ea7\u6807\u9898&lt;/h5&gt;\n&lt;h6&gt;\u8fd9\u662f\u4e00\u4e2a\u516d\u7ea7\u6807\u9898&lt;/h6&gt;\n</code></pre> <p>\u6807\u9898\u5355\u72ec\u5360\u636e\u4e00\u884c\uff0c\u6240\u4ee5\u4e0d\u9700\u8981 <code>br</code> \u6807\u8bb0\u3002</p> <p>\u5bf9\u4e8e\u6392\u7248\u5bf9\u9f50\u6765\u8bf4\uff0c\u4e2d\u6587\u5b57\u7b26\u548c\u6807\u70b9\u4e00\u4e2a\u5b57\u5c31\u53ef\u4ee5\u89c6\u4f5c\u4e00\u4e2a\u201c\u8bcd\u201d\uff0c\u4f46\u662f\u5bf9\u4e8e\u82f1\u6587\u6765\u8bf4\uff0c\u82e5\u6ca1\u6709\u7279\u6b8a\u6807\u8bb0\uff0c\u5355\u8bcd\u4f1a\u5728\u540c\u4e00\u884c\u663e\u793a\u5b8c\u6574\uff0c\u53ef\u80fd\u9020\u6210\u9875\u9762\u53f3\u8fb9\u7684\u4e0d\u7f8e\u89c2\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 <code>wbr</code> \u6807\u8bb0\uff08word break\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u4e2a\u5f88\u957f\u7684\u82f1\u6587\u5355\u8bcd\uff1a&lt;wbr&gt;supercalifragilisticexpialidocious&lt;/wbr&gt;&lt;/p&gt;\n</code></pre> <p>\u5728 HTML 5 \u4e2d\uff0c\u5bf9\u4e8e\u76f8\u90bb\u7684\u6807\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a <code>hgroup</code> \u6807\u8bb0\u5c06\u5b83\u4eec\u5305\u88f9\u8d77\u6765\uff0c\u8868\u793a\u8fd9\u4e9b\u6807\u9898\u662f\u4e00\u4e2a\u7ec4\u5408\u3002</p> HTML<pre><code>&lt;hgroup&gt;\n  &lt;h1&gt;\u8fd9\u662f\u4e00\u4e2a\u4e00\u7ea7\u6807\u9898&lt;/h1&gt;\n  &lt;h2&gt;\u8fd9\u662f\u4e00\u4e2a\u4e8c\u7ea7\u6807\u9898&lt;/h2&gt;\n&lt;/hgroup&gt;\n</code></pre>"},{"location":"study/self/html/lec2/#2","title":"2 \u5b57\u4f53\u6837\u5f0f","text":"<p>\u7c97\u4f53\uff1a<code>b</code> \u6807\u8bb0\uff08bold\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;b&gt;\u7c97\u4f53&lt;/b&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u659c\u4f53\uff1a<code>i</code> \u6807\u8bb0\uff08italic\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;i&gt;\u659c\u4f53&lt;/i&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u4ed6\u4eec\u4e5f\u662f\u53ef\u4ee5\u5d4c\u5957\u7684\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;b&gt;\u7c97\u4f53&lt;i&gt;\u7c97\u4f53\u659c\u4f53&lt;/i&gt;\u7c97\u4f53&lt;/b&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u7b49\u5bbd\u5b57\u4f53\uff1a<code>tt</code> \u6807\u8bb0\uff08teletype\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;tt&gt;\u7b49\u5bbd\u5b57\u4f53&lt;/tt&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u5c0f\u53f7\u5b57\u4f53\uff1a<code>small</code> \u6807\u8bb0\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;small&gt;\u5c0f\u53f7\u5b57\u4f53&lt;/small&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e9b\u5de5\u4f5c\u4e5f\u53ef\u4ee5\u7528 CSS \u6765\u5b8c\u6210\uff0c\u4f46\u662f\u8fd9\u4e9b\u6807\u8bb0\u5728 HTML \u4e2d\u4e5f\u662f\u53ef\u4ee5\u4f7f\u7528\u7684\u3002</p> <p>\u5220\u9664\u7ebf\u548c\u4e0b\u5212\u7ebf\uff1a<code>del</code> \u6807\u8bb0\uff08delete\uff09\u548c <code>ins</code> \u6807\u8bb0\uff08insert\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;del&gt;\u5220\u9664\u7ebf&lt;/del&gt;\u6587\u5b57\u3002&lt;/p&gt;\n&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;ins&gt;\u4e0b\u5212\u7ebf&lt;/ins&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u8fd9\u4e0d\u662f\u683c\u5f0f\uff0c\u800c\u662f\u7ed3\u6784\u3002\u5220\u9664\u7ebf\u548c\u4e0b\u5212\u7ebf\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u8bed\u4e49\uff0c\u6240\u4ee5\u9700\u8981\u7528\u4e0d\u540c\u7684\u6807\u8bb0\u6765\u8868\u793a\u3002</p> <p>\u8fd8\u6709\u4e00\u79cd\u8868\u793a\u8fc7\u65f6\u7684\u6807\u8bb0\uff0c<code>s</code> \u6807\u8bb0\uff08strikethrough\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;s&gt;\u8fc7\u65f6\u7684\u5220\u9664\u7ebf&lt;/s&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u4e0a\u6807\u4e0e\u4e0b\u6807\uff1a<code>sup</code> \u6807\u8bb0\uff08superscript\uff09\u548c <code>sub</code> \u6807\u8bb0\uff08subscript\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5 H&lt;sub&gt;2&lt;/sub&gt;O\u3002&lt;/p&gt;\n&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5 x&lt;sup&gt;2&lt;/sup&gt;\u3002&lt;/p&gt;\n</code></pre> <p>\u7279\u522b\u5f3a\u8c03\uff08HTML 5\uff09\uff1a<code>mark</code> \u6807\u8bb0\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;mark&gt;\u7279\u522b\u5f3a\u8c03&lt;/mark&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre>"},{"location":"study/self/html/lec2/#3","title":"3 \u77ed\u8bed\u683c\u5f0f","text":"<p>\u5f3a\u8c03\uff1a<code>em</code> \u6807\u8bb0\uff08emphasis\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;em&gt;\u5f3a\u8c03&lt;/em&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u91cd\u8981\uff1a<code>strong</code> \u6807\u8bb0\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;strong&gt;\u91cd\u8981&lt;/strong&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u5b9a\u4e49\uff1a<code>dfn</code> \u6807\u8bb0\uff08definition\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;dfn&gt;\u5b9a\u4e49&lt;/dfn&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u4ee3\u7801\uff1a<code>code</code> \u6807\u8bb0\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;code&gt;\u4ee3\u7801&lt;/code&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u4f8b\u5b50\u4ee3\u7801\uff1a<code>samp</code> \u6807\u8bb0\uff08sample\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;samp&gt;\u4f8b\u5b50\u4ee3\u7801&lt;/samp&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u952e\u76d8\u8f93\u5165\uff1a<code>kbd</code> \u6807\u8bb0\uff08keyboard\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;kbd&gt;\u952e\u76d8\u8f93\u5165&lt;/kbd&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u53d8\u91cf\uff1a<code>var</code> \u6807\u8bb0\uff08variable\uff09\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;var&gt;\u53d8\u91cf&lt;/var&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>cite \u5f15\u7528\uff1a<code>cite</code> \u6807\u8bb0\u3002</p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5&lt;cite&gt;\u5f15\u7528&lt;/cite&gt;\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e9b\u6807\u8bb0\u4e0d\u4f1a\u6362\u884c\u3002</p>"},{"location":"study/self/html/lec3/","title":"Lecture 3\uff1a\u5176\u4ed6\u683c\u5f0f","text":""},{"location":"study/self/html/lec3/#1","title":"1 \u7279\u6b8a\u683c\u5f0f","text":"<p>\u5730\u5740\uff1a<code>address</code></p> HTML<pre><code>&lt;address&gt;\u4f5c\u8005\uff1a\u5f20\u4e09&lt;br&gt;\u5730\u5740\uff1a\u5317\u4eac\u5e02\u6d77\u6dc0\u533a&lt;/address&gt;\n</code></pre> <p>\u7f29\u8fdb\uff1a<code>blockquote</code></p> HTML<pre><code>&lt;blockquote&gt;\u8fd9\u662f\u4e00\u4e2a\u7f29\u8fdb\u7684\u6bb5\u843d\u3002&lt;/blockquote&gt;\n</code></pre> <p>\u5c0f\u5f15\u7528\uff1a<code>q</code></p> HTML<pre><code>&lt;q&gt;\u8fd9\u662f\u4e00\u4e2a\u5c0f\u5f15\u7528\u3002&lt;/q&gt;\n</code></pre> <p>\u9884\u683c\u5f0f\u5316\uff1a<code>pre</code></p> HTML<pre><code>&lt;pre&gt;\u8fd9\u662f\u4e00\u4e2a\u9884\u683c\u5f0f\u5316\u7684\u6bb5\u843d\u3002&lt;/pre&gt;\n</code></pre>"},{"location":"study/self/html/lec3/#2","title":"2 \u5c5e\u6027","text":"<p>\u6c34\u5e73\u5206\u5272\u7ebf\uff1a<code>hr</code></p> HTML<pre><code>&lt;p&gt;\u8fd9\u662f\u4e00\u6bb5\u6587\u5b57\u3002&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;\u8fd9\u662f\u53e6\u4e00\u6bb5\u6587\u5b57\u3002&lt;/p&gt;\n</code></pre> <p>\u5728\u8fd9\u4e2a\u91cc\u9762\u8fd8\u53ef\u4ee5\u52a0\u4e1c\u897f\uff1a</p> HTML<pre><code>&lt;hr width=\"50%\" align=\"left\" size=\"10\"&gt;\n</code></pre> <p>HTML 5 \u540e\uff0c\u53cc\u5f15\u53f7\u53ef\u4ee5\u7701\u7565\u3002</p> <p>\u4e0a\u9762\u8fd9\u4e09\u4e2a\u5c5e\u6027\uff0c\u8fd8\u662f\u5efa\u8bae\u7528 CSS \u6765\u63a7\u5236\u3002</p> <p>\u7f29\u5199\uff1a<code>abbr</code></p> HTML<pre><code>&lt;abbr title=\"HyperText Markup Language\"&gt;HTML&lt;/abbr&gt;\n</code></pre> <p>\u7528\u6d4f\u89c8\u5668\u6253\u5f00\uff0c\u9f20\u6807\u653e\u5728\u4e0a\u9762\u4f1a\u663e\u793a\u5168\u79f0\u3002</p> <p>\u8fd9\u79cd\u201c\u6d6e\u4e91\u201d\uff0c\u5b9e\u9645\u4e0a\u90fd\u662f\u901a\u8fc7 title \u5b9e\u73b0\u7684\u3002</p> <p>\u6392\u5217\u987a\u5e8f\uff1a<code>bdo</code></p> HTML<pre><code>&lt;bdo dir=\"rtl\"&gt;\u8fd9\u662f\u4e00\u4e2a\u4ece\u53f3\u5230\u5de6\u7684\u6bb5\u3002&lt;/bdo&gt;\n</code></pre> <p><code>rtl</code> \u662f right to left \u7684\u7f29\u5199\u3002</p> <p>\u4f60\u751a\u81f3\u53ef\u4ee5\u5728 <code>bdo</code> \u91cc\u9762\u52a0 <code>bdi</code>\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u4ece\u5de6\u5230\u53f3\u7684\u6bb5\u3002</p> <p>\u5982\u679c\u6211\u4eec\u60f3\u5728 HTML \u4e2d\u5448\u73b0\u8fd9\u4e2a\u6807\u8bb0\u7684\u5c16\u62ec\u53f7\uff0c\u4f8b\u5982\u8981\u8868\u793a a \u5c0f\u4e8e 2\uff0c\u5e94\u8be5\u4f7f\u7528 <code>&amp;lt;</code> \u548c <code>&amp;gt;</code>\u3002</p> HTML<pre><code>&lt;p&gt;a &amp;lt; 2&lt;/p&gt;\n</code></pre> <p>\u6b64\u5916\u8fd8\u6709 <code>&amp;amp;</code>\u3001<code>&amp;copy;</code> \u7b49\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u6709\u8da3\u7684\uff1a<code>&amp;uuml;</code>\uff0c\u8868\u793a\u5fb7\u8bed\u7684 u\u3002\u5982\u679c\u4f60\u60f3\u8868\u793a\u6c49\u8bed\u62fc\u97f3\u7684 \u00fc\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>&amp;uuml;</code>\u3002</p>"},{"location":"study/self/html/lec4/","title":"Lecture 4\uff1a\u5176\u4ed6\u5143\u7d20","text":""},{"location":"study/self/html/lec4/#1","title":"1 \u5217\u8868","text":"<p>\u65e0\u5e8f\u5217\u8868\uff1a<code>ul</code></p> HTML<pre><code>&lt;ul&gt;\n  &lt;li&gt;\u7b2c\u4e00\u9879&lt;/li&gt;\n  &lt;li&gt;\u7b2c\u4e8c\u9879&lt;/li&gt;\n  &lt;li&gt;\u7b2c\u4e09\u9879&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>\u6709\u5e8f\u5217\u8868\uff1a<code>ol</code></p> HTML<pre><code>&lt;ol&gt;\n  &lt;li&gt;\u7b2c\u4e00\u9879&lt;/li&gt;\n  &lt;li&gt;\u7b2c\u4e8c\u9879&lt;/li&gt;\n  &lt;li&gt;\u7b2c\u4e09\u9879&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>\u6709\u5e8f\u5217\u8868\u8fd8\u53ef\u4ee5\u52a0\u5165 <code>start</code> \u5c5e\u6027\uff1a</p> HTML<pre><code>&lt;ol start=\"10\"&gt;\n  &lt;li&gt;\u7b2c\u5341\u9879&lt;/li&gt;\n  &lt;li&gt;\u7b2c\u5341\u4e00\u9879&lt;/li&gt;\n  &lt;li&gt;\u7b2c\u5341\u4e8c\u9879&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>\u8fd9\u4e9b\u5217\u8868\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u5d4c\u5957\u3002</p> <p>\u5b9a\u4e49/\u8bcd\u6761\u5217\u8868\uff1a<code>dl</code></p> HTML<pre><code>&lt;dl&gt;\n  &lt;dt&gt;HTML&lt;/dt&gt;\n  &lt;dd&gt;HyperText Markup Language&lt;/dd&gt;\n  &lt;dt&gt;CSS&lt;/dt&gt;\n  &lt;dd&gt;Cascading Style Sheets&lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre> <p>\u5176\u4e2d <code>dt</code> \u662f\u5b9a\u4e49\u6807\u9898\uff08definition term\uff09\uff0c<code>dd</code> \u662f\u5b9a\u4e49\u63cf\u8ff0\uff08definition description\uff09\u3002</p>"},{"location":"study/self/html/lec4/#2","title":"2 \u56fe\u7247","text":"<p>\u653e\u56fe\u7247\u7528 <code>img</code> \u6807\u8bb0\uff08image\uff09\u3002</p> HTML<pre><code>&lt;img src=\"https://www.example.com/image.jpg\" width=\"50%\" height=\"50%\" alt=\"\u56fe\u7247\"&gt;\n</code></pre> <p>\u6700\u540e\u9762\u7684 <code>alt</code> \u662f\u56fe\u7247\u7684\u66ff\u4ee3\u6587\u672c\uff0c\u5f53\u56fe\u7247\u65e0\u6cd5\u663e\u793a\u65f6\u4f1a\u663e\u793a\u8fd9\u4e2a\u6587\u672c\u3002</p> <p>\u56fe\u7247\u53ef\u4ee5\u4f7f\u7528\u4e09\u79cd\u683c\u5f0f\uff1ajpg\u3001png\u3001gif\u3002</p> <p>\u7f51\u9875\u91cc\u9762\u8fd8\u53ef\u4ee5\u5f00\u7a97\u53e3\uff0c\u91cc\u9762\u53ef\u4ee5\u653e\u5f88\u591a\u4e1c\u897f\u3002\u8fd9\u4e2a\u7a97\u53e3\u5c31\u662f <code>iframe</code> \u6807\u8bb0\uff08inline frame\uff09\u3002</p> HTML<pre><code>&lt;iframe src=\"https://www.example.com/\" width=\"100%\" height=\"500px\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"study/self/html/lec4/#3","title":"3 \u94fe\u63a5","text":"<p>\u94fe\u63a5\u7528 <code>a</code> \u6807\u8bb0\uff08anchor\uff09\u3002</p> HTML<pre><code>&lt;a href=\"https://www.example.com/\"&gt;\u94fe\u63a5\u6587\u5b57&lt;/a&gt;\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u4e4b\u524d\u5728\u67d0\u4e2a\u6bb5\u843d\u7684\u6807\u8bb0\u5c5e\u6027\u4e2d\u4f7f\u7528\u4e86 <code>id</code> \u5c5e\u6027\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u951a\u70b9\u6765\u8df3\u8f6c\u5230\u8fd9\u4e2a\u6bb5\u843d\u3002</p> HTML<pre><code>&lt;a href=\"#section1\"&gt;\u8df3\u8f6c\u5230\u7b2c\u4e00\u8282&lt;/a&gt;\n\n&lt;p id=\"section1\"&gt;\u8fd9\u662f\u7b2c\u4e00\u8282\u7684\u5185\u5bb9\u3002&lt;/p&gt;\n</code></pre> <p>\u4e0d\u4ec5\u662f\u6bb5\u843d\uff0c\u5f88\u591a\u7684\u6807\u8bb0\u90fd\u53ef\u4ee5\u52a0 <code>id</code> \u5c5e\u6027\u3002</p> <p>\u94fe\u63a5\u8fd8\u53ef\u4ee5\u6709\u5176\u4ed6\u5c5e\u6027\uff0c\u4f8b\u5982 <code>target</code> \u5c5e\u6027\u3002</p> HTML<pre><code>&lt;a href=\"https://www.example.com/\" target=\"_blank\"&gt;\u5728\u65b0\u7a97\u53e3\u6253\u5f00\u94fe\u63a5&lt;/a&gt;\n</code></pre> <p>\u8fd8\u6709\u66f4\u597d\u73a9\u7684\uff1a</p> HTML<pre><code>&lt;p&gt;\n&lt;img src=\"image.jpg\" width=100 height=100 usemap=\"#map\"&gt;\n&lt;map name=\"map\"&gt;\n  &lt;area shape=\"rect\" coords=\"0,0,50,50\" href=\"https://www.example1.com/\"&gt;\n  &lt;area shape=\"circle\" coords=\"75,75,25\" href=\"https://www.example2.com/\"&gt;\n&lt;/map&gt;\n&lt;/p&gt;\n</code></pre> <p>\u5176\u5b9e\u770b\u4e00\u773c\u5c31\u80fd\u731c\u5230\uff0c\u8fd9\u662f\u4e00\u4e2a\u56fe\u7247\u5730\u56fe\u3002<code>area</code> \u6807\u8bb0\u662f\u4e00\u4e2a\u533a\u57df\uff0c<code>shape</code> \u5c5e\u6027\u662f\u5f62\u72b6\uff0c<code>coords</code> \u5c5e\u6027\u662f\u5750\u6807\uff0c<code>href</code> \u5c5e\u6027\u662f\u94fe\u63a5\u3002</p>"},{"location":"study/self/html/lec4/#4","title":"4 \u8868\u683c","text":"<p>\u8868\u683c\u7528 <code>table</code> \u6807\u8bb0\u3002</p> HTML<pre><code>&lt;table border=\"1\"&gt;\n  &lt;caption&gt;\u8868\u683c\u6807\u9898&lt;/caption&gt;\n  &lt;tr&gt;\n    &lt;th&gt;\u6807\u9898 1&lt;/th&gt;\n    &lt;th&gt;\u6807\u9898 2&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\u5185\u5bb9 1&lt;/td&gt;\n    &lt;td&gt;\u5185\u5bb9 2&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>\u5176\u4e2d <code>tr</code> \u662f\u884c\uff08table row\uff09\uff0c<code>th</code> \u662f\u8868\u5934\uff08table header\uff09\uff0c<code>td</code> \u662f\u6570\u636e\uff08table data\uff09\uff0c<code>border</code> \u662f\u8fb9\u6846\u3002</p> <p>\u8fd8\u53ef\u4ee5\u505a\u201c\u5408\u5e76\u5355\u5143\u683c\u201d\u64cd\u4f5c\uff0c\u7528 <code>colspan</code> \u548c <code>rowspan</code> \u5c5e\u6027\u3002</p> HTML<pre><code>&lt;table border=\"1\"&gt;\n  &lt;tr&gt;\n    &lt;th colspan=\"2\"&gt;\u6807\u9898&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\u5185\u5bb9 1&lt;/td&gt;\n    &lt;td&gt;\u5185\u5bb9 2&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p><code>th</code> \u53ea\u8868\u793a\u9488\u5bf9\u5355\u5143\u683c\u7684\u5934\u6548\u679c\uff0c\u5982\u679c\u60f3\u8981\u9488\u5bf9\u6574\u4e2a\u8868\u683c\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>thead</code>\u3001<code>tbody</code> \u548c <code>tfoot</code> \u6807\u8bb0\u3002</p> HTML<pre><code>&lt;table border=\"1\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;\u6807\u9898 1&lt;/th&gt;\n      &lt;th&gt;\u6807\u9898 2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\u5185\u5bb9 1&lt;/td&gt;\n      &lt;td&gt;\u5185\u5bb9 2&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tfoot&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\u5e95\u90e8 1&lt;/td&gt;\n      &lt;td&gt;\u5e95\u90e8 2&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tfoot&gt;\n&lt;/table&gt;\n</code></pre>"}]}